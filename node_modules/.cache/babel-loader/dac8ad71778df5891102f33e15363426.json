{"ast":null,"code":"export function debounce(func, wait, immediate) {\n  var DEtimeout;\n  return function () {\n    var DEcontext = this,\n        DEargs = arguments;\n\n    var DElater = function () {\n      DEtimeout = null;\n\n      if (!immediate) {\n        func.apply(DEcontext, DEargs);\n      }\n    };\n\n    var DEcallNow = immediate && !DEtimeout;\n    clearTimeout(DEtimeout);\n    DEtimeout = setTimeout(DElater, wait);\n\n    if (DEcallNow) {\n      func.apply(DEcontext, DEargs);\n    }\n  };\n}\nexport function mergeSort(list) {\n  const len = list.length; // an array of length == 1 is technically a sorted list\n\n  if (len == 1) {\n    return list;\n  } // get mid item\n\n\n  const middleIndex = Math.ceil(len / 2); // split current list into two: left and right list\n\n  let leftList = list.slice(0, middleIndex);\n  let rightList = list.slice(middleIndex, len);\n  console.log(\"leftList1\", leftList);\n  console.log(\"rightList1\", rightList);\n  debugger;\n  leftList = mergeSort(leftList);\n  rightList = mergeSort(rightList);\n  console.log(\"leftListRemix\", leftList);\n  console.log(\"rightListRemix\", rightList);\n  let newList = merge(leftList, rightList);\n  console.log(\"newList\", newList);\n  return newList;\n} // Solve the sub-problems and merge them together\n\nexport function merge(leftList, rightList) {\n  const sorted = [];\n\n  while (leftList.length > 0 && rightList.length > 0) {\n    let leftItem = leftList[0];\n    leftItem = leftItem.replace(/\\%/, \"\");\n    leftItem = parseFloat(leftItem);\n    console.log(\"i am leftitem\", leftItem);\n    let rightItem = rightList[0];\n    rightItem = rightItem.replace(/\\%/, \"\");\n    console.log(\"i am rightitem\", rightItem);\n\n    if (leftItem > rightItem) {\n      sorted.push(rightItem);\n      rightList.shift();\n      console.log(\"leftItem is greater leftItem, rightItem\", leftItem, rightItem);\n    } else {\n      sorted.push(leftItem);\n      leftList.shift();\n    }\n  } // if left list has items, add what is left to the results\n\n\n  while (leftList.length !== 0) {\n    let temp = leftList[0];\n    temp = temp.replace(/\\%/, \"\");\n    temp = parseFloat(temp);\n    sorted.push(temp);\n    console.log(\"leftList[0]\", temp);\n    leftList.shift();\n  } // if right list has items, add what is left to the results\n\n\n  while (rightList.length !== 0) {\n    let temp = rightList[0];\n    temp = temp.replace(/\\%/, \"\");\n    temp = parseFloat(temp);\n    sorted.push(temp);\n    console.log(\"rightList[0]\", temp);\n    rightList.shift();\n    debugger;\n  }\n\n  console.log(\"i am sorted\", sorted); // merge the left and right list\n\n  return sorted;\n}","map":{"version":3,"sources":["/Users/amandainnis/ReactProjects/board-app/src/components/reusable/common.js"],"names":["debounce","func","wait","immediate","DEtimeout","DEcontext","DEargs","arguments","DElater","apply","DEcallNow","clearTimeout","setTimeout","mergeSort","list","len","length","middleIndex","Math","ceil","leftList","slice","rightList","console","log","newList","merge","sorted","leftItem","replace","parseFloat","rightItem","push","shift","temp"],"mappings":"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","sourcesContent":["export function debounce(func, wait, immediate) {\n  var DEtimeout;\n  return function() {\n    var DEcontext = this,\n      DEargs = arguments;\n    var DElater = function() {\n      DEtimeout = null;\n      if (!immediate) {\n        func.apply(DEcontext, DEargs);\n      }\n    };\n    var DEcallNow = immediate && !DEtimeout;\n    clearTimeout(DEtimeout);\n    DEtimeout = setTimeout(DElater, wait);\n    if (DEcallNow) {\n      func.apply(DEcontext, DEargs);\n    }\n  };\n}\n\nexport function mergeSort(list) {\n  const len = list.length;\n  // an array of length == 1 is technically a sorted list\n  if (len == 1) {\n    return list;\n  }\n\n  // get mid item\n  const middleIndex = Math.ceil(len / 2);\n\n  // split current list into two: left and right list\n  let leftList = list.slice(0, middleIndex);\n  let rightList = list.slice(middleIndex, len);\n  console.log(\"leftList1\", leftList);\n  console.log(\"rightList1\", rightList);\n  debugger;\n  leftList = mergeSort(leftList);\n  rightList = mergeSort(rightList);\n  console.log(\"leftListRemix\", leftList);\n  console.log(\"rightListRemix\", rightList);\n\n  let newList = merge(leftList, rightList);\n  console.log(\"newList\", newList);\n\n  return newList;\n}\n\n// Solve the sub-problems and merge them together\nexport function merge(leftList, rightList) {\n  const sorted = [];\n  while (leftList.length > 0 && rightList.length > 0) {\n    let leftItem = leftList[0];\n    leftItem = leftItem.replace(/\\%/, \"\");\n    leftItem = parseFloat(leftItem);\n    console.log(\"i am leftitem\", leftItem);\n    let rightItem = rightList[0];\n    rightItem = rightItem.replace(/\\%/, \"\");\n    console.log(\"i am rightitem\", rightItem);\n    if (leftItem > rightItem) {\n      sorted.push(rightItem);\n      rightList.shift();\n      console.log(\n        \"leftItem is greater leftItem, rightItem\",\n        leftItem,\n        rightItem\n      );\n    } else {\n      sorted.push(leftItem);\n      leftList.shift();\n    }\n  }\n\n  // if left list has items, add what is left to the results\n  while (leftList.length !== 0) {\n    let temp = leftList[0];\n    temp = temp.replace(/\\%/, \"\");\n    temp = parseFloat(temp);\n    sorted.push(temp);\n    console.log(\"leftList[0]\", temp);\n    leftList.shift();\n  }\n\n  // if right list has items, add what is left to the results\n  while (rightList.length !== 0) {\n    let temp = rightList[0];\n    temp = temp.replace(/\\%/, \"\");\n    temp = parseFloat(temp);\n    sorted.push(temp);\n    console.log(\"rightList[0]\", temp);\n\n    rightList.shift();\n    debugger;\n  }\n  console.log(\"i am sorted\", sorted);\n\n  // merge the left and right list\n  return sorted;\n}\n"]},"metadata":{},"sourceType":"module"}