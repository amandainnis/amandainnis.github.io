{"ast":null,"code":"import * as priceJson from \"../data/priceData.json\";\nimport * as indexJson from \"../data/spyData.json\";\nimport * as moment from \"../../node_modules/moment/moment\";\nconst prePieData = [{\n  label: \"Seltzer\",\n  value: 5,\n  tooltipValue: \"Seltzer is great\",\n  color: \"pink\"\n}, {\n  label: \"Seltzer\",\n  value: 5,\n  tooltipValue: \"Seltzer is great\",\n  color: \"teal\"\n}, {\n  label: \"Grapefruit Juice\",\n  value: 2,\n  tooltipValue: \"Grapefruit Juice is healthy\",\n  color: \"yellow\"\n}, {\n  label: \"Pellegrino\",\n  value: 9,\n  tooltipValue: \"Pellegrino is best\",\n  color: \"tan\"\n}, {\n  label: \"Pellegrino\",\n  value: 9,\n  tooltipValue: \"Pellegrino is best\",\n  color: \"navy\"\n}];\n\nfunction sortArray(data, key) {\n  let newArr = data.sort((a, b) => {\n    if (a[key] < b[key]) {\n      return 1;\n    } else if (a[key] > b[key]) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return newArr;\n}\n\nexport function createPieData() {\n  return sortArray(prePieData, \"value\");\n}\n\nfunction sortACData() {\n  console.log(priceJson[\"Time Series (5min)\"]);\n  const entriesArr = Object.entries(priceJson[\"Time Series (5min)\"]).sort((a, b) => {\n    return moment(a[0]).unix() - moment(b[0]).unix();\n  });\n  console.log(entriesArr);\n  console.log(Object.entries(priceJson[\"Time Series (5min)\"]));\n  const newArr = Object.keys(priceJson[\"Time Series (5min)\"]).sort((a, b) => {\n    // console.log(moment(a).unix(), moment(b).unix());\n    return moment(a).unix() - moment(b).unix();\n  });\n  console.log(newArr);\n}\n\nfunction formatAlphaCaptureData() {\n  sortACData();\n  let arr = Object.keys(priceJson[\"Time Series (5min)\"]);\n  let tempArr = [];\n  let jsonPrice = priceJson[\"Time Series (5min)\"];\n  let jsonIndex = indexJson[\"Time Series (5min)\"];\n\n  for (let i = 0; i < arr.length; i++) {\n    let niceDate = moment(arr[i]).format(\"DD MMM YYYY\");\n    let niceDateAbbrev = moment(arr[i]).format(\"DD MMM\");\n    let niceTime = moment(arr[i]).format(\"h:mm A\");\n    let price = Math.round(jsonPrice[arr[i]][\"4. close\"] * 100) / 100;\n    let benchmark = Math.round(jsonIndex[arr[i]][\"4. close\"] * 100) / 100;\n    let index = i; // moment(d).format(\"DD MMM\");\n\n    tempArr.push({\n      fullDate: arr[i],\n      niceDate: niceDate,\n      niceDateAbbrev: niceDateAbbrev,\n      niceTime: niceTime,\n      price: price,\n      benchmark: benchmark,\n      index: index\n    });\n  }\n\n  return tempArr;\n}\n\nfunction formatSinglePriceData() {\n  let arr = Object.keys(priceJson[\"Time Series (5min)\"]);\n  let tempArr = [];\n  let jsonPrice = priceJson[\"Time Series (5min)\"]; // tempArr.sort((a, b) => b[\"index\"] - a[\"index\"]);\n\n  for (let i = 0; i < arr.length; i++) {\n    let niceDate = moment(arr[i]).format(\"DD MMM YYYY\");\n    let niceDateAbbrev = moment(arr[i]).format(\"DD MMM\");\n    let niceTime = moment(arr[i]).format(\"h:mm A\");\n    let price = Math.round(jsonPrice[arr[i]][\"4. close\"] * 100) / 100;\n    let index = moment(arr[i]).unix();\n    tempArr.push({\n      fullDate: arr[i],\n      niceDate: niceDate,\n      niceDateAbbrev: niceDateAbbrev,\n      niceTime: niceTime,\n      price: price,\n      index: index\n    });\n  }\n\n  return tempArr;\n}\n\nexport const alphaCaptureChartData = formatAlphaCaptureData();\nexport const singlePriceData = formatSinglePriceData();","map":{"version":3,"sources":["/Users/amandainnis/ReactProjects/react-site/portfolio/src/data/DataHandler.js"],"names":["priceJson","indexJson","moment","prePieData","label","value","tooltipValue","color","sortArray","data","key","newArr","sort","a","b","createPieData","sortACData","console","log","entriesArr","Object","entries","unix","keys","formatAlphaCaptureData","arr","tempArr","jsonPrice","jsonIndex","i","length","niceDate","format","niceDateAbbrev","niceTime","price","Math","round","benchmark","index","push","fullDate","formatSinglePriceData","alphaCaptureChartData","singlePriceData"],"mappings":"AAAA,OAAO,KAAKA,SAAZ,MAA2B,wBAA3B;AACA,OAAO,KAAKC,SAAZ,MAA2B,sBAA3B;AACA,OAAO,KAAKC,MAAZ,MAAwB,kCAAxB;AAEA,MAAMC,UAAU,GAAG,CACjB;AACEC,EAAAA,KAAK,EAAE,SADT;AAEEC,EAAAA,KAAK,EAAE,CAFT;AAGEC,EAAAA,YAAY,EAAE,kBAHhB;AAIEC,EAAAA,KAAK,EAAE;AAJT,CADiB,EAOjB;AACEH,EAAAA,KAAK,EAAE,SADT;AAEEC,EAAAA,KAAK,EAAE,CAFT;AAGEC,EAAAA,YAAY,EAAE,kBAHhB;AAIEC,EAAAA,KAAK,EAAE;AAJT,CAPiB,EAajB;AACEH,EAAAA,KAAK,EAAE,kBADT;AAEEC,EAAAA,KAAK,EAAE,CAFT;AAGEC,EAAAA,YAAY,EAAE,6BAHhB;AAIEC,EAAAA,KAAK,EAAE;AAJT,CAbiB,EAmBjB;AACEH,EAAAA,KAAK,EAAE,YADT;AAEEC,EAAAA,KAAK,EAAE,CAFT;AAGEC,EAAAA,YAAY,EAAE,oBAHhB;AAIEC,EAAAA,KAAK,EAAE;AAJT,CAnBiB,EAyBjB;AACEH,EAAAA,KAAK,EAAE,YADT;AAEEC,EAAAA,KAAK,EAAE,CAFT;AAGEC,EAAAA,YAAY,EAAE,oBAHhB;AAIEC,EAAAA,KAAK,EAAE;AAJT,CAzBiB,CAAnB;;AAgCA,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,GAAzB,EAA8B;AAC5B,MAAIC,MAAM,GAAGF,IAAI,CAACG,IAAL,CAAU,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC/B,QAAID,CAAC,CAACH,GAAD,CAAD,GAASI,CAAC,CAACJ,GAAD,CAAd,EAAqB;AACnB,aAAO,CAAP;AACD,KAFD,MAEO,IAAIG,CAAC,CAACH,GAAD,CAAD,GAASI,CAAC,CAACJ,GAAD,CAAd,EAAqB;AAC1B,aAAO,CAAC,CAAR;AACD,KAFM,MAEA;AACL,aAAO,CAAP;AACD;AACF,GARY,CAAb;AASA,SAAOC,MAAP;AACD;;AACD,OAAO,SAASI,aAAT,GAAyB;AAC9B,SAAOP,SAAS,CAACL,UAAD,EAAa,OAAb,CAAhB;AACD;;AACD,SAASa,UAAT,GAAsB;AACpBC,EAAAA,OAAO,CAACC,GAAR,CAAYlB,SAAS,CAAC,oBAAD,CAArB;AACA,QAAMmB,UAAU,GAAGC,MAAM,CAACC,OAAP,CAAerB,SAAS,CAAC,oBAAD,CAAxB,EAAgDY,IAAhD,CACjB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACR,WAAOZ,MAAM,CAACW,CAAC,CAAC,CAAD,CAAF,CAAN,CAAaS,IAAb,KAAsBpB,MAAM,CAACY,CAAC,CAAC,CAAD,CAAF,CAAN,CAAaQ,IAAb,EAA7B;AACD,GAHgB,CAAnB;AAKAL,EAAAA,OAAO,CAACC,GAAR,CAAYC,UAAZ;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAYE,MAAM,CAACC,OAAP,CAAerB,SAAS,CAAC,oBAAD,CAAxB,CAAZ;AACA,QAAMW,MAAM,GAAGS,MAAM,CAACG,IAAP,CAAYvB,SAAS,CAAC,oBAAD,CAArB,EAA6CY,IAA7C,CAAkD,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACzE;AACA,WAAOZ,MAAM,CAACW,CAAD,CAAN,CAAUS,IAAV,KAAmBpB,MAAM,CAACY,CAAD,CAAN,CAAUQ,IAAV,EAA1B;AACD,GAHc,CAAf;AAIAL,EAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ;AACD;;AACD,SAASa,sBAAT,GAAkC;AAChCR,EAAAA,UAAU;AACV,MAAIS,GAAG,GAAGL,MAAM,CAACG,IAAP,CAAYvB,SAAS,CAAC,oBAAD,CAArB,CAAV;AACA,MAAI0B,OAAO,GAAG,EAAd;AACA,MAAIC,SAAS,GAAG3B,SAAS,CAAC,oBAAD,CAAzB;AACA,MAAI4B,SAAS,GAAG3B,SAAS,CAAC,oBAAD,CAAzB;;AAEA,OAAK,IAAI4B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAAG,CAACK,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnC,QAAIE,QAAQ,GAAG7B,MAAM,CAACuB,GAAG,CAACI,CAAD,CAAJ,CAAN,CAAeG,MAAf,CAAsB,aAAtB,CAAf;AACA,QAAIC,cAAc,GAAG/B,MAAM,CAACuB,GAAG,CAACI,CAAD,CAAJ,CAAN,CAAeG,MAAf,CAAsB,QAAtB,CAArB;AAEA,QAAIE,QAAQ,GAAGhC,MAAM,CAACuB,GAAG,CAACI,CAAD,CAAJ,CAAN,CAAeG,MAAf,CAAsB,QAAtB,CAAf;AACA,QAAIG,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWV,SAAS,CAACF,GAAG,CAACI,CAAD,CAAJ,CAAT,CAAkB,UAAlB,IAAgC,GAA3C,IAAkD,GAA9D;AACA,QAAIS,SAAS,GAAGF,IAAI,CAACC,KAAL,CAAWT,SAAS,CAACH,GAAG,CAACI,CAAD,CAAJ,CAAT,CAAkB,UAAlB,IAAgC,GAA3C,IAAkD,GAAlE;AACA,QAAIU,KAAK,GAAGV,CAAZ,CAPmC,CAQnC;;AAEAH,IAAAA,OAAO,CAACc,IAAR,CAAa;AACXC,MAAAA,QAAQ,EAAEhB,GAAG,CAACI,CAAD,CADF;AAEXE,MAAAA,QAAQ,EAAEA,QAFC;AAGXE,MAAAA,cAAc,EAAEA,cAHL;AAIXC,MAAAA,QAAQ,EAAEA,QAJC;AAKXC,MAAAA,KAAK,EAAEA,KALI;AAMXG,MAAAA,SAAS,EAAEA,SANA;AAOXC,MAAAA,KAAK,EAAEA;AAPI,KAAb;AASD;;AAED,SAAOb,OAAP;AACD;;AACD,SAASgB,qBAAT,GAAiC;AAC/B,MAAIjB,GAAG,GAAGL,MAAM,CAACG,IAAP,CAAYvB,SAAS,CAAC,oBAAD,CAArB,CAAV;AACA,MAAI0B,OAAO,GAAG,EAAd;AACA,MAAIC,SAAS,GAAG3B,SAAS,CAAC,oBAAD,CAAzB,CAH+B,CAI/B;;AACA,OAAK,IAAI6B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAAG,CAACK,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnC,QAAIE,QAAQ,GAAG7B,MAAM,CAACuB,GAAG,CAACI,CAAD,CAAJ,CAAN,CAAeG,MAAf,CAAsB,aAAtB,CAAf;AACA,QAAIC,cAAc,GAAG/B,MAAM,CAACuB,GAAG,CAACI,CAAD,CAAJ,CAAN,CAAeG,MAAf,CAAsB,QAAtB,CAArB;AAEA,QAAIE,QAAQ,GAAGhC,MAAM,CAACuB,GAAG,CAACI,CAAD,CAAJ,CAAN,CAAeG,MAAf,CAAsB,QAAtB,CAAf;AACA,QAAIG,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWV,SAAS,CAACF,GAAG,CAACI,CAAD,CAAJ,CAAT,CAAkB,UAAlB,IAAgC,GAA3C,IAAkD,GAA9D;AACA,QAAIU,KAAK,GAAGrC,MAAM,CAACuB,GAAG,CAACI,CAAD,CAAJ,CAAN,CAAeP,IAAf,EAAZ;AACAI,IAAAA,OAAO,CAACc,IAAR,CAAa;AACXC,MAAAA,QAAQ,EAAEhB,GAAG,CAACI,CAAD,CADF;AAEXE,MAAAA,QAAQ,EAAEA,QAFC;AAGXE,MAAAA,cAAc,EAAEA,cAHL;AAIXC,MAAAA,QAAQ,EAAEA,QAJC;AAKXC,MAAAA,KAAK,EAAEA,KALI;AAMXI,MAAAA,KAAK,EAAEA;AANI,KAAb;AAQD;;AAED,SAAOb,OAAP;AACD;;AACD,OAAO,MAAMiB,qBAAqB,GAAGnB,sBAAsB,EAApD;AACP,OAAO,MAAMoB,eAAe,GAAGF,qBAAqB,EAA7C","sourcesContent":["import * as priceJson from \"../data/priceData.json\";\nimport * as indexJson from \"../data/spyData.json\";\nimport * as moment from \"../../node_modules/moment/moment\";\n\nconst prePieData = [\n  {\n    label: \"Seltzer\",\n    value: 5,\n    tooltipValue: \"Seltzer is great\",\n    color: \"pink\"\n  },\n  {\n    label: \"Seltzer\",\n    value: 5,\n    tooltipValue: \"Seltzer is great\",\n    color: \"teal\"\n  },\n  {\n    label: \"Grapefruit Juice\",\n    value: 2,\n    tooltipValue: \"Grapefruit Juice is healthy\",\n    color: \"yellow\"\n  },\n  {\n    label: \"Pellegrino\",\n    value: 9,\n    tooltipValue: \"Pellegrino is best\",\n    color: \"tan\"\n  },\n  {\n    label: \"Pellegrino\",\n    value: 9,\n    tooltipValue: \"Pellegrino is best\",\n    color: \"navy\"\n  }\n];\nfunction sortArray(data, key) {\n  let newArr = data.sort((a, b) => {\n    if (a[key] < b[key]) {\n      return 1;\n    } else if (a[key] > b[key]) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return newArr;\n}\nexport function createPieData() {\n  return sortArray(prePieData, \"value\");\n}\nfunction sortACData() {\n  console.log(priceJson[\"Time Series (5min)\"]);\n  const entriesArr = Object.entries(priceJson[\"Time Series (5min)\"]).sort(\n    (a, b) => {\n      return moment(a[0]).unix() - moment(b[0]).unix();\n    }\n  );\n  console.log(entriesArr);\n  console.log(Object.entries(priceJson[\"Time Series (5min)\"]));\n  const newArr = Object.keys(priceJson[\"Time Series (5min)\"]).sort((a, b) => {\n    // console.log(moment(a).unix(), moment(b).unix());\n    return moment(a).unix() - moment(b).unix();\n  });\n  console.log(newArr);\n}\nfunction formatAlphaCaptureData() {\n  sortACData();\n  let arr = Object.keys(priceJson[\"Time Series (5min)\"]);\n  let tempArr = [];\n  let jsonPrice = priceJson[\"Time Series (5min)\"];\n  let jsonIndex = indexJson[\"Time Series (5min)\"];\n\n  for (let i = 0; i < arr.length; i++) {\n    let niceDate = moment(arr[i]).format(\"DD MMM YYYY\");\n    let niceDateAbbrev = moment(arr[i]).format(\"DD MMM\");\n\n    let niceTime = moment(arr[i]).format(\"h:mm A\");\n    let price = Math.round(jsonPrice[arr[i]][\"4. close\"] * 100) / 100;\n    let benchmark = Math.round(jsonIndex[arr[i]][\"4. close\"] * 100) / 100;\n    let index = i;\n    // moment(d).format(\"DD MMM\");\n\n    tempArr.push({\n      fullDate: arr[i],\n      niceDate: niceDate,\n      niceDateAbbrev: niceDateAbbrev,\n      niceTime: niceTime,\n      price: price,\n      benchmark: benchmark,\n      index: index\n    });\n  }\n\n  return tempArr;\n}\nfunction formatSinglePriceData() {\n  let arr = Object.keys(priceJson[\"Time Series (5min)\"]);\n  let tempArr = [];\n  let jsonPrice = priceJson[\"Time Series (5min)\"];\n  // tempArr.sort((a, b) => b[\"index\"] - a[\"index\"]);\n  for (let i = 0; i < arr.length; i++) {\n    let niceDate = moment(arr[i]).format(\"DD MMM YYYY\");\n    let niceDateAbbrev = moment(arr[i]).format(\"DD MMM\");\n\n    let niceTime = moment(arr[i]).format(\"h:mm A\");\n    let price = Math.round(jsonPrice[arr[i]][\"4. close\"] * 100) / 100;\n    let index = moment(arr[i]).unix();\n    tempArr.push({\n      fullDate: arr[i],\n      niceDate: niceDate,\n      niceDateAbbrev: niceDateAbbrev,\n      niceTime: niceTime,\n      price: price,\n      index: index\n    });\n  }\n\n  return tempArr;\n}\nexport const alphaCaptureChartData = formatAlphaCaptureData();\nexport const singlePriceData = formatSinglePriceData();\n"]},"metadata":{},"sourceType":"module"}