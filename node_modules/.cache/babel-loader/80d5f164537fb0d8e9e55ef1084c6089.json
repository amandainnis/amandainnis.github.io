{"ast":null,"code":"var _jsxFileName = \"/Users/amandainnis/ReactProjects/board-app/src/App.js\";\n\n/* eslint-disable no-unused-vars */\nimport React, { useEffect } from \"react\";\nimport Game from \"./components/game/game\";\nimport \"./App.scss\";\nimport Nav from \"./components/nav\";\nimport { DARK } from \"./global-styles/theme/dark\";\nimport { LIGHT } from \"./global-styles/theme/light\";\nimport ToDoCard from \"./components/learning/ToDoCard\";\nimport PortfolioCard from \"./components/portfolio-card\";\nimport Footer from \"./components/footer\";\nimport portfolioData from \"./data/portfolioData\";\nimport AlertingCard from \"./components/alerting/AlertingCard\";\nimport AlphaCapCard from \"./components/alphaCapture/AlphaCapCard\";\nimport InsightAnalyticsCard from \"./components/insightAnalytics/InsightAnalyticsCard\";\nimport CRBCard from \"./components/crb/CRBCard\"; // https://reactjs.org/docs/faq-functions.html#how-can-i-prevent-a-function-from-being-called-too-quickly-or-too-many-times-in-a-row\n\nimport rafSchedule from \"raf-schd\"; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findindex\n// https://scrimba.com/p/p4Mrt9/cQnMDHD  js Class\n// // https://reactjs.org/docs/events.html#supported-events\n// why make a class instead of a function?  to use lifecycle functions\n\nclass App extends React.Component {\n  // defaultTheme = \"light\";\n  constructor(props) {\n    super(props);\n    this.dark = DARK;\n    this.light = LIGHT;\n    this.bodyRef = React.createRef();\n    this.alertingRef = React.createRef();\n    this.handleScroll = this.handleScroll.bind(this); // this.scheduleUpdate = rafSchedule(point =>\n    //   this.state.myAlerting.onScroll(point)\n    // );\n    // according to react docs, deriving state from props is bad\n    // https://reactjs.org/docs/react-component.html#getsnapshotbeforeupdate\n\n    this.state = {\n      theme: props.theme,\n      myBody: this.bodyRef,\n      myAlerting: this.alertingRef,\n      scrollHeight: null,\n      bodyHeight: null,\n      bodyOffset: null,\n      visibleArea: null,\n      alertingOffset: null\n    }; // this.setTheme(props.theme);\n\n    if (props.theme === \"light\") {\n      // Object.assign(this.light.properties, this.appLight.properties);\n      this.generateVars(this.light);\n    } else {\n      // Object.assign(this.dark.properties, this.appDark.properties);\n      this.generateVars(this.dark);\n    }\n\n    this.setTheme = this.setTheme.bind(this); // console.log(props.theme, this.state.theme);\n    // console.log(this.state.scrollHeight);\n    // this.generateTheme(props.theme); //  LOOK HERE\n    // this.getActiveTheme = this.getActiveTheme.bind(this);\n  } // getSnapshotBeforeUpdate(prevProps, prevState) {\n  //   // Are we adding new items to the list?\n  //   // Capture the scroll position so we can adjust scroll later.\n  //   const theBody = this.listRef.current;\n  //   const alerting = this.alertingRef.current;\n  //   console.log(theBody, alerting);\n  //   return [theBody, alerting];\n  //   // return list.scrollHeight - list.scrollTop;\n  // }\n  // componentDidUpdate(prevProps, prevState, snapshot) {\n  //   // If we have a snapshot value, we've just added new items.\n  //   // Adjust scroll so these new items don't push the old ones out of view.\n  //   // (snapshot here is the value returned from getSnapshotBeforeUpdate)\n  //   // if (snapshot !== null) {\n  //   //   const list = this.listRef.current;\n  //   //   list.scrollTop = list.scrollHeight - snapshot;\n  //   // }\n  //   if (snapshot !== null) {\n  //     const theBody = this.listRef.current;\n  //     const alerting = this.alertingRef.current;\n  //     console.log(theBody, alerting);\n  //     return [theBody, alerting];\n  //   }\n  // }\n\n\n  generateVars(theme) {\n    Object.keys(theme.properties).forEach(property => {\n      document.documentElement.style.setProperty(property, theme.properties[property]);\n    });\n  }\n\n  generateTheme(theme) {\n    const current = theme; // console.log(\"i am active theme\", theme);\n\n    if (theme === \"light\") {\n      // Object.assign(this.light.properties, this.appLight.properties);\n      this.generateVars(current);\n    } else {\n      // Object.assign(this.dark.properties, this.appDark.properties);\n      this.generateVars(current);\n    }\n  }\n\n  setTheme() {\n    // const theme = this.state.theme === \"light\" ? \"dark\" : \"light\";\n    const theme = this.state.theme === \"light\" ? \"dark\" : \"light\"; // console.log(theme);\n\n    localStorage.setItem(\"theme\", theme); // this.document.querySelector(\"html\").className = \"theme-\" + theme;\n\n    if (theme === \"light\") {\n      console.log(\"yo, im light\");\n      this.setState({\n        theme: \"light\"\n      }); // this.state.theme = \"light\";\n\n      console.log(this.state);\n      this.generateTheme(this.light);\n    } else {\n      console.log(\"yo, im dark\");\n      this.setState({\n        theme: \"dark\"\n      }); // this.state.theme = \"dark\";\n\n      console.log(this.state);\n      this.generateTheme(this.dark);\n    }\n  }\n\n  handleScroll(e) {\n    // https://reactjs.org/docs/faq-functions.html#how-can-i-prevent-a-function-from-being-called-too-quickly-or-too-many-times-in-a-row\n    // When we receive a scroll event, schedule an update.\n    // If we receive many updates within a frame, we'll only publish the latest value.\n    // this.scheduleUpdate({ x: e.clientX, y: e.clientY });\n    console.log(this.state);\n  }\n\n  componentDidMount() {\n    console.log(this.state.myBody);\n    const scrollHeight = this.state.myBody.current.scrollHeight;\n    const bodyHeight = this.state.myBody.current.clientHeight; // bodyOffset: this.bodyRef.current.offsetTop,\n    // visibleArea:\n    //   this.bodyRef.current.clientHeight + this.bodyRef.current.offsetTop,\n    // cardsOffset: this.alertingRef.current.offsetTop\n    // bodyHeight: this.bodyRef.current.clientHeight,\n    // bodyOffset: this.bodyRef.current.offsetTop,\n    // visibleArea:\n    //   this.bodyRef.current.clientHeight + this.bodyRef.current.offsetTop,\n    // alertingOffset: this.alertingRef.current.offsetTop\n\n    this.setState({\n      scrollHeight: scrollHeight,\n      bodyHeight: bodyHeight\n    });\n  }\n\n  componentWillUnmount() {\n    // Cancel any pending updates since we're unmounting.\n    this.scheduleUpdate.cancel();\n  }\n\n  render() {\n    // display logic goes here\n    // never set a variable or call a function in the render function unless absolutely necessary\n    const status = \"\".concat(this.state.theme);\n    console.log(\"i am pd\", portfolioData);\n    const scrollHeight = this.state.scrollHeight; // bodyHeight: this.bodyRef.current.clientHeight,\n    // bodyOffset: this.bodyRef.current.offsetTop,\n    // visibleArea:\n    //   this.bodyRef.current.clientHeight + this.bodyRef.current.offsetTop,\n    // cardsOffset: this.alertingRef.current.offsetTop\n    // setTimeout(() => {\n    //   console.log(constants.scrollHeight);\n    // }, 3000);\n    // console.log(scrollHeight);\n\n    return React.createElement(\"div\", {\n      className: \"theme-\" + status,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      getTheme: this.getActiveTheme,\n      setTheme: this.setTheme,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"inner-body\",\n      onScroll: this.handleScroll,\n      ref: this.bodyRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"headline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, \"Hi, I'm Amanda Innis, a designer & creative technologist\"), React.createElement(\"div\", {\n      className: \"card-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"wrapper-padding section-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"Projects\"), React.createElement(\"div\", {\n      className: \"portfolio-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(InsightAnalyticsCard, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }), React.createElement(AlphaCapCard, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }), React.createElement(CRBCard, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }), React.createElement(AlertingCard, {\n      ref: this.alertingRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }))), React.createElement(ToDoCard, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/amandainnis/ReactProjects/board-app/src/App.js"],"names":["React","useEffect","Game","Nav","DARK","LIGHT","ToDoCard","PortfolioCard","Footer","portfolioData","AlertingCard","AlphaCapCard","InsightAnalyticsCard","CRBCard","rafSchedule","App","Component","constructor","props","dark","light","bodyRef","createRef","alertingRef","handleScroll","bind","state","theme","myBody","myAlerting","scrollHeight","bodyHeight","bodyOffset","visibleArea","alertingOffset","generateVars","setTheme","Object","keys","properties","forEach","property","document","documentElement","style","setProperty","generateTheme","current","localStorage","setItem","console","log","setState","e","componentDidMount","clientHeight","componentWillUnmount","scheduleUpdate","cancel","render","status","getActiveTheme"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, { useEffect } from \"react\";\nimport Game from \"./components/game/game\";\n\nimport \"./App.scss\";\nimport Nav from \"./components/nav\";\nimport { DARK } from \"./global-styles/theme/dark\";\nimport { LIGHT } from \"./global-styles/theme/light\";\nimport ToDoCard from \"./components/learning/ToDoCard\";\nimport PortfolioCard from \"./components/portfolio-card\";\nimport Footer from \"./components/footer\";\nimport portfolioData from \"./data/portfolioData\";\nimport AlertingCard from \"./components/alerting/AlertingCard\";\nimport AlphaCapCard from \"./components/alphaCapture/AlphaCapCard\";\nimport InsightAnalyticsCard from \"./components/insightAnalytics/InsightAnalyticsCard\";\nimport CRBCard from \"./components/crb/CRBCard\";\n// https://reactjs.org/docs/faq-functions.html#how-can-i-prevent-a-function-from-being-called-too-quickly-or-too-many-times-in-a-row\nimport rafSchedule from \"raf-schd\";\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findindex\n// https://scrimba.com/p/p4Mrt9/cQnMDHD  js Class\n// // https://reactjs.org/docs/events.html#supported-events\n// why make a class instead of a function?  to use lifecycle functions\n\nclass App extends React.Component {\n  // defaultTheme = \"light\";\n  dark = DARK;\n  light = LIGHT;\n\n  constructor(props) {\n    super(props);\n\n    this.bodyRef = React.createRef();\n    this.alertingRef = React.createRef();\n    this.handleScroll = this.handleScroll.bind(this);\n    // this.scheduleUpdate = rafSchedule(point =>\n    //   this.state.myAlerting.onScroll(point)\n    // );\n    // according to react docs, deriving state from props is bad\n    // https://reactjs.org/docs/react-component.html#getsnapshotbeforeupdate\n    this.state = {\n      theme: props.theme,\n      myBody: this.bodyRef,\n      myAlerting: this.alertingRef,\n      scrollHeight: null,\n      bodyHeight: null,\n      bodyOffset: null,\n      visibleArea: null,\n      alertingOffset: null\n    };\n\n    // this.setTheme(props.theme);\n    if (props.theme === \"light\") {\n      // Object.assign(this.light.properties, this.appLight.properties);\n      this.generateVars(this.light);\n    } else {\n      // Object.assign(this.dark.properties, this.appDark.properties);\n      this.generateVars(this.dark);\n    }\n    this.setTheme = this.setTheme.bind(this);\n\n    // console.log(props.theme, this.state.theme);\n    // console.log(this.state.scrollHeight);\n    // this.generateTheme(props.theme); //  LOOK HERE\n\n    // this.getActiveTheme = this.getActiveTheme.bind(this);\n  }\n  // getSnapshotBeforeUpdate(prevProps, prevState) {\n  //   // Are we adding new items to the list?\n  //   // Capture the scroll position so we can adjust scroll later.\n  //   const theBody = this.listRef.current;\n  //   const alerting = this.alertingRef.current;\n  //   console.log(theBody, alerting);\n  //   return [theBody, alerting];\n  //   // return list.scrollHeight - list.scrollTop;\n  // }\n  // componentDidUpdate(prevProps, prevState, snapshot) {\n  //   // If we have a snapshot value, we've just added new items.\n  //   // Adjust scroll so these new items don't push the old ones out of view.\n  //   // (snapshot here is the value returned from getSnapshotBeforeUpdate)\n  //   // if (snapshot !== null) {\n  //   //   const list = this.listRef.current;\n  //   //   list.scrollTop = list.scrollHeight - snapshot;\n  //   // }\n  //   if (snapshot !== null) {\n  //     const theBody = this.listRef.current;\n  //     const alerting = this.alertingRef.current;\n  //     console.log(theBody, alerting);\n  //     return [theBody, alerting];\n  //   }\n  // }\n\n  generateVars(theme) {\n    Object.keys(theme.properties).forEach(property => {\n      document.documentElement.style.setProperty(\n        property,\n        theme.properties[property]\n      );\n    });\n  }\n  generateTheme(theme) {\n    const current = theme;\n    // console.log(\"i am active theme\", theme);\n    if (theme === \"light\") {\n      // Object.assign(this.light.properties, this.appLight.properties);\n      this.generateVars(current);\n    } else {\n      // Object.assign(this.dark.properties, this.appDark.properties);\n      this.generateVars(current);\n    }\n  }\n  setTheme() {\n    // const theme = this.state.theme === \"light\" ? \"dark\" : \"light\";\n    const theme = this.state.theme === \"light\" ? \"dark\" : \"light\";\n\n    // console.log(theme);\n\n    localStorage.setItem(\"theme\", theme);\n    // this.document.querySelector(\"html\").className = \"theme-\" + theme;\n    if (theme === \"light\") {\n      console.log(\"yo, im light\");\n      this.setState({ theme: \"light\" });\n      // this.state.theme = \"light\";\n      console.log(this.state);\n      this.generateTheme(this.light);\n    } else {\n      console.log(\"yo, im dark\");\n      this.setState({ theme: \"dark\" });\n      // this.state.theme = \"dark\";\n      console.log(this.state);\n      this.generateTheme(this.dark);\n    }\n  }\n\n  handleScroll(e) {\n    // https://reactjs.org/docs/faq-functions.html#how-can-i-prevent-a-function-from-being-called-too-quickly-or-too-many-times-in-a-row\n    // When we receive a scroll event, schedule an update.\n    // If we receive many updates within a frame, we'll only publish the latest value.\n    // this.scheduleUpdate({ x: e.clientX, y: e.clientY });\n    console.log(this.state);\n  }\n  componentDidMount() {\n    console.log(this.state.myBody);\n    const scrollHeight = this.state.myBody.current.scrollHeight;\n    const bodyHeight = this.state.myBody.current.clientHeight;\n    // bodyOffset: this.bodyRef.current.offsetTop,\n    // visibleArea:\n    //   this.bodyRef.current.clientHeight + this.bodyRef.current.offsetTop,\n    // cardsOffset: this.alertingRef.current.offsetTop\n\n    // bodyHeight: this.bodyRef.current.clientHeight,\n    // bodyOffset: this.bodyRef.current.offsetTop,\n    // visibleArea:\n    //   this.bodyRef.current.clientHeight + this.bodyRef.current.offsetTop,\n    // alertingOffset: this.alertingRef.current.offsetTop\n    this.setState({\n      scrollHeight: scrollHeight,\n      bodyHeight: bodyHeight\n    });\n  }\n  componentWillUnmount() {\n    // Cancel any pending updates since we're unmounting.\n    this.scheduleUpdate.cancel();\n  }\n  render() {\n    // display logic goes here\n    // never set a variable or call a function in the render function unless absolutely necessary\n    const status = `${this.state.theme}`;\n    console.log(\"i am pd\", portfolioData);\n    const scrollHeight = this.state.scrollHeight;\n    // bodyHeight: this.bodyRef.current.clientHeight,\n    // bodyOffset: this.bodyRef.current.offsetTop,\n    // visibleArea:\n    //   this.bodyRef.current.clientHeight + this.bodyRef.current.offsetTop,\n    // cardsOffset: this.alertingRef.current.offsetTop\n\n    // setTimeout(() => {\n    //   console.log(constants.scrollHeight);\n    // }, 3000);\n    // console.log(scrollHeight);\n    return (\n      <div className={\"theme-\" + status}>\n        <Nav getTheme={this.getActiveTheme} setTheme={this.setTheme} />\n        <div\n          className=\"inner-body\"\n          onScroll={this.handleScroll}\n          ref={this.bodyRef}\n        >\n          <div className=\"headline\">\n            Hi, I'm Amanda Innis, a designer &amp; creative technologist\n          </div>\n\n          <div className=\"card-wrapper\">\n            <h1 className=\"wrapper-padding section-header\">Projects</h1>\n            <div className=\"portfolio-container\">\n              {<InsightAnalyticsCard></InsightAnalyticsCard>}\n              {<AlphaCapCard></AlphaCapCard>}\n              {<CRBCard></CRBCard>}\n              {<AlertingCard ref={this.alertingRef}></AlertingCard>}\n              {/* jon added the squiggly so it immediately renders */}\n              {/* {portfolioData.map((portfolio, i) => {\n                return <PortfolioCard key={i} data={portfolio} />;\n              })} */}\n            </div>\n          </div>\n\n          {<ToDoCard></ToDoCard>}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}