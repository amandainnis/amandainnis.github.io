{"ast":null,"code":"var _jsxFileName = \"/Users/amandainnis/ReactProjects/react-site/portfolio/src/components/reusable/pie.js\";\nimport React, { createRef, useState } from \"react\";\nimport * as d3 from \"../../node_modules/d3\";\nconst chartData = [{\n  label: \"Seltzer\",\n  value: 5,\n  tooltipValue: \"Seltzer is great\"\n}, {\n  label: \"Seltzer\",\n  value: 5,\n  tooltipValue: \"Seltzer is great\"\n}, {\n  label: \"Grapefruit Juice\",\n  value: 2,\n  tooltipValue: \"Grapefruit Juice is healthy\"\n}, {\n  label: \"Pellegrino\",\n  value: 9,\n  tooltipValue: \"Pellegrino is best\"\n}, {\n  label: \"Pellegrino\",\n  value: 9,\n  tooltipValue: \"Pellegrino is best\"\n}];\nexport default function Pie(props) {\n  const chart = createRef();\n  const chartContainer = createRef();\n  containerElement = chart.current;\n  console.log(containerElement); // function renderChart() {\n  //   if (chartData && chartData.length > 0) {\n  //     containerElement = chart.current;\n  //     // this has to be there so chart doesnt render multiple times\n  //     containerElement.innerHTML = \"\";\n  //     // consts work better with angular/d3 than setting up variables (this.variable) inside the component\n  //     // the borderParent const is necessary for anchoring the different colored border classes that get attached on hover\n  //     const tooltip = d3\n  //       .select(this.containerElement)\n  //       .append(\"div\")\n  //       .attr(\"class\", \"d3-tooltip\");\n  //     const borderParent = tooltip.append(\"div\").attr(\"class\", \"border-parent\");\n  //     const d3InnerTooltip = tooltip\n  //       .append(\"div\")\n  //       .attr(\"class\", \"d3-tooltip-inner\");\n  //     d3InnerTooltip.append(\"div\").attr(\"class\", \"d3-title\");\n  //     d3InnerTooltip.append(\"div\").attr(\"class\", \"amount\");\n  //     this.vis = d3\n  //       .select(this.containerElement)\n  //       .append(\"svg:svg\")\n  //       .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  //       // the 300 and 300 represents height and width, viewbox is necessary for responsive sizing\n  //       .attr(\"viewBox\", \"0 0 200 200\")\n  //       .data([this._chartData])\n  //       .attr(\"class\", \"mamaSVG\")\n  //       .append(\"g\")\n  //       .attr(\"class\", \"bigSVG\")\n  //       // move the center of the pie chart from 0, 0 to radius, radius\n  //       .attr(\"transform\", \"translate(\" + this.r + \",\" + this.r + \")\");\n  //     const arc = d3\n  //       .arc()\n  //       .outerRadius(this.r)\n  //       .innerRadius(40);\n  //     // this will create arc data for us given a list of values\n  //     const pie = d3\n  //       .pie()\n  //       // we must tell it out to access the value of each element in our data array\n  //       .value(function(d: any) {\n  //         //console.log(d[values]);\n  //         return parseFloat(d[values]);\n  //       });\n  //     // this selects all <g> elements with class slice (there aren't any yet)\n  //     const arcs = this.vis\n  //       .selectAll(\"g\")\n  //       .attr(\"class\", \"slice\")\n  //       // associate the generated pie data (an array of arcs, each having startAngle, endAngle and value properties)\n  //       // creating a <g> for every object in the data array\n  //       .data(pie)\n  //       .enter();\n  //     arcs\n  //       .append(\"svg:path\")\n  //       .attr(\"class\", \"arcs\")\n  //       // set the color for each slice to be chosen from the color function defined above\n  //       .attr(\"fill\", (d: any, i: any) => {\n  //         // console.log(d.data[colors]);\n  //         return d.data.color;\n  //       })\n  //       // this creates the actual SVG path using the associated data (pie) with the arc drawing function\n  //       .attr(\"d\", arc)\n  //       // .attr('id', function (d) {\n  //       //   return (d.data[labels]).replace(/\\s/g, '');\n  //       // })\n  //       .text(function(d) {\n  //         return d;\n  //       })\n  //       .on(\"mouseenter\", function(d, i) {\n  //         const title = d.data[labels];\n  //         const total = d.data[toolTipValues];\n  //         // let border = d.data[borderClass];\n  //         borderParent.attr(\"background-color\", d.data.color);\n  //         borderParent.style(\"width\", \"4px\");\n  //         d3InnerTooltip.select(\".d3-title\").text(d.data[labels]);\n  //         d3InnerTooltip.select(\".amount\").text(d.data[toolTipValues]);\n  //         tooltip.style(\"display\", \"flex\");\n  //         tooltip.style(\"opacity\", 1);\n  //       })\n  //       .on(\"mousemove\", function(d) {\n  //         tooltip\n  //           .style(\"top\", d3.event.clientY + 30 + \"px\")\n  //           .style(\"left\", d3.event.clientX - 25 + \"px\");\n  //       });\n  //     const outervis = d3\n  //       .select(this.chartContainer.nativeElement)\n  //       .on(\"mouseleave\", function() {\n  //         tooltip.style(\"opacity\", 0);\n  //       });\n  //   }\n  // }\n\n  return React.createElement(\"div\", {\n    className: \"pie-chart svg-container\",\n    ref: chartContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    ref: chart,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/amandainnis/ReactProjects/react-site/portfolio/src/components/reusable/pie.js"],"names":["React","createRef","useState","d3","chartData","label","value","tooltipValue","Pie","props","chart","chartContainer","containerElement","current","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,KAAKC,EAAZ,MAAoB,uBAApB;AACA,MAAMC,SAAS,GAAG,CAChB;AAAEC,EAAAA,KAAK,EAAE,SAAT;AAAoBC,EAAAA,KAAK,EAAE,CAA3B;AAA8BC,EAAAA,YAAY,EAAE;AAA5C,CADgB,EAEhB;AAAEF,EAAAA,KAAK,EAAE,SAAT;AAAoBC,EAAAA,KAAK,EAAE,CAA3B;AAA8BC,EAAAA,YAAY,EAAE;AAA5C,CAFgB,EAGhB;AACEF,EAAAA,KAAK,EAAE,kBADT;AAEEC,EAAAA,KAAK,EAAE,CAFT;AAGEC,EAAAA,YAAY,EAAE;AAHhB,CAHgB,EAQhB;AAAEF,EAAAA,KAAK,EAAE,YAAT;AAAuBC,EAAAA,KAAK,EAAE,CAA9B;AAAiCC,EAAAA,YAAY,EAAE;AAA/C,CARgB,EAShB;AAAEF,EAAAA,KAAK,EAAE,YAAT;AAAuBC,EAAAA,KAAK,EAAE,CAA9B;AAAiCC,EAAAA,YAAY,EAAE;AAA/C,CATgB,CAAlB;AAWA,eAAe,SAASC,GAAT,CAAaC,KAAb,EAAoB;AACjC,QAAMC,KAAK,GAAGT,SAAS,EAAvB;AACA,QAAMU,cAAc,GAAGV,SAAS,EAAhC;AAEAW,EAAAA,gBAAgB,GAAGF,KAAK,CAACG,OAAzB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,gBAAZ,EALiC,CAMjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SACE;AAAK,IAAA,SAAS,EAAC,yBAAf;AAAyC,IAAA,GAAG,EAAED,cAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,GAAG,EAAED,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD","sourcesContent":["import React, { createRef, useState } from \"react\";\nimport * as d3 from \"../../node_modules/d3\";\nconst chartData = [\n  { label: \"Seltzer\", value: 5, tooltipValue: \"Seltzer is great\" },\n  { label: \"Seltzer\", value: 5, tooltipValue: \"Seltzer is great\" },\n  {\n    label: \"Grapefruit Juice\",\n    value: 2,\n    tooltipValue: \"Grapefruit Juice is healthy\"\n  },\n  { label: \"Pellegrino\", value: 9, tooltipValue: \"Pellegrino is best\" },\n  { label: \"Pellegrino\", value: 9, tooltipValue: \"Pellegrino is best\" }\n];\nexport default function Pie(props) {\n  const chart = createRef();\n  const chartContainer = createRef();\n\n  containerElement = chart.current;\n  console.log(containerElement);\n  // function renderChart() {\n  //   if (chartData && chartData.length > 0) {\n  //     containerElement = chart.current;\n  //     // this has to be there so chart doesnt render multiple times\n  //     containerElement.innerHTML = \"\";\n  //     // consts work better with angular/d3 than setting up variables (this.variable) inside the component\n  //     // the borderParent const is necessary for anchoring the different colored border classes that get attached on hover\n  //     const tooltip = d3\n  //       .select(this.containerElement)\n  //       .append(\"div\")\n  //       .attr(\"class\", \"d3-tooltip\");\n  //     const borderParent = tooltip.append(\"div\").attr(\"class\", \"border-parent\");\n  //     const d3InnerTooltip = tooltip\n  //       .append(\"div\")\n  //       .attr(\"class\", \"d3-tooltip-inner\");\n  //     d3InnerTooltip.append(\"div\").attr(\"class\", \"d3-title\");\n  //     d3InnerTooltip.append(\"div\").attr(\"class\", \"amount\");\n\n  //     this.vis = d3\n  //       .select(this.containerElement)\n  //       .append(\"svg:svg\")\n  //       .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  //       // the 300 and 300 represents height and width, viewbox is necessary for responsive sizing\n  //       .attr(\"viewBox\", \"0 0 200 200\")\n  //       .data([this._chartData])\n  //       .attr(\"class\", \"mamaSVG\")\n  //       .append(\"g\")\n  //       .attr(\"class\", \"bigSVG\")\n  //       // move the center of the pie chart from 0, 0 to radius, radius\n  //       .attr(\"transform\", \"translate(\" + this.r + \",\" + this.r + \")\");\n\n  //     const arc = d3\n  //       .arc()\n  //       .outerRadius(this.r)\n  //       .innerRadius(40);\n\n  //     // this will create arc data for us given a list of values\n  //     const pie = d3\n  //       .pie()\n  //       // we must tell it out to access the value of each element in our data array\n  //       .value(function(d: any) {\n  //         //console.log(d[values]);\n  //         return parseFloat(d[values]);\n  //       });\n  //     // this selects all <g> elements with class slice (there aren't any yet)\n\n  //     const arcs = this.vis\n  //       .selectAll(\"g\")\n  //       .attr(\"class\", \"slice\")\n  //       // associate the generated pie data (an array of arcs, each having startAngle, endAngle and value properties)\n  //       // creating a <g> for every object in the data array\n  //       .data(pie)\n  //       .enter();\n\n  //     arcs\n  //       .append(\"svg:path\")\n  //       .attr(\"class\", \"arcs\")\n  //       // set the color for each slice to be chosen from the color function defined above\n  //       .attr(\"fill\", (d: any, i: any) => {\n  //         // console.log(d.data[colors]);\n  //         return d.data.color;\n  //       })\n  //       // this creates the actual SVG path using the associated data (pie) with the arc drawing function\n  //       .attr(\"d\", arc)\n  //       // .attr('id', function (d) {\n  //       //   return (d.data[labels]).replace(/\\s/g, '');\n  //       // })\n  //       .text(function(d) {\n  //         return d;\n  //       })\n\n  //       .on(\"mouseenter\", function(d, i) {\n  //         const title = d.data[labels];\n  //         const total = d.data[toolTipValues];\n  //         // let border = d.data[borderClass];\n  //         borderParent.attr(\"background-color\", d.data.color);\n  //         borderParent.style(\"width\", \"4px\");\n\n  //         d3InnerTooltip.select(\".d3-title\").text(d.data[labels]);\n  //         d3InnerTooltip.select(\".amount\").text(d.data[toolTipValues]);\n  //         tooltip.style(\"display\", \"flex\");\n  //         tooltip.style(\"opacity\", 1);\n  //       })\n  //       .on(\"mousemove\", function(d) {\n  //         tooltip\n  //           .style(\"top\", d3.event.clientY + 30 + \"px\")\n  //           .style(\"left\", d3.event.clientX - 25 + \"px\");\n  //       });\n\n  //     const outervis = d3\n  //       .select(this.chartContainer.nativeElement)\n  //       .on(\"mouseleave\", function() {\n  //         tooltip.style(\"opacity\", 0);\n  //       });\n  //   }\n  // }\n  return (\n    <div className=\"pie-chart svg-container\" ref={chartContainer}>\n      <div ref={chart}></div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}