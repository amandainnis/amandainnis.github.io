{"ast":null,"code":"var _jsxFileName = \"/Users/amandainnis/ReactProjects/board-app/src/components/insightAnalytics/InsightAnalyticsCard.js\";\nimport React from \"react\";\nimport * as Common from \"../reusable/common\";\n\nconst imgInsightAnalytics = require(\"../../assets/images/drilldown_client-thumb.png\");\n\nconst data = {\n  id: 1,\n  img: imgInsightAnalytics,\n  title: \"Insight Analytics\",\n  subtitle: \"A Client Data Dashboard\",\n  blurb: [\"Insight Analytics new containerized desktop application within the harbor framework.  It will provide analytical and reporting capabilities to Research Sales, Sales Traders and COO/Operations/Finance/Capital Markets personas.\", \"To showcase a user's client universe as relates to top buys / sells, client value, monthly CV totals with YOY comparison, CV by product, sector totals, percent change, sectors by client type. To focus or drilldown on these specific attributes--as well as readership, touchpoint and 13F dataâ€“as they relate to a client / ticker / sector \"],\n  bkgd: \"var(--analytics-bkgd)\"\n};\nconst backupPlan = [{\n  \"Rank A: Real-Time Performance\": {\n    \"Consumer Discretionary\": \"1.57%\",\n    \"Communication Services\": \"1.43%\",\n    Energy: \"1.31%\",\n    Materials: \"1.30%\",\n    Industrials: \"1.16%\",\n    \"Information Technology\": \"1.06%\",\n    Financials: \"0.77%\",\n    \"Real Estate\": \"0.22%\",\n    \"Health Care\": \"-0.33%\",\n    \"Consumer Staples\": \"-0.48%\",\n    Utilities: \"-0.88%\"\n  }\n}];\nconst sectorUrl = \"https://www.alphavantage.co/query?function=SECTOR&apikey=NKT90SOYWKFBP04F\"; // const backupPlan = [\n//   {\n//     \"Rank A: Real-Time Performance\": {\n//       \"Consumer Discretionary\": \"1.57%\",\n//       \"Consumer Staples\": \"-0.48%\",\n//       Energy: \"1.31%\",\n//       \"Materials\": \"1.30%\",\n//       \"Industrials\": \"1.16%\",\n//       \"Information Technology\": \"1.06%\",\n//       \"Financials\": \"0.77%\",\n//       \"Real Estate\": \"0.22%\",\n//       \"Communication Services\": \"1.43%\",\n//       \"Health Care\": \"-0.33%\",\n//       Utilities: \"-0.88%\"\n//     }\n//   }\n// ];\n\nclass InsightAnalyticsCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this._isMounted = false;\n    console.log(backupPlan[0][\"Rank A: Real-Time Performance\"][\"Consumer Discretionary\"]);\n    this.state = {\n      isLoading: false,\n      sectorData: null\n    };\n    this.resolveFetchedSectors = this.resolveFetchedSectors.bind(this); // this.sortStuff();  the sort algo\n  }\n\n  sortStuff() {\n    let myVal = Object.entries(backupPlan[0][\"Rank A: Real-Time Performance\"]).map(res => {\n      return res[1];\n    });\n    let yellow = Common.mergeSort(myVal);\n    console.log(yellow);\n  }\n\n  fetchSectors() {\n    return fetch(sectorUrl).then(res => {\n      if (!res.ok) {\n        // throw Error ('sadface');\n        return backupPlan[0];\n      }\n\n      return res;\n    }).then(res => res.json());\n  }\n\n  resolveFetchedSectors(_isMounted) {\n    this.setState({\n      isLoading: true\n    });\n    this.fetchSectors().then(res => {\n      if (loadingboll) {\n        if (res !== undefined && res[\"Rank A: Real-Time Performance\"] !== undefined) {\n          console.log(res);\n          this.setState({\n            isLoading: false,\n            sectorData: res[\"Rank A: Real-Time Performance\"]\n          });\n        } else {\n          this.setState({\n            isLoading: false,\n            sectorData: null\n          });\n        }\n      }\n    });\n  }\n\n  mapSectorBackgrounds(value) {\n    if (value === \"Communication Services\") {\n      return \"var(--comm-services)\";\n    } else if (value === \"Consumer Discretionary\") {\n      return \"var(--con-discretionary)\";\n    } else if (value === \"Consumer Staples\") {\n      return \"var(--con-staples)\";\n    } else if (value === \"Energy\") {\n      return \"var(--energy)\";\n    } else if (value === \"Financials\") {\n      return \"var(--financials)\";\n    } else if (value === \"Health Care\") {\n      return \"var(--healthcare)\";\n    } else if (value === \"Industrials\") {\n      return \"var(--industrials)\";\n    } else if (value === \"Information Technology\") {\n      return \"var(--info-tech)\";\n    } else if (value === \"Materials\") {\n      return \"var(--materials)\";\n    } else if (value === \"Real Estate\") {\n      return \"var(--real-estate)\";\n    } else if (value === \"Utilities\") {\n      return \"var(--utilities)\";\n    }\n  }\n\n  addWidth(res) {\n    let newObject = this.mapObject(res); // since it's already sorted, just use 0 as max\n\n    let max = newObject[0].val;\n    let finalObject = newObject.map(item => {\n      let width = Math.abs(Math.round(item.val / max * 1000) / 10);\n      let color = this.mapSectorBackgrounds(item.name);\n      return {\n        name: item.name,\n        val: item.val,\n        isNegative: item.isNegative,\n        width: width,\n        color: color\n      };\n    }); // console.log(finalObject);\n\n    return finalObject;\n  }\n\n  mapObject(res) {\n    let tempArr = [];\n    Object.entries(res).map((res, i) => {\n      let temp = res[1].replace(/\\%/, \"\");\n      temp = parseFloat(temp);\n      let isNegative = temp < 0 ? true : false;\n      tempArr.push({\n        name: res[0],\n        val: temp,\n        isNegative: isNegative\n      });\n    });\n    return tempArr;\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    this.resolveFetchedSectors(); // const newObject = this.mapObject(this.state.sectorData);\n\n    console.log(this.state.sectorData[\"Rank A: Real-Time Performance\"]);\n  }\n\n  render() {\n    // const myObject = Object.entries(\n    //   backupPlan[\"Rank A: Real-Time Performance\"]\n    // );\n    // console.log(Object.entries(backupPlan[0][\"Rank A: Real-Time Performance\"]));\n    const myObject = backupPlan[0][\"Rank A: Real-Time Performance\"][0];\n    return React.createElement(\"article\", {\n      className: \"portfolio-card\",\n      style: {\n        backgroundColor: data.bkgd\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"text-section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, data.title), React.createElement(\"h4\", {\n      className: \"subtitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, data.subtitle)));\n  }\n\n}\n\nexport default InsightAnalyticsCard;","map":{"version":3,"sources":["/Users/amandainnis/ReactProjects/board-app/src/components/insightAnalytics/InsightAnalyticsCard.js"],"names":["React","Common","imgInsightAnalytics","require","data","id","img","title","subtitle","blurb","bkgd","backupPlan","Energy","Materials","Industrials","Financials","Utilities","sectorUrl","InsightAnalyticsCard","Component","constructor","props","_isMounted","console","log","state","isLoading","sectorData","resolveFetchedSectors","bind","sortStuff","myVal","Object","entries","map","res","yellow","mergeSort","fetchSectors","fetch","then","ok","json","setState","loadingboll","undefined","mapSectorBackgrounds","value","addWidth","newObject","mapObject","max","val","finalObject","item","width","Math","abs","round","color","name","isNegative","tempArr","i","temp","replace","parseFloat","push","componentDidMount","render","myObject","backgroundColor"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport * as Common from \"../reusable/common\";\nconst imgInsightAnalytics = require(\"../../assets/images/drilldown_client-thumb.png\");\nconst data = {\n  id: 1,\n  img: imgInsightAnalytics,\n  title: \"Insight Analytics\",\n  subtitle: \"A Client Data Dashboard\",\n  blurb: [\n    \"Insight Analytics new containerized desktop application within the harbor framework.  It will provide analytical and reporting capabilities to Research Sales, Sales Traders and COO/Operations/Finance/Capital Markets personas.\",\n    \"To showcase a user's client universe as relates to top buys / sells, client value, monthly CV totals with YOY comparison, CV by product, sector totals, percent change, sectors by client type. To focus or drilldown on these specific attributes--as well as readership, touchpoint and 13F dataâ€“as they relate to a client / ticker / sector \"\n  ],\n  bkgd: \"var(--analytics-bkgd)\"\n};\nconst backupPlan = [\n  {\n    \"Rank A: Real-Time Performance\": {\n      \"Consumer Discretionary\": \"1.57%\",\n      \"Communication Services\": \"1.43%\",\n      Energy: \"1.31%\",\n      Materials: \"1.30%\",\n      Industrials: \"1.16%\",\n      \"Information Technology\": \"1.06%\",\n      Financials: \"0.77%\",\n      \"Real Estate\": \"0.22%\",\n      \"Health Care\": \"-0.33%\",\n      \"Consumer Staples\": \"-0.48%\",\n      Utilities: \"-0.88%\"\n    }\n  }\n];\n\nconst sectorUrl =\n  \"https://www.alphavantage.co/query?function=SECTOR&apikey=NKT90SOYWKFBP04F\";\n// const backupPlan = [\n//   {\n//     \"Rank A: Real-Time Performance\": {\n//       \"Consumer Discretionary\": \"1.57%\",\n//       \"Consumer Staples\": \"-0.48%\",\n\n//       Energy: \"1.31%\",\n//       \"Materials\": \"1.30%\",\n//       \"Industrials\": \"1.16%\",\n//       \"Information Technology\": \"1.06%\",\n//       \"Financials\": \"0.77%\",\n//       \"Real Estate\": \"0.22%\",\n//       \"Communication Services\": \"1.43%\",\n//       \"Health Care\": \"-0.33%\",\n\n//       Utilities: \"-0.88%\"\n//     }\n//   }\n// ];\nclass InsightAnalyticsCard extends React.Component {\n  _isMounted = false;\n  constructor(props) {\n    super(props);\n    console.log(\n      backupPlan[0][\"Rank A: Real-Time Performance\"][\"Consumer Discretionary\"]\n    );\n    this.state = {\n      isLoading: false,\n      sectorData: null\n    };\n    this.resolveFetchedSectors = this.resolveFetchedSectors.bind(this);\n    // this.sortStuff();  the sort algo\n  }\n  sortStuff() {\n    let myVal = Object.entries(\n      backupPlan[0][\"Rank A: Real-Time Performance\"]\n    ).map(res => {\n      return res[1];\n    });\n    let yellow = Common.mergeSort(myVal);\n    console.log(yellow);\n  }\n  fetchSectors() {\n    return fetch(sectorUrl)\n      .then(res => {\n        if (!res.ok) {\n          // throw Error ('sadface');\n          return backupPlan[0];\n        }\n        return res;\n      })\n      .then(res => res.json());\n  }\n  resolveFetchedSectors(_isMounted) {\n    this.setState({\n      isLoading: true\n    });\n    this.fetchSectors().then(res => {\n      if (loadingboll) {\n        if (\n          res !== undefined &&\n          res[\"Rank A: Real-Time Performance\"] !== undefined\n        ) {\n          console.log(res);\n          this.setState({\n            isLoading: false,\n            sectorData: res[\"Rank A: Real-Time Performance\"]\n          });\n        } else {\n          this.setState({\n            isLoading: false,\n            sectorData: null\n          });\n        }\n      }\n    });\n  }\n\n  mapSectorBackgrounds(value) {\n    if (value === \"Communication Services\") {\n      return \"var(--comm-services)\";\n    } else if (value === \"Consumer Discretionary\") {\n      return \"var(--con-discretionary)\";\n    } else if (value === \"Consumer Staples\") {\n      return \"var(--con-staples)\";\n    } else if (value === \"Energy\") {\n      return \"var(--energy)\";\n    } else if (value === \"Financials\") {\n      return \"var(--financials)\";\n    } else if (value === \"Health Care\") {\n      return \"var(--healthcare)\";\n    } else if (value === \"Industrials\") {\n      return \"var(--industrials)\";\n    } else if (value === \"Information Technology\") {\n      return \"var(--info-tech)\";\n    } else if (value === \"Materials\") {\n      return \"var(--materials)\";\n    } else if (value === \"Real Estate\") {\n      return \"var(--real-estate)\";\n    } else if (value === \"Utilities\") {\n      return \"var(--utilities)\";\n    }\n  }\n\n  addWidth(res) {\n    let newObject = this.mapObject(res);\n    // since it's already sorted, just use 0 as max\n    let max = newObject[0].val;\n    let finalObject = newObject.map(item => {\n      let width = Math.abs(Math.round((item.val / max) * 1000) / 10);\n      let color = this.mapSectorBackgrounds(item.name);\n      return {\n        name: item.name,\n        val: item.val,\n        isNegative: item.isNegative,\n        width: width,\n        color: color\n      };\n    });\n    // console.log(finalObject);\n    return finalObject;\n  }\n  mapObject(res) {\n    let tempArr = [];\n    Object.entries(res).map((res, i) => {\n      let temp = res[1].replace(/\\%/, \"\");\n      temp = parseFloat(temp);\n      let isNegative = temp < 0 ? true : false;\n      tempArr.push({\n        name: res[0],\n        val: temp,\n        isNegative: isNegative\n      });\n    });\n    return tempArr;\n  }\n  componentDidMount() {\n    this._isMounted = true;\n    this.resolveFetchedSectors();\n    // const newObject = this.mapObject(this.state.sectorData);\n    console.log(this.state.sectorData[\"Rank A: Real-Time Performance\"]);\n  }\n  render() {\n    // const myObject = Object.entries(\n    //   backupPlan[\"Rank A: Real-Time Performance\"]\n    // );\n    // console.log(Object.entries(backupPlan[0][\"Rank A: Real-Time Performance\"]));\n    const myObject = backupPlan[0][\"Rank A: Real-Time Performance\"][0];\n\n    return (\n      <article\n        className=\"portfolio-card\"\n        style={{ backgroundColor: data.bkgd }}\n      >\n        <div className=\"text-section\">\n          <h1 className=\"title\">{data.title}</h1>\n          <h4 className=\"subtitle\">{data.subtitle}</h4>\n        </div>\n        {/* <div className=\"flex-row\">\n          <div className=\"bar-graph-wrapper\">\n            <div className=\"bar-graph\">\n           \n              {newObject.map((res, i) => {\n                if (res.val >= 0) {\n                  return (\n                    <div\n                      key={i}\n                      className=\"flex-row-center narrow-row-height panel-row\"\n                    >\n                      <div className=\"colA\"></div>\n                      <div className=\"colB\">\n                        <div\n                          className=\"proportion-bar d-flex relative\"\n                          style={{\n                            width: res.width + \"%\",\n                            backgroundColor: res.color\n                          }}\n                        ></div>\n                        <div className=\"percent-class right-absolute\">\n                          {res.val}%\n                        </div>\n                        <div className=\"flex1\"></div>\n                      </div>\n                    </div>\n                  );\n                } else {\n                  return (\n                    <div\n                      key={i}\n                      className=\"flex-row-center narrow-row-height panel-row\"\n                    >\n                      <div className=\"colA\">\n                        <div\n                          className=\"proportion-bar d-flex relative\"\n                          style={{\n                            width: res.width + \"%\",\n                            backgroundColor: res.color\n                          }}\n                        ></div>\n                        <div className=\"percent-class left-absolute\">\n                          {res.val}%\n                        </div>\n                        <div className=\"flex1\"></div>\n                      </div>\n                      <div className=\"colB\"></div>\n                    </div>\n                  );\n                }\n              })}\n            </div>\n          </div>\n\n          <div className=\"legend\">\n            {newObject.map((res, i) => {\n              return (\n                <div\n                  key={`legend-${i}`}\n                  className=\"flex-row-center narrow-row-height\"\n                >\n                  <div\n                    className=\"square\"\n                    style={{\n                      backgroundColor: res.color\n                    }}\n                  ></div>\n                  <div className=\"title cursor-pointer\">{res.name}</div>\n                </div>\n              );\n            })}\n          </div>\n        </div> */}\n      </article>\n    );\n  }\n}\n\nexport default InsightAnalyticsCard;\n"]},"metadata":{},"sourceType":"module"}