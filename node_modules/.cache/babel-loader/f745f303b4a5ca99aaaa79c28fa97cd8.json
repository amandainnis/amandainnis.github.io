{"ast":null,"code":"import _defineProperty from \"/Users/amandainnis/ReactProjects/portfolio/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/amandainnis/ReactProjects/portfolio/src/components/learning/ToDoCard.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport todoData from \"../../data/todoData\";\nimport TodoItem from \"./todoItem\";\n/**\n * Let's make it so our checkbox can actually mark our todo as complete or incomplete!\n * This challenge is a little more involved than some of the past ones. Check the comments\n * in the code for some help on accomplishing this one\n *\n * Challenge:\n * 1. Create an event handler in the App component for when the checkbox is clicked (which is an `onChange` event)\n *    a. This method will be the trickest part. Check the comments in the stubbed-out method below for some pseudocode to help guide you through this part\n * 2. Pass the method down to the TodoItem component\n * 3. In the TodoItem component, make it so when the `onChange` event happens, it calls the `handleChange` method and passes the id of the todo into the function\n */\n\nclass ToDoCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: todoData\n    };\n    this.handleChange = this.handleChange.bind(this);\n  } //   tryToMungeReference(obj) {\n  //     return (obj = { bar: 2 }); // won't change caller's object\n  //   }\n\n\n  handleChange(id) {\n    // var foo = { bar: 1 };\n    // let cat = this.tryToMungeReference(foo);\n    // console.log(\"cat\", cat);\n    // console.log(\"foo\", foo);\n    // let dog = cat;\n    // dog.bar = 3;\n    // console.log(\"cat\", cat);\n    // console.log(\"dog\", dog);\n    this.setState(prevState => {\n      let myNewItems = prevState.todos.map(val => {\n        if (val.id === id) {\n          console.log(\"before val\", val);\n\n          let imNotAlteringState = _objectSpread({}, val);\n\n          imNotAlteringState.completed = !imNotAlteringState.completed;\n          console.log(\"after imNotAlteringState val\", imNotAlteringState);\n          return imNotAlteringState;\n        }\n\n        console.log(val); // this returns all the other vals\n\n        return val;\n      }); // this is just typical of the set state function\n\n      return {\n        todos: myNewItems\n      };\n    }); // Update state so that the item with the given id flips `completed` from false to true (or vise versa)\n    // Remember not to modify prevState directly, but instead to return a new version of state with the change you want included in that update. (Think how you might use the `.map` method to do this)\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, this.state.todos.map((item, i) => {\n      return React.createElement(TodoItem, {\n        key: i,\n        id: item.id,\n        attributes: item,\n        handleChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      });\n    }));\n  }\n\n}\n\nexport default ToDoCard;","map":{"version":3,"sources":["/Users/amandainnis/ReactProjects/portfolio/src/components/learning/ToDoCard.js"],"names":["React","todoData","TodoItem","ToDoCard","Component","constructor","props","state","todos","handleChange","bind","id","setState","prevState","myNewItems","map","val","console","log","imNotAlteringState","completed","render","item","i"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA;;;;;;;;;;;;AAWA,MAAMC,QAAN,SAAuBH,KAAK,CAACI,SAA7B,CAAuC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAEP;AADI,KAAb;AAGA,SAAKQ,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACD,GAPoC,CAQrC;AACA;AACA;;;AACAD,EAAAA,YAAY,CAACE,EAAD,EAAK;AACf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAKC,QAAL,CAAcC,SAAS,IAAI;AACzB,UAAIC,UAAU,GAAGD,SAAS,CAACL,KAAV,CAAgBO,GAAhB,CAAoBC,GAAG,IAAI;AAC1C,YAAIA,GAAG,CAACL,EAAJ,KAAWA,EAAf,EAAmB;AACjBM,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,GAA1B;;AACA,cAAIG,kBAAkB,qBAAQH,GAAR,CAAtB;;AACAG,UAAAA,kBAAkB,CAACC,SAAnB,GAA+B,CAACD,kBAAkB,CAACC,SAAnD;AACAH,UAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CC,kBAA5C;AACA,iBAAOA,kBAAP;AACD;;AACDF,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EAR0C,CAS1C;;AACA,eAAOA,GAAP;AACD,OAXgB,CAAjB,CADyB,CAazB;;AACA,aAAO;AAAER,QAAAA,KAAK,EAAEM;AAAT,OAAP;AACD,KAfD,EAVe,CA0Bf;AACA;AACD;;AACDO,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKd,KAAL,CAAWC,KAAX,CAAiBO,GAAjB,CAAqB,CAACO,IAAD,EAAOC,CAAP,KAAa;AACjC,aACE,oBAAC,QAAD;AACE,QAAA,GAAG,EAAEA,CADP;AAEE,QAAA,EAAE,EAAED,IAAI,CAACX,EAFX;AAGE,QAAA,UAAU,EAAEW,IAHd;AAIE,QAAA,YAAY,EAAE,KAAKb,YAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAQD,KATA,CADH,CADF;AAcD;;AAvDoC;;AAyDvC,eAAeN,QAAf","sourcesContent":["import React from \"react\";\nimport todoData from \"../../data/todoData\";\nimport TodoItem from \"./todoItem\";\n/**\n * Let's make it so our checkbox can actually mark our todo as complete or incomplete!\n * This challenge is a little more involved than some of the past ones. Check the comments\n * in the code for some help on accomplishing this one\n *\n * Challenge:\n * 1. Create an event handler in the App component for when the checkbox is clicked (which is an `onChange` event)\n *    a. This method will be the trickest part. Check the comments in the stubbed-out method below for some pseudocode to help guide you through this part\n * 2. Pass the method down to the TodoItem component\n * 3. In the TodoItem component, make it so when the `onChange` event happens, it calls the `handleChange` method and passes the id of the todo into the function\n */\nclass ToDoCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: todoData\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  //   tryToMungeReference(obj) {\n  //     return (obj = { bar: 2 }); // won't change caller's object\n  //   }\n  handleChange(id) {\n    // var foo = { bar: 1 };\n\n    // let cat = this.tryToMungeReference(foo);\n    // console.log(\"cat\", cat);\n    // console.log(\"foo\", foo);\n    // let dog = cat;\n    // dog.bar = 3;\n    // console.log(\"cat\", cat);\n    // console.log(\"dog\", dog);\n    this.setState(prevState => {\n      let myNewItems = prevState.todos.map(val => {\n        if (val.id === id) {\n          console.log(\"before val\", val);\n          let imNotAlteringState = { ...val };\n          imNotAlteringState.completed = !imNotAlteringState.completed;\n          console.log(\"after imNotAlteringState val\", imNotAlteringState);\n          return imNotAlteringState;\n        }\n        console.log(val);\n        // this returns all the other vals\n        return val;\n      });\n      // this is just typical of the set state function\n      return { todos: myNewItems };\n    });\n    // Update state so that the item with the given id flips `completed` from false to true (or vise versa)\n    // Remember not to modify prevState directly, but instead to return a new version of state with the change you want included in that update. (Think how you might use the `.map` method to do this)\n  }\n  render() {\n    return (\n      <div>\n        {this.state.todos.map((item, i) => {\n          return (\n            <TodoItem\n              key={i}\n              id={item.id}\n              attributes={item}\n              handleChange={this.handleChange}\n            ></TodoItem>\n          );\n        })}\n      </div>\n    );\n  }\n}\nexport default ToDoCard;\n"]},"metadata":{},"sourceType":"module"}