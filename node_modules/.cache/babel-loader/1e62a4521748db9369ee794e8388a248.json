{"ast":null,"code":"import React, { useState, useRef } from \"react\";\nimport * as priceJson from \"../data/priceData.json\";\nimport * as indexJson from \"../data/spyData.json\";\nimport * as moment from \"../../node_modules/moment/moment\";\nconst prePieData = [{\n  label: \"Seltzer\",\n  value: 5,\n  tooltipValue: \"Seltzer is great\",\n  color: \"pink\"\n}, {\n  label: \"Seltzer\",\n  value: 5,\n  tooltipValue: \"Seltzer is great\",\n  color: \"teal\"\n}, {\n  label: \"Grapefruit Juice\",\n  value: 2,\n  tooltipValue: \"Grapefruit Juice is healthy\",\n  color: \"yellow\"\n}, {\n  label: \"Pellegrino\",\n  value: 9,\n  tooltipValue: \"Pellegrino is best\",\n  color: \"tan\"\n}, {\n  label: \"Pellegrino\",\n  value: 9,\n  tooltipValue: \"Pellegrino is best\",\n  color: \"navy\"\n}];\n\nfunction sortArray(data, key) {\n  let newArr = data.sort((a, b) => {\n    if (a[key] < b[key]) {\n      return 1;\n    } else if (a[key] > b[key]) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return newArr;\n}\n\nexport function createPieData() {\n  return sortArray(prePieData, \"value\");\n}\n\nfunction sortACData(obj) {\n  // console.log(priceJson[\"Time Series (5min)\"]);\n  const entriesArr = Object.entries(obj).sort((a, b) => {\n    return moment(a[0]).unix() - moment(b[0]).unix();\n  });\n  return entriesArr;\n}\n\nfunction formatPriceData() {\n  let jsonPrice = sortACData(priceJson[\"Time Series (5min)\"]);\n  let jsonIndex = sortACData(indexJson[\"Time Series (5min)\"]);\n  let tempArr = [];\n\n  for (let i = 0; i < jsonPrice.length; i++) {\n    let niceDate = moment(jsonPrice[i][0]).format(\"DD MMM YYYY\");\n    let niceDateAbbrev = moment(jsonPrice[i][0]).format(\"DD MMM\");\n    let niceTime = moment(jsonPrice[i][0]).format(\"h:mm A\");\n    let price = Math.round(jsonPrice[i][1][\"4. close\"] * 100) / 100;\n    let benchmark = Math.round(jsonIndex[i][1][\"4. close\"] * 100) / 100;\n    let index = i; // this makes it jumpy\n    // let index = moment(jsonPrice[i][0]).unix();\n    // moment(d).format(\"DD MMM\");\n\n    tempArr.push({\n      fullDate: jsonPrice[i][0],\n      niceDate: niceDate,\n      niceDateAbbrev: niceDateAbbrev,\n      niceTime: niceTime,\n      price: price,\n      benchmark: benchmark,\n      index: index\n    });\n  }\n\n  return tempArr;\n}\n\nlet startVals;\n\nfunction formatAlphaCaptureData() {\n  let jsonPrice = sortACData(priceJson[\"Time Series (5min)\"]);\n  let jsonIndex = sortACData(indexJson[\"Time Series (5min)\"]);\n  let tempArr = [];\n  let tempStartVals = [];\n\n  for (let i = 0; i < jsonPrice.length; i++) {\n    let niceDate = moment(jsonPrice[i][0]).format(\"DD MMM YYYY\");\n    let niceDateAbbrev = moment(jsonPrice[i][0]).format(\"DD MMM\");\n    let niceTime = moment(jsonPrice[i][0]).format(\"h:mm A\");\n    let price = Math.round(jsonPrice[i][1][\"4. close\"] * 100) / 100;\n    let benchmark = Math.round(jsonIndex[i][1][\"4. close\"] * 100) / 100;\n    let index = i; // this makes it jumpy\n    // let index = moment(jsonPrice[i][0]).unix();\n    // moment(d).format(\"DD MMM\");\n\n    if (i === 0) {\n      tempStartVals.push({\n        price: price,\n        benchmark: benchmark\n      });\n    }\n\n    tempArr.push({\n      fullDate: jsonPrice[i][0],\n      niceDate: niceDate,\n      niceDateAbbrev: niceDateAbbrev,\n      niceTime: niceTime,\n      price: price,\n      benchmark: benchmark,\n      index: index\n    });\n  }\n\n  startVals = tempStartVals;\n  console.log(startVals);\n  return tempArr;\n}\n\nexport const alphaCaptureChartData = formatAlphaCaptureData();\nexport const priceData = formatPriceData();","map":{"version":3,"sources":["/Users/amandainnis/ReactProjects/react-site/portfolio/src/data/DataHandler.js"],"names":["React","useState","useRef","priceJson","indexJson","moment","prePieData","label","value","tooltipValue","color","sortArray","data","key","newArr","sort","a","b","createPieData","sortACData","obj","entriesArr","Object","entries","unix","formatPriceData","jsonPrice","jsonIndex","tempArr","i","length","niceDate","format","niceDateAbbrev","niceTime","price","Math","round","benchmark","index","push","fullDate","startVals","formatAlphaCaptureData","tempStartVals","console","log","alphaCaptureChartData","priceData"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,OAAO,KAAKC,SAAZ,MAA2B,wBAA3B;AACA,OAAO,KAAKC,SAAZ,MAA2B,sBAA3B;AACA,OAAO,KAAKC,MAAZ,MAAwB,kCAAxB;AAEA,MAAMC,UAAU,GAAG,CACjB;AACEC,EAAAA,KAAK,EAAE,SADT;AAEEC,EAAAA,KAAK,EAAE,CAFT;AAGEC,EAAAA,YAAY,EAAE,kBAHhB;AAIEC,EAAAA,KAAK,EAAE;AAJT,CADiB,EAOjB;AACEH,EAAAA,KAAK,EAAE,SADT;AAEEC,EAAAA,KAAK,EAAE,CAFT;AAGEC,EAAAA,YAAY,EAAE,kBAHhB;AAIEC,EAAAA,KAAK,EAAE;AAJT,CAPiB,EAajB;AACEH,EAAAA,KAAK,EAAE,kBADT;AAEEC,EAAAA,KAAK,EAAE,CAFT;AAGEC,EAAAA,YAAY,EAAE,6BAHhB;AAIEC,EAAAA,KAAK,EAAE;AAJT,CAbiB,EAmBjB;AACEH,EAAAA,KAAK,EAAE,YADT;AAEEC,EAAAA,KAAK,EAAE,CAFT;AAGEC,EAAAA,YAAY,EAAE,oBAHhB;AAIEC,EAAAA,KAAK,EAAE;AAJT,CAnBiB,EAyBjB;AACEH,EAAAA,KAAK,EAAE,YADT;AAEEC,EAAAA,KAAK,EAAE,CAFT;AAGEC,EAAAA,YAAY,EAAE,oBAHhB;AAIEC,EAAAA,KAAK,EAAE;AAJT,CAzBiB,CAAnB;;AAgCA,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,GAAzB,EAA8B;AAC5B,MAAIC,MAAM,GAAGF,IAAI,CAACG,IAAL,CAAU,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC/B,QAAID,CAAC,CAACH,GAAD,CAAD,GAASI,CAAC,CAACJ,GAAD,CAAd,EAAqB;AACnB,aAAO,CAAP;AACD,KAFD,MAEO,IAAIG,CAAC,CAACH,GAAD,CAAD,GAASI,CAAC,CAACJ,GAAD,CAAd,EAAqB;AAC1B,aAAO,CAAC,CAAR;AACD,KAFM,MAEA;AACL,aAAO,CAAP;AACD;AACF,GARY,CAAb;AASA,SAAOC,MAAP;AACD;;AACD,OAAO,SAASI,aAAT,GAAyB;AAC9B,SAAOP,SAAS,CAACL,UAAD,EAAa,OAAb,CAAhB;AACD;;AACD,SAASa,UAAT,CAAoBC,GAApB,EAAyB;AACvB;AACA,QAAMC,UAAU,GAAGC,MAAM,CAACC,OAAP,CAAeH,GAAf,EAAoBL,IAApB,CAAyB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACpD,WAAOZ,MAAM,CAACW,CAAC,CAAC,CAAD,CAAF,CAAN,CAAaQ,IAAb,KAAsBnB,MAAM,CAACY,CAAC,CAAC,CAAD,CAAF,CAAN,CAAaO,IAAb,EAA7B;AACD,GAFkB,CAAnB;AAGA,SAAOH,UAAP;AACD;;AACD,SAASI,eAAT,GAA2B;AACzB,MAAIC,SAAS,GAAGP,UAAU,CAAChB,SAAS,CAAC,oBAAD,CAAV,CAA1B;AACA,MAAIwB,SAAS,GAAGR,UAAU,CAACf,SAAS,CAAC,oBAAD,CAAV,CAA1B;AACA,MAAIwB,OAAO,GAAG,EAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,SAAS,CAACI,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,QAAIE,QAAQ,GAAG1B,MAAM,CAACqB,SAAS,CAACG,CAAD,CAAT,CAAa,CAAb,CAAD,CAAN,CAAwBG,MAAxB,CAA+B,aAA/B,CAAf;AACA,QAAIC,cAAc,GAAG5B,MAAM,CAACqB,SAAS,CAACG,CAAD,CAAT,CAAa,CAAb,CAAD,CAAN,CAAwBG,MAAxB,CAA+B,QAA/B,CAArB;AAEA,QAAIE,QAAQ,GAAG7B,MAAM,CAACqB,SAAS,CAACG,CAAD,CAAT,CAAa,CAAb,CAAD,CAAN,CAAwBG,MAAxB,CAA+B,QAA/B,CAAf;AACA,QAAIG,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWX,SAAS,CAACG,CAAD,CAAT,CAAa,CAAb,EAAgB,UAAhB,IAA8B,GAAzC,IAAgD,GAA5D;AACA,QAAIS,SAAS,GAAGF,IAAI,CAACC,KAAL,CAAWV,SAAS,CAACE,CAAD,CAAT,CAAa,CAAb,EAAgB,UAAhB,IAA8B,GAAzC,IAAgD,GAAhE;AACA,QAAIU,KAAK,GAAGV,CAAZ,CAPyC,CASzC;AACA;AAEA;;AAEAD,IAAAA,OAAO,CAACY,IAAR,CAAa;AACXC,MAAAA,QAAQ,EAAEf,SAAS,CAACG,CAAD,CAAT,CAAa,CAAb,CADC;AAEXE,MAAAA,QAAQ,EAAEA,QAFC;AAGXE,MAAAA,cAAc,EAAEA,cAHL;AAIXC,MAAAA,QAAQ,EAAEA,QAJC;AAKXC,MAAAA,KAAK,EAAEA,KALI;AAMXG,MAAAA,SAAS,EAAEA,SANA;AAOXC,MAAAA,KAAK,EAAEA;AAPI,KAAb;AASD;;AAED,SAAOX,OAAP;AACD;;AAED,IAAIc,SAAJ;;AACA,SAASC,sBAAT,GAAkC;AAChC,MAAIjB,SAAS,GAAGP,UAAU,CAAChB,SAAS,CAAC,oBAAD,CAAV,CAA1B;AACA,MAAIwB,SAAS,GAAGR,UAAU,CAACf,SAAS,CAAC,oBAAD,CAAV,CAA1B;AACA,MAAIwB,OAAO,GAAG,EAAd;AACA,MAAIgB,aAAa,GAAG,EAApB;;AACA,OAAK,IAAIf,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,SAAS,CAACI,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,QAAIE,QAAQ,GAAG1B,MAAM,CAACqB,SAAS,CAACG,CAAD,CAAT,CAAa,CAAb,CAAD,CAAN,CAAwBG,MAAxB,CAA+B,aAA/B,CAAf;AACA,QAAIC,cAAc,GAAG5B,MAAM,CAACqB,SAAS,CAACG,CAAD,CAAT,CAAa,CAAb,CAAD,CAAN,CAAwBG,MAAxB,CAA+B,QAA/B,CAArB;AAEA,QAAIE,QAAQ,GAAG7B,MAAM,CAACqB,SAAS,CAACG,CAAD,CAAT,CAAa,CAAb,CAAD,CAAN,CAAwBG,MAAxB,CAA+B,QAA/B,CAAf;AACA,QAAIG,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWX,SAAS,CAACG,CAAD,CAAT,CAAa,CAAb,EAAgB,UAAhB,IAA8B,GAAzC,IAAgD,GAA5D;AACA,QAAIS,SAAS,GAAGF,IAAI,CAACC,KAAL,CAAWV,SAAS,CAACE,CAAD,CAAT,CAAa,CAAb,EAAgB,UAAhB,IAA8B,GAAzC,IAAgD,GAAhE;AACA,QAAIU,KAAK,GAAGV,CAAZ,CAPyC,CASzC;AACA;AAEA;;AACA,QAAIA,CAAC,KAAK,CAAV,EAAa;AACXe,MAAAA,aAAa,CAACJ,IAAd,CAAmB;AACjBL,QAAAA,KAAK,EAAEA,KADU;AAEjBG,QAAAA,SAAS,EAAEA;AAFM,OAAnB;AAID;;AACDV,IAAAA,OAAO,CAACY,IAAR,CAAa;AACXC,MAAAA,QAAQ,EAAEf,SAAS,CAACG,CAAD,CAAT,CAAa,CAAb,CADC;AAEXE,MAAAA,QAAQ,EAAEA,QAFC;AAGXE,MAAAA,cAAc,EAAEA,cAHL;AAIXC,MAAAA,QAAQ,EAAEA,QAJC;AAKXC,MAAAA,KAAK,EAAEA,KALI;AAMXG,MAAAA,SAAS,EAAEA,SANA;AAOXC,MAAAA,KAAK,EAAEA;AAPI,KAAb;AASD;;AACDG,EAAAA,SAAS,GAAGE,aAAZ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAZ;AACA,SAAOd,OAAP;AACD;;AAED,OAAO,MAAMmB,qBAAqB,GAAGJ,sBAAsB,EAApD;AAEP,OAAO,MAAMK,SAAS,GAAGvB,eAAe,EAAjC","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport * as priceJson from \"../data/priceData.json\";\nimport * as indexJson from \"../data/spyData.json\";\nimport * as moment from \"../../node_modules/moment/moment\";\n\nconst prePieData = [\n  {\n    label: \"Seltzer\",\n    value: 5,\n    tooltipValue: \"Seltzer is great\",\n    color: \"pink\"\n  },\n  {\n    label: \"Seltzer\",\n    value: 5,\n    tooltipValue: \"Seltzer is great\",\n    color: \"teal\"\n  },\n  {\n    label: \"Grapefruit Juice\",\n    value: 2,\n    tooltipValue: \"Grapefruit Juice is healthy\",\n    color: \"yellow\"\n  },\n  {\n    label: \"Pellegrino\",\n    value: 9,\n    tooltipValue: \"Pellegrino is best\",\n    color: \"tan\"\n  },\n  {\n    label: \"Pellegrino\",\n    value: 9,\n    tooltipValue: \"Pellegrino is best\",\n    color: \"navy\"\n  }\n];\nfunction sortArray(data, key) {\n  let newArr = data.sort((a, b) => {\n    if (a[key] < b[key]) {\n      return 1;\n    } else if (a[key] > b[key]) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return newArr;\n}\nexport function createPieData() {\n  return sortArray(prePieData, \"value\");\n}\nfunction sortACData(obj) {\n  // console.log(priceJson[\"Time Series (5min)\"]);\n  const entriesArr = Object.entries(obj).sort((a, b) => {\n    return moment(a[0]).unix() - moment(b[0]).unix();\n  });\n  return entriesArr;\n}\nfunction formatPriceData() {\n  let jsonPrice = sortACData(priceJson[\"Time Series (5min)\"]);\n  let jsonIndex = sortACData(indexJson[\"Time Series (5min)\"]);\n  let tempArr = [];\n  for (let i = 0; i < jsonPrice.length; i++) {\n    let niceDate = moment(jsonPrice[i][0]).format(\"DD MMM YYYY\");\n    let niceDateAbbrev = moment(jsonPrice[i][0]).format(\"DD MMM\");\n\n    let niceTime = moment(jsonPrice[i][0]).format(\"h:mm A\");\n    let price = Math.round(jsonPrice[i][1][\"4. close\"] * 100) / 100;\n    let benchmark = Math.round(jsonIndex[i][1][\"4. close\"] * 100) / 100;\n    let index = i;\n\n    // this makes it jumpy\n    // let index = moment(jsonPrice[i][0]).unix();\n\n    // moment(d).format(\"DD MMM\");\n\n    tempArr.push({\n      fullDate: jsonPrice[i][0],\n      niceDate: niceDate,\n      niceDateAbbrev: niceDateAbbrev,\n      niceTime: niceTime,\n      price: price,\n      benchmark: benchmark,\n      index: index\n    });\n  }\n\n  return tempArr;\n}\n\nlet startVals;\nfunction formatAlphaCaptureData() {\n  let jsonPrice = sortACData(priceJson[\"Time Series (5min)\"]);\n  let jsonIndex = sortACData(indexJson[\"Time Series (5min)\"]);\n  let tempArr = [];\n  let tempStartVals = [];\n  for (let i = 0; i < jsonPrice.length; i++) {\n    let niceDate = moment(jsonPrice[i][0]).format(\"DD MMM YYYY\");\n    let niceDateAbbrev = moment(jsonPrice[i][0]).format(\"DD MMM\");\n\n    let niceTime = moment(jsonPrice[i][0]).format(\"h:mm A\");\n    let price = Math.round(jsonPrice[i][1][\"4. close\"] * 100) / 100;\n    let benchmark = Math.round(jsonIndex[i][1][\"4. close\"] * 100) / 100;\n    let index = i;\n\n    // this makes it jumpy\n    // let index = moment(jsonPrice[i][0]).unix();\n\n    // moment(d).format(\"DD MMM\");\n    if (i === 0) {\n      tempStartVals.push({\n        price: price,\n        benchmark: benchmark\n      });\n    }\n    tempArr.push({\n      fullDate: jsonPrice[i][0],\n      niceDate: niceDate,\n      niceDateAbbrev: niceDateAbbrev,\n      niceTime: niceTime,\n      price: price,\n      benchmark: benchmark,\n      index: index\n    });\n  }\n  startVals = tempStartVals;\n  console.log(startVals);\n  return tempArr;\n}\n\nexport const alphaCaptureChartData = formatAlphaCaptureData();\n\nexport const priceData = formatPriceData();\n"]},"metadata":{},"sourceType":"module"}