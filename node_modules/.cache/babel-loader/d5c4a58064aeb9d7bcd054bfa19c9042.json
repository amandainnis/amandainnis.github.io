{"ast":null,"code":"import*as priceJson from\"../data/priceData.json\";import*as indexJson from\"../data/spyData.json\";import*as moment from\"../../node_modules/moment/moment\";var prePieData=[{label:\"Seltzer\",value:5,tooltipValue:\"Seltzer is great\",color:\"pink\"},{label:\"Seltzer\",value:5,tooltipValue:\"Seltzer is great\",color:\"teal\"},{label:\"Grapefruit Juice\",value:2,tooltipValue:\"Grapefruit Juice is healthy\",color:\"yellow\"},{label:\"Pellegrino\",value:9,tooltipValue:\"Pellegrino is best\",color:\"tan\"},{label:\"Pellegrino\",value:9,tooltipValue:\"Pellegrino is best\",color:\"navy\"}];function sortArray(data,key){var newArr=data.sort(function(a,b){if(a[key]<b[key]){return 1;}else if(a[key]>b[key]){return-1;}else{return 0;}});return newArr;}export function createPieData(){return sortArray(prePieData,\"value\");}function sortACData(obj){// console.log(priceJson[\"Time Series (5min)\"]);\nvar entriesArr=Object.entries(obj).sort(function(a,b){return moment(a[0]).unix()-moment(b[0]).unix();});return entriesArr;}function formatPriceData(){var jsonPrice=sortACData(priceJson[\"Time Series (5min)\"]);var jsonIndex=sortACData(indexJson[\"Time Series (5min)\"]);var tempArr=[];for(var i=0;i<jsonPrice.length;i++){var niceDate=moment(jsonPrice[i][0]).format(\"DD MMM YYYY\");var niceDateAbbrev=moment(jsonPrice[i][0]).format(\"DD MMM\");var niceTime=moment(jsonPrice[i][0]).format(\"h:mm A\");var price=Math.round(jsonPrice[i][1][\"4. close\"]*100)/100;var benchmark=Math.round(jsonIndex[i][1][\"4. close\"]*100)/100;var index=i;// this makes it jumpy\n// let index = moment(jsonPrice[i][0]).unix();\n// moment(d).format(\"DD MMM\");\ntempArr.push({fullDate:jsonPrice[i][0],niceDate:niceDate,niceDateAbbrev:niceDateAbbrev,niceTime:niceTime,price:price,benchmark:benchmark,index:index});}return tempArr;}var startVals;function getStartVals(){var jsonPrice=sortACData(priceJson[\"Time Series (5min)\"]);var jsonIndex=sortACData(indexJson[\"Time Series (5min)\"]);var tempStartVals=[];var price=Math.round(jsonPrice[0][1][\"4. close\"]*100)/100;var benchmark=Math.round(jsonIndex[0][1][\"4. close\"]*100)/100;tempStartVals.push({price:price,benchmark:benchmark});startVals=tempStartVals;return startVals;}function formatAlphaCaptureData(){getStartVals();var jsonPrice=sortACData(priceJson[\"Time Series (5min)\"]);var jsonIndex=sortACData(indexJson[\"Time Series (5min)\"]);var tempArr=[];for(var i=0;i<jsonPrice.length;i++){var niceDate=moment(jsonPrice[i][0]).format(\"DD MMM YYYY\");var niceDateAbbrev=moment(jsonPrice[i][0]).format(\"DD MMM\");var niceTime=moment(jsonPrice[i][0]).format(\"h:mm A\");var price=Math.round(jsonPrice[i][1][\"4. close\"]*100)/100;var benchmark=Math.round(jsonIndex[i][1][\"4. close\"]*100)/100;var index=i;// this makes it jumpy\n// let index = moment(jsonPrice[i][0]).unix();\n// moment(d).format(\"DD MMM\");\nvar pricePercent=Math.round((price-startVals[0].price)/startVals[0].price*10000)/10000;var benchmarkPercent=Math.round((benchmark-startVals[0].benchmark)/startVals[0].benchmark*10000)/10000;tempArr.push({fullDate:jsonPrice[i][0],niceDate:niceDate,niceDateAbbrev:niceDateAbbrev,niceTime:niceTime,price:price,pricePercent:pricePercent,benchmark:benchmark,benchmarkPercent:benchmarkPercent,index:index});}// console.log(startVals);\nreturn tempArr;}export var alphaCaptureChartData=formatAlphaCaptureData();console.log(alphaCaptureChartData);export var startValsConst=startVals;export var priceData=formatPriceData();","map":{"version":3,"sources":["/Users/amandainnis/amandainnis.github.io/amandainnis.github.io/src/data/DataHandler.js"],"names":["priceJson","indexJson","moment","prePieData","label","value","tooltipValue","color","sortArray","data","key","newArr","sort","a","b","createPieData","sortACData","obj","entriesArr","Object","entries","unix","formatPriceData","jsonPrice","jsonIndex","tempArr","i","length","niceDate","format","niceDateAbbrev","niceTime","price","Math","round","benchmark","index","push","fullDate","startVals","getStartVals","tempStartVals","formatAlphaCaptureData","pricePercent","benchmarkPercent","alphaCaptureChartData","console","log","startValsConst","priceData"],"mappings":"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","sourcesContent":["import * as priceJson from \"../data/priceData.json\";\nimport * as indexJson from \"../data/spyData.json\";\nimport * as moment from \"../../node_modules/moment/moment\";\n\nconst prePieData = [\n  {\n    label: \"Seltzer\",\n    value: 5,\n    tooltipValue: \"Seltzer is great\",\n    color: \"pink\"\n  },\n  {\n    label: \"Seltzer\",\n    value: 5,\n    tooltipValue: \"Seltzer is great\",\n    color: \"teal\"\n  },\n  {\n    label: \"Grapefruit Juice\",\n    value: 2,\n    tooltipValue: \"Grapefruit Juice is healthy\",\n    color: \"yellow\"\n  },\n  {\n    label: \"Pellegrino\",\n    value: 9,\n    tooltipValue: \"Pellegrino is best\",\n    color: \"tan\"\n  },\n  {\n    label: \"Pellegrino\",\n    value: 9,\n    tooltipValue: \"Pellegrino is best\",\n    color: \"navy\"\n  }\n];\nfunction sortArray(data, key) {\n  let newArr = data.sort((a, b) => {\n    if (a[key] < b[key]) {\n      return 1;\n    } else if (a[key] > b[key]) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return newArr;\n}\nexport function createPieData() {\n  return sortArray(prePieData, \"value\");\n}\nfunction sortACData(obj) {\n  // console.log(priceJson[\"Time Series (5min)\"]);\n  const entriesArr = Object.entries(obj).sort((a, b) => {\n    return moment(a[0]).unix() - moment(b[0]).unix();\n  });\n  return entriesArr;\n}\nfunction formatPriceData() {\n  let jsonPrice = sortACData(priceJson[\"Time Series (5min)\"]);\n  let jsonIndex = sortACData(indexJson[\"Time Series (5min)\"]);\n  let tempArr = [];\n  for (let i = 0; i < jsonPrice.length; i++) {\n    let niceDate = moment(jsonPrice[i][0]).format(\"DD MMM YYYY\");\n    let niceDateAbbrev = moment(jsonPrice[i][0]).format(\"DD MMM\");\n\n    let niceTime = moment(jsonPrice[i][0]).format(\"h:mm A\");\n    let price = Math.round(jsonPrice[i][1][\"4. close\"] * 100) / 100;\n    let benchmark = Math.round(jsonIndex[i][1][\"4. close\"] * 100) / 100;\n    let index = i;\n\n    // this makes it jumpy\n    // let index = moment(jsonPrice[i][0]).unix();\n\n    // moment(d).format(\"DD MMM\");\n\n    tempArr.push({\n      fullDate: jsonPrice[i][0],\n      niceDate: niceDate,\n      niceDateAbbrev: niceDateAbbrev,\n      niceTime: niceTime,\n      price: price,\n      benchmark: benchmark,\n      index: index\n    });\n  }\n\n  return tempArr;\n}\n\nlet startVals;\nfunction getStartVals() {\n  let jsonPrice = sortACData(priceJson[\"Time Series (5min)\"]);\n  let jsonIndex = sortACData(indexJson[\"Time Series (5min)\"]);\n  let tempStartVals = [];\n  let price = Math.round(jsonPrice[0][1][\"4. close\"] * 100) / 100;\n  let benchmark = Math.round(jsonIndex[0][1][\"4. close\"] * 100) / 100;\n\n  tempStartVals.push({\n    price: price,\n    benchmark: benchmark\n  });\n  startVals = tempStartVals;\n  return startVals;\n}\nfunction formatAlphaCaptureData() {\n  getStartVals();\n  let jsonPrice = sortACData(priceJson[\"Time Series (5min)\"]);\n  let jsonIndex = sortACData(indexJson[\"Time Series (5min)\"]);\n  let tempArr = [];\n\n  for (let i = 0; i < jsonPrice.length; i++) {\n    let niceDate = moment(jsonPrice[i][0]).format(\"DD MMM YYYY\");\n    let niceDateAbbrev = moment(jsonPrice[i][0]).format(\"DD MMM\");\n    let niceTime = moment(jsonPrice[i][0]).format(\"h:mm A\");\n    let price = Math.round(jsonPrice[i][1][\"4. close\"] * 100) / 100;\n    let benchmark = Math.round(jsonIndex[i][1][\"4. close\"] * 100) / 100;\n    let index = i;\n\n    // this makes it jumpy\n    // let index = moment(jsonPrice[i][0]).unix();\n\n    // moment(d).format(\"DD MMM\");\n\n    let pricePercent =\n      Math.round(((price - startVals[0].price) / startVals[0].price) * 10000) /\n      10000;\n    let benchmarkPercent =\n      Math.round(\n        ((benchmark - startVals[0].benchmark) / startVals[0].benchmark) * 10000\n      ) / 10000;\n    tempArr.push({\n      fullDate: jsonPrice[i][0],\n      niceDate: niceDate,\n      niceDateAbbrev: niceDateAbbrev,\n      niceTime: niceTime,\n      price: price,\n      pricePercent: pricePercent,\n      benchmark: benchmark,\n      benchmarkPercent: benchmarkPercent,\n      index: index\n    });\n  }\n\n  // console.log(startVals);\n  return tempArr;\n}\n\nexport const alphaCaptureChartData = formatAlphaCaptureData();\nconsole.log(alphaCaptureChartData);\nexport const startValsConst = startVals;\nexport const priceData = formatPriceData();\n"]},"metadata":{},"sourceType":"module"}