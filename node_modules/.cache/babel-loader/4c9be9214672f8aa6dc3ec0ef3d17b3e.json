{"ast":null,"code":"var _jsxFileName = \"/Users/amandainnis/ReactProjects/react-site/portfolio/src/components/reusable/pie.js\";\nimport React, { createRef, useState, useEffect } from \"react\";\nimport * as d3 from \"../../../node_modules/d3\";\nconst chartData = [{\n  label: \"Seltzer\",\n  value: 5,\n  tooltipValue: \"Seltzer is great\"\n}, {\n  label: \"Seltzer\",\n  value: 5,\n  tooltipValue: \"Seltzer is great\"\n}, {\n  label: \"Grapefruit Juice\",\n  value: 2,\n  tooltipValue: \"Grapefruit Juice is healthy\"\n}, {\n  label: \"Pellegrino\",\n  value: 9,\n  tooltipValue: \"Pellegrino is best\"\n}, {\n  label: \"Pellegrino\",\n  value: 9,\n  tooltipValue: \"Pellegrino is best\"\n}];\nexport default function Pie() {\n  const chart = createRef();\n  const chartContainer = createRef();\n  const w = 300;\n  const h = 300;\n  const r = 100;\n  const containerElement = chart.current;\n\n  function renderChart() {\n    containerElement.innerHTML = \"\";\n    const tooltip = d3.select(this.containerElement).append(\"div\").attr(\"class\", \"d3-tooltip\");\n    const borderParent = tooltip.append(\"div\").attr(\"class\", \"border-parent\");\n    const d3InnerTooltip = tooltip.append(\"div\").attr(\"class\", \"d3-tooltip-inner\");\n    d3InnerTooltip.append(\"div\").attr(\"class\", \"d3-title\");\n    d3InnerTooltip.append(\"div\").attr(\"class\", \"amount\");\n    const vis = d3.select(containerElement).append(\"svg:svg\").attr(\"preserveAspectRatio\", \"xMinYMin meet\") // the 300 and 300 represents height and width, viewbox is necessary for responsive sizing\n    .attr(\"viewBox\", \"0 0 200 200\").data([chartData]).attr(\"class\", \"mamaSVG\").append(\"g\").attr(\"class\", \"bigSVG\") // move the center of the pie chart from 0, 0 to radius, radius\n    .attr(\"transform\", \"translate(\" + this.r + \",\" + this.r + \")\");\n    const arc = d3.arc().outerRadius(this.r).innerRadius(40); // this will create arc data for us given a list of values\n\n    const pie = d3.pie() // we must tell it out to access the value of each element in our data array\n    .value(function (d) {\n      //console.log(d[values]);\n      return parseFloat(d[values]);\n    }); // this selects all <g> elements with class slice (there aren't any yet)\n\n    const arcs = this.vis.selectAll(\"g\").attr(\"class\", \"slice\") // associate the generated pie data (an array of arcs, each having startAngle, endAngle and value properties)\n    // creating a <g> for every object in the data array\n    .data(pie).enter();\n    arcs.append(\"svg:path\").attr(\"class\", \"arcs\") // set the color for each slice to be chosen from the color function defined above\n    .attr(\"fill\", (d, i) => {\n      // console.log(d.data[colors]);\n      return d.data.color;\n    }) // this creates the actual SVG path using the associated data (pie) with the arc drawing function\n    .attr(\"d\", arc) // .attr('id', function (d) {\n    //   return (d.data[labels]).replace(/\\s/g, '');\n    // })\n    .text(function (d) {\n      return d;\n    }).on(\"mouseenter\", function (d, i) {\n      const title = d.data[labels];\n      const total = d.data[toolTipValues]; // let border = d.data[borderClass];\n\n      borderParent.attr(\"background-color\", d.data.color);\n      borderParent.style(\"width\", \"4px\");\n      d3InnerTooltip.select(\".d3-title\").text(d.data[labels]);\n      d3InnerTooltip.select(\".amount\").text(d.data[toolTipValues]);\n      tooltip.style(\"display\", \"flex\");\n      tooltip.style(\"opacity\", 1);\n    }).on(\"mousemove\", function (d) {\n      tooltip.style(\"top\", d3.event.clientY + 30 + \"px\").style(\"left\", d3.event.clientX - 25 + \"px\");\n    });\n    const outervis = d3.select(this.chartContainer.nativeElement).on(\"mouseleave\", function () {\n      tooltip.style(\"opacity\", 0);\n    });\n  }\n\n  useEffect(() => {\n    renderChart();\n  }, []); // console.log(containerElement);\n  // function renderChart() {\n  //   if (chartData && chartData.length > 0) {\n  //     containerElement = chart.current;\n  //     // this has to be there so chart doesnt render multiple times\n  //     containerElement.innerHTML = \"\";\n  //     // consts work better with angular/d3 than setting up variables (this.variable) inside the component\n  //     // the borderParent const is necessary for anchoring the different colored border classes that get attached on hover\n  //     const tooltip = d3\n  //       .select(this.containerElement)\n  //       .append(\"div\")\n  //       .attr(\"class\", \"d3-tooltip\");\n  //     const borderParent = tooltip.append(\"div\").attr(\"class\", \"border-parent\");\n  //     const d3InnerTooltip = tooltip\n  //       .append(\"div\")\n  //       .attr(\"class\", \"d3-tooltip-inner\");\n  //     d3InnerTooltip.append(\"div\").attr(\"class\", \"d3-title\");\n  //     d3InnerTooltip.append(\"div\").attr(\"class\", \"amount\");\n  //     this.vis = d3\n  //       .select(this.containerElement)\n  //       .append(\"svg:svg\")\n  //       .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  //       // the 300 and 300 represents height and width, viewbox is necessary for responsive sizing\n  //       .attr(\"viewBox\", \"0 0 200 200\")\n  //       .data([this._chartData])\n  //       .attr(\"class\", \"mamaSVG\")\n  //       .append(\"g\")\n  //       .attr(\"class\", \"bigSVG\")\n  //       // move the center of the pie chart from 0, 0 to radius, radius\n  //       .attr(\"transform\", \"translate(\" + this.r + \",\" + this.r + \")\");\n  //     const arc = d3\n  //       .arc()\n  //       .outerRadius(this.r)\n  //       .innerRadius(40);\n  //     // this will create arc data for us given a list of values\n  //     const pie = d3\n  //       .pie()\n  //       // we must tell it out to access the value of each element in our data array\n  //       .value(function(d: any) {\n  //         //console.log(d[values]);\n  //         return parseFloat(d[values]);\n  //       });\n  //     // this selects all <g> elements with class slice (there aren't any yet)\n  //     const arcs = this.vis\n  //       .selectAll(\"g\")\n  //       .attr(\"class\", \"slice\")\n  //       // associate the generated pie data (an array of arcs, each having startAngle, endAngle and value properties)\n  //       // creating a <g> for every object in the data array\n  //       .data(pie)\n  //       .enter();\n  //     arcs\n  //       .append(\"svg:path\")\n  //       .attr(\"class\", \"arcs\")\n  //       // set the color for each slice to be chosen from the color function defined above\n  //       .attr(\"fill\", (d: any, i: any) => {\n  //         // console.log(d.data[colors]);\n  //         return d.data.color;\n  //       })\n  //       // this creates the actual SVG path using the associated data (pie) with the arc drawing function\n  //       .attr(\"d\", arc)\n  //       // .attr('id', function (d) {\n  //       //   return (d.data[labels]).replace(/\\s/g, '');\n  //       // })\n  //       .text(function(d) {\n  //         return d;\n  //       })\n  //       .on(\"mouseenter\", function(d, i) {\n  //         const title = d.data[labels];\n  //         const total = d.data[toolTipValues];\n  //         // let border = d.data[borderClass];\n  //         borderParent.attr(\"background-color\", d.data.color);\n  //         borderParent.style(\"width\", \"4px\");\n  //         d3InnerTooltip.select(\".d3-title\").text(d.data[labels]);\n  //         d3InnerTooltip.select(\".amount\").text(d.data[toolTipValues]);\n  //         tooltip.style(\"display\", \"flex\");\n  //         tooltip.style(\"opacity\", 1);\n  //       })\n  //       .on(\"mousemove\", function(d) {\n  //         tooltip\n  //           .style(\"top\", d3.event.clientY + 30 + \"px\")\n  //           .style(\"left\", d3.event.clientX - 25 + \"px\");\n  //       });\n  //     const outervis = d3\n  //       .select(this.chartContainer.nativeElement)\n  //       .on(\"mouseleave\", function() {\n  //         tooltip.style(\"opacity\", 0);\n  //       });\n  //   }\n  // }\n\n  return React.createElement(\"div\", {\n    className: \"pie-chart svg-container\",\n    ref: chartContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    ref: chart,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/amandainnis/ReactProjects/react-site/portfolio/src/components/reusable/pie.js"],"names":["React","createRef","useState","useEffect","d3","chartData","label","value","tooltipValue","Pie","chart","chartContainer","w","h","r","containerElement","current","renderChart","innerHTML","tooltip","select","append","attr","borderParent","d3InnerTooltip","vis","data","arc","outerRadius","innerRadius","pie","d","parseFloat","values","arcs","selectAll","enter","i","color","text","on","title","labels","total","toolTipValues","style","event","clientY","clientX","outervis","nativeElement"],"mappings":"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","sourcesContent":["import React, { createRef, useState, useEffect } from \"react\";\nimport * as d3 from \"../../../node_modules/d3\";\nconst chartData = [\n  { label: \"Seltzer\", value: 5, tooltipValue: \"Seltzer is great\" },\n  { label: \"Seltzer\", value: 5, tooltipValue: \"Seltzer is great\" },\n  {\n    label: \"Grapefruit Juice\",\n    value: 2,\n    tooltipValue: \"Grapefruit Juice is healthy\"\n  },\n  { label: \"Pellegrino\", value: 9, tooltipValue: \"Pellegrino is best\" },\n  { label: \"Pellegrino\", value: 9, tooltipValue: \"Pellegrino is best\" }\n];\nexport default function Pie() {\n  const chart = createRef();\n  const chartContainer = createRef();\n  const w = 300;\n  const h = 300;\n  const r = 100;\n  const containerElement = chart.current;\n  function renderChart() {\n    containerElement.innerHTML = \"\";\n    const tooltip = d3\n      .select(this.containerElement)\n      .append(\"div\")\n      .attr(\"class\", \"d3-tooltip\");\n    const borderParent = tooltip.append(\"div\").attr(\"class\", \"border-parent\");\n    const d3InnerTooltip = tooltip\n      .append(\"div\")\n      .attr(\"class\", \"d3-tooltip-inner\");\n    d3InnerTooltip.append(\"div\").attr(\"class\", \"d3-title\");\n    d3InnerTooltip.append(\"div\").attr(\"class\", \"amount\");\n    const vis = d3\n      .select(containerElement)\n      .append(\"svg:svg\")\n      .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n      // the 300 and 300 represents height and width, viewbox is necessary for responsive sizing\n      .attr(\"viewBox\", \"0 0 200 200\")\n      .data([chartData])\n      .attr(\"class\", \"mamaSVG\")\n      .append(\"g\")\n      .attr(\"class\", \"bigSVG\")\n      // move the center of the pie chart from 0, 0 to radius, radius\n      .attr(\"transform\", \"translate(\" + this.r + \",\" + this.r + \")\");\n\n    const arc = d3\n      .arc()\n      .outerRadius(this.r)\n      .innerRadius(40);\n\n    // this will create arc data for us given a list of values\n    const pie = d3\n      .pie()\n      // we must tell it out to access the value of each element in our data array\n      .value(function(d: any) {\n        //console.log(d[values]);\n        return parseFloat(d[values]);\n      });\n    // this selects all <g> elements with class slice (there aren't any yet)\n\n    const arcs = this.vis\n      .selectAll(\"g\")\n      .attr(\"class\", \"slice\")\n      // associate the generated pie data (an array of arcs, each having startAngle, endAngle and value properties)\n      // creating a <g> for every object in the data array\n      .data(pie)\n      .enter();\n\n    arcs\n      .append(\"svg:path\")\n      .attr(\"class\", \"arcs\")\n      // set the color for each slice to be chosen from the color function defined above\n      .attr(\"fill\", (d: any, i: any) => {\n        // console.log(d.data[colors]);\n        return d.data.color;\n      })\n      // this creates the actual SVG path using the associated data (pie) with the arc drawing function\n      .attr(\"d\", arc)\n      // .attr('id', function (d) {\n      //   return (d.data[labels]).replace(/\\s/g, '');\n      // })\n      .text(function(d) {\n        return d;\n      })\n\n      .on(\"mouseenter\", function(d, i) {\n        const title = d.data[labels];\n        const total = d.data[toolTipValues];\n        // let border = d.data[borderClass];\n        borderParent.attr(\"background-color\", d.data.color);\n        borderParent.style(\"width\", \"4px\");\n\n        d3InnerTooltip.select(\".d3-title\").text(d.data[labels]);\n        d3InnerTooltip.select(\".amount\").text(d.data[toolTipValues]);\n        tooltip.style(\"display\", \"flex\");\n        tooltip.style(\"opacity\", 1);\n      })\n      .on(\"mousemove\", function(d) {\n        tooltip\n          .style(\"top\", d3.event.clientY + 30 + \"px\")\n          .style(\"left\", d3.event.clientX - 25 + \"px\");\n      });\n\n    const outervis = d3\n      .select(this.chartContainer.nativeElement)\n      .on(\"mouseleave\", function() {\n        tooltip.style(\"opacity\", 0);\n      });\n  }\n  useEffect(() => {\n    renderChart();\n  }, []);\n  // console.log(containerElement);\n  // function renderChart() {\n  //   if (chartData && chartData.length > 0) {\n  //     containerElement = chart.current;\n  //     // this has to be there so chart doesnt render multiple times\n  //     containerElement.innerHTML = \"\";\n  //     // consts work better with angular/d3 than setting up variables (this.variable) inside the component\n  //     // the borderParent const is necessary for anchoring the different colored border classes that get attached on hover\n  //     const tooltip = d3\n  //       .select(this.containerElement)\n  //       .append(\"div\")\n  //       .attr(\"class\", \"d3-tooltip\");\n  //     const borderParent = tooltip.append(\"div\").attr(\"class\", \"border-parent\");\n  //     const d3InnerTooltip = tooltip\n  //       .append(\"div\")\n  //       .attr(\"class\", \"d3-tooltip-inner\");\n  //     d3InnerTooltip.append(\"div\").attr(\"class\", \"d3-title\");\n  //     d3InnerTooltip.append(\"div\").attr(\"class\", \"amount\");\n\n  //     this.vis = d3\n  //       .select(this.containerElement)\n  //       .append(\"svg:svg\")\n  //       .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  //       // the 300 and 300 represents height and width, viewbox is necessary for responsive sizing\n  //       .attr(\"viewBox\", \"0 0 200 200\")\n  //       .data([this._chartData])\n  //       .attr(\"class\", \"mamaSVG\")\n  //       .append(\"g\")\n  //       .attr(\"class\", \"bigSVG\")\n  //       // move the center of the pie chart from 0, 0 to radius, radius\n  //       .attr(\"transform\", \"translate(\" + this.r + \",\" + this.r + \")\");\n\n  //     const arc = d3\n  //       .arc()\n  //       .outerRadius(this.r)\n  //       .innerRadius(40);\n\n  //     // this will create arc data for us given a list of values\n  //     const pie = d3\n  //       .pie()\n  //       // we must tell it out to access the value of each element in our data array\n  //       .value(function(d: any) {\n  //         //console.log(d[values]);\n  //         return parseFloat(d[values]);\n  //       });\n  //     // this selects all <g> elements with class slice (there aren't any yet)\n\n  //     const arcs = this.vis\n  //       .selectAll(\"g\")\n  //       .attr(\"class\", \"slice\")\n  //       // associate the generated pie data (an array of arcs, each having startAngle, endAngle and value properties)\n  //       // creating a <g> for every object in the data array\n  //       .data(pie)\n  //       .enter();\n\n  //     arcs\n  //       .append(\"svg:path\")\n  //       .attr(\"class\", \"arcs\")\n  //       // set the color for each slice to be chosen from the color function defined above\n  //       .attr(\"fill\", (d: any, i: any) => {\n  //         // console.log(d.data[colors]);\n  //         return d.data.color;\n  //       })\n  //       // this creates the actual SVG path using the associated data (pie) with the arc drawing function\n  //       .attr(\"d\", arc)\n  //       // .attr('id', function (d) {\n  //       //   return (d.data[labels]).replace(/\\s/g, '');\n  //       // })\n  //       .text(function(d) {\n  //         return d;\n  //       })\n\n  //       .on(\"mouseenter\", function(d, i) {\n  //         const title = d.data[labels];\n  //         const total = d.data[toolTipValues];\n  //         // let border = d.data[borderClass];\n  //         borderParent.attr(\"background-color\", d.data.color);\n  //         borderParent.style(\"width\", \"4px\");\n\n  //         d3InnerTooltip.select(\".d3-title\").text(d.data[labels]);\n  //         d3InnerTooltip.select(\".amount\").text(d.data[toolTipValues]);\n  //         tooltip.style(\"display\", \"flex\");\n  //         tooltip.style(\"opacity\", 1);\n  //       })\n  //       .on(\"mousemove\", function(d) {\n  //         tooltip\n  //           .style(\"top\", d3.event.clientY + 30 + \"px\")\n  //           .style(\"left\", d3.event.clientX - 25 + \"px\");\n  //       });\n\n  //     const outervis = d3\n  //       .select(this.chartContainer.nativeElement)\n  //       .on(\"mouseleave\", function() {\n  //         tooltip.style(\"opacity\", 0);\n  //       });\n  //   }\n  // }\n  return (\n    <div className=\"pie-chart svg-container\" ref={chartContainer}>\n      <div ref={chart}></div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}