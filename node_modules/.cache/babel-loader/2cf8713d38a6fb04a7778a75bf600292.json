{"ast":null,"code":"import _defineProperty from \"/Users/amandainnis/ReactProjects/board-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/amandainnis/ReactProjects/board-app/src/components/forms/MemeGenerator.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport Checkbox from \"./Checkbox\";\nlet formData;\nconst memeApi = \"https://api.imgflip.com/get_memes\";\n\nclass MemeGenerator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allMemeImgs: [],\n      selectedMemes: [],\n      randomImg: \"https://i.imgflip.com/345v97.jpg\",\n      topText: \"\",\n      bottomText: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleMemes = this.handleMemes.bind(this);\n    this.getAllMemes = this.getAllMemes.bind(this);\n  }\n\n  handleCheckbox(e) {\n    let newState;\n    this.setState(prevState => {\n      newState = prevState.checkboxData.map(val => {\n        if (val.id === e) {\n          console.log(val.id);\n\n          let copy = _objectSpread({}, val);\n\n          copy.checked = !copy.checked;\n          return copy;\n        }\n\n        console.log(val.id);\n        return val;\n      });\n      console.log(newState);\n      return {\n        checkboxData: newState\n      };\n    });\n    console.log(e);\n    console.log(this.state.checkboxData);\n  }\n\n  handleChange(e) {\n    const _e$target = e.target,\n          name = _e$target.name,\n          value = _e$target.value;\n    this.setState({\n      [name]: value\n    }); // console.log(this.state);\n  }\n\n  handleSubmit() {\n    this.setState(prevState => {\n      formData = prevState.firstName;\n      return {\n        firstName: \"\",\n        lastName: \"\",\n        checkboxData: checkboxData,\n        radioData: radioData\n      };\n    });\n    return formData;\n  }\n\n  getAllMemes(memes) {\n    this.setState({\n      allMemeImgs: memes,\n      randomImg: memes[0]\n    });\n    console.log(this.state);\n    console.log(this.state.allMemeImgs[0]);\n  }\n\n  handleMemes(memes) {\n    this.setState(prevState => {\n      console.log(prevState);\n      return {\n        selectedMemes: memes[0]\n      };\n    });\n  }\n\n  componentDidMount() {\n    fetch(memeApi).then(res => res.json()).then(res => {\n      console.log(res.data.memes);\n      this.getAllMemes(res.data.memes);\n    });\n  }\n\n  render() {\n    // const myRender = this.state.allMemeImgs[0].url || \"hi\";\n    return React.createElement(\"article\", {\n      className: \"portfolio-card\",\n      style: {\n        backgroundColor: \"var(--background-main)\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"text-section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Memes\")), React.createElement(\"div\", {\n      className: \"mt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"input-group mt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"label-style\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Top Text\"), React.createElement(\"input\", {\n      className: \"input-style\",\n      name: \"topText\",\n      value: this.state.topText,\n      type: \"text\",\n      onChange: e => this.handleChange(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"input-group mt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"label-style\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Bottom Text\"), React.createElement(\"input\", {\n      className: \"input-style\",\n      name: \"bottomText\",\n      value: this.state.bottomText,\n      type: \"text\",\n      onChange: e => this.handleChange(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"meme-div\",\n      style: {\n        backgroundImage: \"url(\".concat(this.state.randomImg[\"url\"], \")\")\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"meme-text mt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, this.state.topText), React.createElement(\"div\", {\n      className: \"meme-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, this.state.bottomText)), React.createElement(\"small\", {\n      class: \"mt-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \" \", this.state.randomImg[\"name\"])), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"outline-btn accent\",\n      onClick: () => {\n        this.handleSubmit();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"submit\")));\n  }\n\n}\n\nexport default MemeGenerator;","map":{"version":3,"sources":["/Users/amandainnis/ReactProjects/board-app/src/components/forms/MemeGenerator.js"],"names":["React","Checkbox","formData","memeApi","MemeGenerator","Component","constructor","props","state","allMemeImgs","selectedMemes","randomImg","topText","bottomText","handleChange","bind","handleSubmit","handleMemes","getAllMemes","handleCheckbox","e","newState","setState","prevState","checkboxData","map","val","id","console","log","copy","checked","target","name","value","firstName","lastName","radioData","memes","componentDidMount","fetch","then","res","json","data","render","backgroundColor","backgroundImage"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Checkbox from \"./Checkbox\";\n\nlet formData;\nconst memeApi = \"https://api.imgflip.com/get_memes\";\nclass MemeGenerator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allMemeImgs: [],\n      selectedMemes: [],\n      randomImg: \"https://i.imgflip.com/345v97.jpg\",\n      topText: \"\",\n      bottomText: \"\"\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleMemes = this.handleMemes.bind(this);\n    this.getAllMemes = this.getAllMemes.bind(this);\n  }\n  handleCheckbox(e) {\n    let newState;\n\n    this.setState(prevState => {\n      newState = prevState.checkboxData.map(val => {\n        if (val.id === e) {\n          console.log(val.id);\n          let copy = { ...val };\n          copy.checked = !copy.checked;\n          return copy;\n        }\n        console.log(val.id);\n        return val;\n      });\n      console.log(newState);\n      return { checkboxData: newState };\n    });\n    console.log(e);\n    console.log(this.state.checkboxData);\n  }\n\n  handleChange(e) {\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value\n    });\n    // console.log(this.state);\n  }\n  handleSubmit() {\n    this.setState(prevState => {\n      formData = prevState.firstName;\n      return {\n        firstName: \"\",\n        lastName: \"\",\n        checkboxData: checkboxData,\n        radioData: radioData\n      };\n    });\n    return formData;\n  }\n  getAllMemes(memes) {\n    this.setState({\n      allMemeImgs: memes,\n      randomImg: memes[0]\n    });\n    console.log(this.state);\n    console.log(this.state.allMemeImgs[0]);\n  }\n  handleMemes(memes) {\n    this.setState(prevState => {\n      console.log(prevState);\n      return {\n        selectedMemes: memes[0]\n      };\n    });\n  }\n  componentDidMount() {\n    fetch(memeApi)\n      .then(res => res.json())\n      .then(res => {\n        console.log(res.data.memes);\n\n        this.getAllMemes(res.data.memes);\n      });\n  }\n  render() {\n    // const myRender = this.state.allMemeImgs[0].url || \"hi\";\n    return (\n      <article\n        className=\"portfolio-card\"\n        style={{ backgroundColor: \"var(--background-main)\" }}\n      >\n        <div className=\"text-section\">\n          <h1 className=\"title\">Memes</h1>\n          {/* <h4 className=\"subtitle\">Login</h4> */}\n        </div>\n        {/* <form onSubmit={() => this.handleSubmit()}> */}\n\n        <div className=\"mt-2\">\n          <div className=\"input-group mt-2\">\n            <div className=\"label-style\">Top Text</div>\n            <input\n              className=\"input-style\"\n              name=\"topText\"\n              value={this.state.topText}\n              type=\"text\"\n              onChange={e => this.handleChange(e)}\n            />\n          </div>\n          <div className=\"input-group mt-2\">\n            <div className=\"label-style\">Bottom Text</div>\n            <input\n              className=\"input-style\"\n              name=\"bottomText\"\n              value={this.state.bottomText}\n              type=\"text\"\n              onChange={e => this.handleChange(e)}\n            />\n          </div>\n          <div\n            className=\"meme-div\"\n            style={{ backgroundImage: `url(${this.state.randomImg[\"url\"]})` }}\n          >\n            <div className=\"meme-text mt-2\">{this.state.topText}</div>\n            <div className=\"meme-text\">{this.state.bottomText}</div>\n          </div>\n          <small class=\"mt-1\"> {this.state.randomImg[\"name\"]}</small>\n        </div>\n        <div>\n          <button\n            className=\"outline-btn accent\"\n            onClick={() => {\n              this.handleSubmit();\n            }}\n          >\n            submit\n          </button>\n        </div>\n        {/* </form> */}\n      </article>\n    );\n  }\n}\n\nexport default MemeGenerator;\n"]},"metadata":{},"sourceType":"module"}