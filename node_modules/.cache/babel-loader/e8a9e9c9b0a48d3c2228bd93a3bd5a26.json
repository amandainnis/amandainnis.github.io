{"ast":null,"code":"import _slicedToArray from \"/Users/amandainnis/ReactProjects/react-site/portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/amandainnis/ReactProjects/react-site/portfolio/src/components/insightAnalytics/InsightAnalyticsCard.js\";\nimport React, { useEffect, createRef, useState } from \"react\";\nimport * as Common from \"../reusable/common\";\n\nconst imgInsightAnalytics = require(\"../../assets/images/drilldown_client-thumb.png\");\n\nconst data = {\n  id: 1,\n  img: imgInsightAnalytics,\n  title: \"Analytics\",\n  subtitle: \"A Client Data Dashboard\",\n  blurb: [\"Insight Analytics new containerized desktop application within the harbor framework.  It will provide analytical and reporting capabilities to Research Sales, Sales Traders and COO/Operations/Finance/Capital Markets personas.\", \"To showcase a user's client universe as relates to top buys / sells, client value, monthly CV totals with YOY comparison, CV by product, sector totals, percent change, sectors by client type. To focus or drilldown on these specific attributes--as well as readership, touchpoint and 13F dataâ€“as they relate to a client / ticker / sector \"],\n  bkgd: \"var(--analytics-bkgd)\"\n};\nconst backupPlan = [{\n  \"Rank A: Real-Time Performance\": {\n    \"Consumer Discretionary\": \"1.57\",\n    \"Communication Services\": \"1.43\",\n    Energy: \"1.31\",\n    Materials: \"1.30\",\n    Industrials: \"1.16\",\n    \"Information Technology\": \"1.06\",\n    Financials: \"0.77\",\n    \"Real Estate\": \"0.22\",\n    \"Health Care\": \"-0.33\",\n    \"Consumer Staples\": \"-0.48\",\n    Utilities: \"-0.88\"\n  }\n}];\nconst sectorUrl = \"https://www.alphavantage.co/query?function=SECTOR&apikey=NKT90SOYWKFBP04F\";\n\nfunction InsightAnalyticsCard(props) {\n  const _useState = useState(true),\n        _useState2 = _slicedToArray(_useState, 2),\n        isLoading = _useState2[0],\n        setIsLoading = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        sectorData = _useState4[0],\n        setSectorData = _useState4[1];\n\n  async function asyncFetch() {\n    try {\n      const res = await fetch(sectorUrl);\n      const myData = await res.json();\n      let reformattedData = addWidth(myData[\"Rank A: Real-Time Performance\"]); // console.log(reformattedData);\n\n      setIsLoading(false);\n      setSectorData(reformattedData);\n    } catch (err) {\n      console.log(err);\n      let reformattedData = addWidth(backupPlan[0][\"Rank A: Real-Time Performance\"]);\n      setIsLoading(false);\n      setSectorData(reformattedData);\n    }\n  }\n\n  function mapSectorBackgrounds(value) {\n    if (value === \"Communication Services\") {\n      return \"var(--comm-services)\";\n    } else if (value === \"Consumer Discretionary\") {\n      return \"var(--con-discretionary)\";\n    } else if (value === \"Consumer Staples\") {\n      return \"var(--con-staples)\";\n    } else if (value === \"Energy\") {\n      return \"var(--energy)\";\n    } else if (value === \"Financials\") {\n      return \"var(--financials)\";\n    } else if (value === \"Health Care\") {\n      return \"var(--healthcare)\";\n    } else if (value === \"Industrials\") {\n      return \"var(--industrials)\";\n    } else if (value === \"Information Technology\") {\n      return \"var(--info-tech)\";\n    } else if (value === \"Materials\") {\n      return \"var(--materials)\";\n    } else if (value === \"Real Estate\") {\n      return \"var(--real-estate)\";\n    } else if (value === \"Utilities\") {\n      return \"var(--utilities)\";\n    }\n  }\n\n  function addWidth(res) {\n    let newObject = mapObject(res);\n    newObject = Common.bubbleSort(newObject); // console.log(newObject[0]);\n\n    let maxA = newObject[0].val;\n    let maxB = newObject[newObject.length - 1].val;\n    let max = Math.abs(maxA) > Math.abs(maxB) ? maxA : maxB;\n    let finalObject = newObject.map(item => {\n      let width = Math.abs(Math.round(item.val / max * 1000) / 10);\n      let color = mapSectorBackgrounds(item.name);\n      return {\n        name: item.name,\n        val: item.val,\n        isNegative: item.isNegative,\n        width: width,\n        color: color\n      };\n    }); // console.log(finalObject);\n\n    return finalObject;\n  }\n\n  function addWidthRandom(res) {\n    let newObject = mapObject(res);\n    newObject = Common.bubbleSort(newObject); // console.log(newObject[0]);\n\n    let maxA = newObject[0].val;\n    let maxB = newObject[newObject.length - 1].val;\n    let max = Math.abs(maxA) > Math.abs(maxB) ? maxA : maxB;\n    let finalObject = newObject.map(item => {\n      let itemVal = Math.random() * item.val;\n      let width = Math.abs(Math.round(itemVal / max * 1000) / 10);\n      let color = mapSectorBackgrounds(item.name);\n      return {\n        name: item.name,\n        val: itemVal,\n        isNegative: item.isNegative,\n        width: width,\n        color: color\n      };\n    }); // console.log(finalObject);\n\n    return finalObject;\n  }\n\n  function mapObject(res) {\n    let tempArr = [];\n    Object.entries(res).map((res, i) => {\n      // console.log(res);\n      let temp = res[1].replace(/\\%/, \"\");\n      temp = parseFloat(temp);\n      let isNegative = temp < 0 ? true : false;\n      return tempArr.push({\n        name: res[0],\n        val: temp,\n        isNegative: isNegative\n      });\n    });\n    return tempArr;\n  }\n\n  useEffect(() => {\n    asyncFetch();\n  }, []);\n  return React.createElement(\"article\", {\n    className: \"portfolio-card\",\n    style: {\n      backgroundColor: data.bkgd\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"text-section\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, data.title), React.createElement(\"h4\", {\n    className: \"subtitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, data.subtitle)), React.createElement(\"div\", {\n    className: \"flex-row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"bar-graph-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"bar-graph\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, sectorData !== null && sectorData.map((res, i) => {\n    if (res.val >= 0) {\n      return React.createElement(\"div\", {\n        key: i,\n        className: \"flex-row-center narrow-row-height panel-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"colA\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"colB\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"proportion-bar d-flex relative\",\n        style: {\n          width: res.width + \"%\",\n          backgroundColor: res.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"percent-class right-absolute\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, res.val, \"%\"), React.createElement(\"div\", {\n        className: \"flex1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      })));\n    } else {\n      return React.createElement(\"div\", {\n        key: i,\n        className: \"flex-row-center narrow-row-height panel-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"colA\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"proportion-bar d-flex relative\",\n        style: {\n          width: res.width + \"%\",\n          backgroundColor: res.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"percent-class left-absolute\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, res.val, \"%\"), React.createElement(\"div\", {\n        className: \"flex1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"colB\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }));\n    }\n  }))), React.createElement(\"div\", {\n    className: \"legend\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, sectorData.current !== null && sectorData.map((res, i) => {\n    return React.createElement(\"div\", {\n      key: \"legend-\".concat(i),\n      className: \"flex-row-center narrow-row-height\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"square\",\n      style: {\n        backgroundColor: res.color\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"title cursor-pointer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, res.name));\n  }))));\n}\n\nexport default InsightAnalyticsCard;","map":{"version":3,"sources":["/Users/amandainnis/ReactProjects/react-site/portfolio/src/components/insightAnalytics/InsightAnalyticsCard.js"],"names":["React","useEffect","createRef","useState","Common","imgInsightAnalytics","require","data","id","img","title","subtitle","blurb","bkgd","backupPlan","Energy","Materials","Industrials","Financials","Utilities","sectorUrl","InsightAnalyticsCard","props","isLoading","setIsLoading","sectorData","setSectorData","asyncFetch","res","fetch","myData","json","reformattedData","addWidth","err","console","log","mapSectorBackgrounds","value","newObject","mapObject","bubbleSort","maxA","val","maxB","length","max","Math","abs","finalObject","map","item","width","round","color","name","isNegative","addWidthRandom","itemVal","random","tempArr","Object","entries","i","temp","replace","parseFloat","push","backgroundColor","current"],"mappings":"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","sourcesContent":["import React, { useEffect, createRef, useState } from \"react\";\nimport * as Common from \"../reusable/common\";\nconst imgInsightAnalytics = require(\"../../assets/images/drilldown_client-thumb.png\");\nconst data = {\n  id: 1,\n  img: imgInsightAnalytics,\n  title: \"Analytics\",\n  subtitle: \"A Client Data Dashboard\",\n  blurb: [\n    \"Insight Analytics new containerized desktop application within the harbor framework.  It will provide analytical and reporting capabilities to Research Sales, Sales Traders and COO/Operations/Finance/Capital Markets personas.\",\n    \"To showcase a user's client universe as relates to top buys / sells, client value, monthly CV totals with YOY comparison, CV by product, sector totals, percent change, sectors by client type. To focus or drilldown on these specific attributes--as well as readership, touchpoint and 13F dataâ€“as they relate to a client / ticker / sector \"\n  ],\n  bkgd: \"var(--analytics-bkgd)\"\n};\nconst backupPlan = [\n  {\n    \"Rank A: Real-Time Performance\": {\n      \"Consumer Discretionary\": \"1.57\",\n      \"Communication Services\": \"1.43\",\n      Energy: \"1.31\",\n      Materials: \"1.30\",\n      Industrials: \"1.16\",\n      \"Information Technology\": \"1.06\",\n      Financials: \"0.77\",\n      \"Real Estate\": \"0.22\",\n      \"Health Care\": \"-0.33\",\n      \"Consumer Staples\": \"-0.48\",\n      Utilities: \"-0.88\"\n    }\n  }\n];\nconst sectorUrl =\n  \"https://www.alphavantage.co/query?function=SECTOR&apikey=NKT90SOYWKFBP04F\";\n\nfunction InsightAnalyticsCard(props) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [sectorData, setSectorData] = useState([]);\n\n  async function asyncFetch() {\n    try {\n      const res = await fetch(sectorUrl);\n      const myData = await res.json();\n      let reformattedData = addWidth(myData[\"Rank A: Real-Time Performance\"]);\n      // console.log(reformattedData);\n      setIsLoading(false);\n      setSectorData(reformattedData);\n    } catch (err) {\n      console.log(err);\n      let reformattedData = addWidth(\n        backupPlan[0][\"Rank A: Real-Time Performance\"]\n      );\n      setIsLoading(false);\n      setSectorData(reformattedData);\n    }\n  }\n\n  function mapSectorBackgrounds(value) {\n    if (value === \"Communication Services\") {\n      return \"var(--comm-services)\";\n    } else if (value === \"Consumer Discretionary\") {\n      return \"var(--con-discretionary)\";\n    } else if (value === \"Consumer Staples\") {\n      return \"var(--con-staples)\";\n    } else if (value === \"Energy\") {\n      return \"var(--energy)\";\n    } else if (value === \"Financials\") {\n      return \"var(--financials)\";\n    } else if (value === \"Health Care\") {\n      return \"var(--healthcare)\";\n    } else if (value === \"Industrials\") {\n      return \"var(--industrials)\";\n    } else if (value === \"Information Technology\") {\n      return \"var(--info-tech)\";\n    } else if (value === \"Materials\") {\n      return \"var(--materials)\";\n    } else if (value === \"Real Estate\") {\n      return \"var(--real-estate)\";\n    } else if (value === \"Utilities\") {\n      return \"var(--utilities)\";\n    }\n  }\n\n  function addWidth(res) {\n    let newObject = mapObject(res);\n    newObject = Common.bubbleSort(newObject);\n    // console.log(newObject[0]);\n    let maxA = newObject[0].val;\n    let maxB = newObject[newObject.length - 1].val;\n    let max = Math.abs(maxA) > Math.abs(maxB) ? maxA : maxB;\n\n    let finalObject = newObject.map(item => {\n      let width = Math.abs(Math.round((item.val / max) * 1000) / 10);\n      let color = mapSectorBackgrounds(item.name);\n      return {\n        name: item.name,\n        val: item.val,\n        isNegative: item.isNegative,\n        width: width,\n        color: color\n      };\n    });\n    // console.log(finalObject);\n    return finalObject;\n  }\n  function addWidthRandom(res) {\n    let newObject = mapObject(res);\n    newObject = Common.bubbleSort(newObject);\n    // console.log(newObject[0]);\n    let maxA = newObject[0].val;\n    let maxB = newObject[newObject.length - 1].val;\n    let max = Math.abs(maxA) > Math.abs(maxB) ? maxA : maxB;\n\n    let finalObject = newObject.map(item => {\n      let itemVal = Math.random() * item.val;\n      let width = Math.abs(Math.round((itemVal / max) * 1000) / 10);\n      let color = mapSectorBackgrounds(item.name);\n      return {\n        name: item.name,\n        val: itemVal,\n        isNegative: item.isNegative,\n        width: width,\n        color: color\n      };\n    });\n    // console.log(finalObject);\n    return finalObject;\n  }\n  function mapObject(res) {\n    let tempArr = [];\n    Object.entries(res).map((res, i) => {\n      // console.log(res);\n      let temp = res[1].replace(/\\%/, \"\");\n      temp = parseFloat(temp);\n      let isNegative = temp < 0 ? true : false;\n      return tempArr.push({\n        name: res[0],\n        val: temp,\n        isNegative: isNegative\n      });\n    });\n    return tempArr;\n  }\n\n  useEffect(() => {\n    asyncFetch();\n  }, []);\n\n  return (\n    <article className=\"portfolio-card\" style={{ backgroundColor: data.bkgd }}>\n      <div className=\"text-section\">\n        <h1 className=\"title\">{data.title}</h1>\n        <h4 className=\"subtitle\">{data.subtitle}</h4>\n      </div>\n      <div className=\"flex-row\">\n        <div className=\"bar-graph-wrapper\">\n          <div className=\"bar-graph\">\n            {/* {myData[0].val} */}\n            {sectorData !== null &&\n              sectorData.map((res, i) => {\n                if (res.val >= 0) {\n                  return (\n                    <div\n                      key={i}\n                      className=\"flex-row-center narrow-row-height panel-row\"\n                    >\n                      <div className=\"colA\"></div>\n                      <div className=\"colB\">\n                        <div\n                          className=\"proportion-bar d-flex relative\"\n                          style={{\n                            width: res.width + \"%\",\n                            backgroundColor: res.color\n                          }}\n                        ></div>\n                        <div className=\"percent-class right-absolute\">\n                          {res.val}%\n                        </div>\n                        <div className=\"flex1\"></div>\n                      </div>\n                    </div>\n                  );\n                } else {\n                  return (\n                    <div\n                      key={i}\n                      className=\"flex-row-center narrow-row-height panel-row\"\n                    >\n                      <div className=\"colA\">\n                        <div\n                          className=\"proportion-bar d-flex relative\"\n                          style={{\n                            width: res.width + \"%\",\n                            backgroundColor: res.color\n                          }}\n                        ></div>\n                        <div className=\"percent-class left-absolute\">\n                          {res.val}%\n                        </div>\n                        <div className=\"flex1\"></div>\n                      </div>\n                      <div className=\"colB\"></div>\n                    </div>\n                  );\n                }\n              })}\n          </div>\n        </div>\n\n        <div className=\"legend\">\n          {sectorData.current !== null &&\n            sectorData.map((res, i) => {\n              return (\n                <div\n                  key={`legend-${i}`}\n                  className=\"flex-row-center narrow-row-height\"\n                >\n                  <div\n                    className=\"square\"\n                    style={{\n                      backgroundColor: res.color\n                    }}\n                  ></div>\n                  <div className=\"title cursor-pointer\">{res.name}</div>\n                </div>\n              );\n            })}\n        </div>\n      </div>\n    </article>\n  );\n}\n\nexport default InsightAnalyticsCard;\n"]},"metadata":{},"sourceType":"module"}