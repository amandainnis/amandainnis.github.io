{"ast":null,"code":"var _jsxFileName = \"/Users/amandainnis/ReactProjects/react-site/portfolio/src/components/reusable/pie.js\";\nimport React, { createRef, useState } from \"react\";\nimport * as d3 from \"../../node_modules/d3\";\nchartData = [{\n  label: \"Seltzer\",\n  value: 5,\n  tooltipValue: \"Seltzer is great\"\n}, {\n  label: \"Seltzer\",\n  value: 5,\n  tooltipValue: \"Seltzer is great\"\n}, {\n  label: \"Grapefruit Juice\",\n  value: 2,\n  tooltipValue: \"Grapefruit Juice is healthy\"\n}, {\n  label: \"Pellegrino\",\n  value: 9,\n  tooltipValue: \"Pellegrino is best\"\n}, {\n  label: \"Pellegrino\",\n  value: 9,\n  tooltipValue: \"Pellegrino is best\"\n}];\nexport default function Pie(props) {\n  const chart = createRef();\n  const chartContainer = createRef();\n  containerElement = chart.current;\n  console.log(containerElement);\n\n  function renderChart() {\n    if (chartData && chartData.length > 0) {\n      containerElement = chart.current; // this has to be there so chart doesnt render multiple times\n\n      containerElement.innerHTML = \"\"; // consts work better with angular/d3 than setting up variables (this.variable) inside the component\n      // the borderParent const is necessary for anchoring the different colored border classes that get attached on hover\n\n      const tooltip = d3.select(this.containerElement).append(\"div\").attr(\"class\", \"d3-tooltip\");\n      const borderParent = tooltip.append(\"div\").attr(\"class\", \"border-parent\");\n      const d3InnerTooltip = tooltip.append(\"div\").attr(\"class\", \"d3-tooltip-inner\");\n      d3InnerTooltip.append(\"div\").attr(\"class\", \"d3-title\");\n      d3InnerTooltip.append(\"div\").attr(\"class\", \"amount\");\n      this.vis = d3.select(this.containerElement).append(\"svg:svg\").attr(\"preserveAspectRatio\", \"xMinYMin meet\") // the 300 and 300 represents height and width, viewbox is necessary for responsive sizing\n      .attr(\"viewBox\", \"0 0 200 200\").data([this._chartData]).attr(\"class\", \"mamaSVG\").append(\"g\").attr(\"class\", \"bigSVG\") // move the center of the pie chart from 0, 0 to radius, radius\n      .attr(\"transform\", \"translate(\" + this.r + \",\" + this.r + \")\");\n      const arc = d3.arc().outerRadius(this.r).innerRadius(40); // this will create arc data for us given a list of values\n\n      const pie = d3.pie() // we must tell it out to access the value of each element in our data array\n      .value(function (d) {\n        //console.log(d[values]);\n        return parseFloat(d[values]);\n      }); // this selects all <g> elements with class slice (there aren't any yet)\n\n      const arcs = this.vis.selectAll(\"g\").attr(\"class\", \"slice\") // associate the generated pie data (an array of arcs, each having startAngle, endAngle and value properties)\n      // creating a <g> for every object in the data array\n      .data(pie).enter();\n      arcs.append(\"svg:path\").attr(\"class\", \"arcs\") // set the color for each slice to be chosen from the color function defined above\n      .attr(\"fill\", (d, i) => {\n        // console.log(d.data[colors]);\n        return d.data.color;\n      }) // this creates the actual SVG path using the associated data (pie) with the arc drawing function\n      .attr(\"d\", arc) // .attr('id', function (d) {\n      //   return (d.data[labels]).replace(/\\s/g, '');\n      // })\n      .text(function (d) {\n        return d;\n      }).on(\"mouseenter\", function (d, i) {\n        const title = d.data[labels];\n        const total = d.data[toolTipValues]; // let border = d.data[borderClass];\n\n        borderParent.attr(\"background-color\", d.data.color);\n        borderParent.style(\"width\", \"4px\");\n        d3InnerTooltip.select(\".d3-title\").text(d.data[labels]);\n        d3InnerTooltip.select(\".amount\").text(d.data[toolTipValues]);\n        tooltip.style(\"display\", \"flex\");\n        tooltip.style(\"opacity\", 1);\n      }).on(\"mousemove\", function (d) {\n        tooltip.style(\"top\", d3.event.clientY + 30 + \"px\").style(\"left\", d3.event.clientX - 25 + \"px\");\n      });\n      const outervis = d3.select(this.chartContainer.nativeElement).on(\"mouseleave\", function () {\n        tooltip.style(\"opacity\", 0);\n      });\n    }\n  }\n\n  return React.createElement(\"div\", {\n    className: \"pie-chart svg-container\",\n    ref: chartContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    ref: chart,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/amandainnis/ReactProjects/react-site/portfolio/src/components/reusable/pie.js"],"names":["React","createRef","useState","d3","chartData","label","value","tooltipValue","Pie","props","chart","chartContainer","containerElement","current","console","log","renderChart","length","innerHTML","tooltip","select","append","attr","borderParent","d3InnerTooltip","vis","data","_chartData","r","arc","outerRadius","innerRadius","pie","d","parseFloat","values","arcs","selectAll","enter","i","color","text","on","title","labels","total","toolTipValues","style","event","clientY","clientX","outervis","nativeElement"],"mappings":"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","sourcesContent":["import React, { createRef, useState } from \"react\";\nimport * as d3 from \"../../node_modules/d3\";\nchartData = [\n  { label: \"Seltzer\", value: 5, tooltipValue: \"Seltzer is great\" },\n  { label: \"Seltzer\", value: 5, tooltipValue: \"Seltzer is great\" },\n  {\n    label: \"Grapefruit Juice\",\n    value: 2,\n    tooltipValue: \"Grapefruit Juice is healthy\"\n  },\n  { label: \"Pellegrino\", value: 9, tooltipValue: \"Pellegrino is best\" },\n  { label: \"Pellegrino\", value: 9, tooltipValue: \"Pellegrino is best\" }\n];\nexport default function Pie(props) {\n  const chart = createRef();\n  const chartContainer = createRef();\n\n  containerElement = chart.current;\n  console.log(containerElement);\n  function renderChart() {\n    if (chartData && chartData.length > 0) {\n      containerElement = chart.current;\n      // this has to be there so chart doesnt render multiple times\n      containerElement.innerHTML = \"\";\n      // consts work better with angular/d3 than setting up variables (this.variable) inside the component\n      // the borderParent const is necessary for anchoring the different colored border classes that get attached on hover\n      const tooltip = d3\n        .select(this.containerElement)\n        .append(\"div\")\n        .attr(\"class\", \"d3-tooltip\");\n      const borderParent = tooltip.append(\"div\").attr(\"class\", \"border-parent\");\n      const d3InnerTooltip = tooltip\n        .append(\"div\")\n        .attr(\"class\", \"d3-tooltip-inner\");\n      d3InnerTooltip.append(\"div\").attr(\"class\", \"d3-title\");\n      d3InnerTooltip.append(\"div\").attr(\"class\", \"amount\");\n\n      this.vis = d3\n        .select(this.containerElement)\n        .append(\"svg:svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        // the 300 and 300 represents height and width, viewbox is necessary for responsive sizing\n        .attr(\"viewBox\", \"0 0 200 200\")\n        .data([this._chartData])\n        .attr(\"class\", \"mamaSVG\")\n        .append(\"g\")\n        .attr(\"class\", \"bigSVG\")\n        // move the center of the pie chart from 0, 0 to radius, radius\n        .attr(\"transform\", \"translate(\" + this.r + \",\" + this.r + \")\");\n\n      const arc = d3\n        .arc()\n        .outerRadius(this.r)\n        .innerRadius(40);\n\n      // this will create arc data for us given a list of values\n      const pie = d3\n        .pie()\n        // we must tell it out to access the value of each element in our data array\n        .value(function(d: any) {\n          //console.log(d[values]);\n          return parseFloat(d[values]);\n        });\n      // this selects all <g> elements with class slice (there aren't any yet)\n\n      const arcs = this.vis\n        .selectAll(\"g\")\n        .attr(\"class\", \"slice\")\n        // associate the generated pie data (an array of arcs, each having startAngle, endAngle and value properties)\n        // creating a <g> for every object in the data array\n        .data(pie)\n        .enter();\n\n      arcs\n        .append(\"svg:path\")\n        .attr(\"class\", \"arcs\")\n        // set the color for each slice to be chosen from the color function defined above\n        .attr(\"fill\", (d: any, i: any) => {\n          // console.log(d.data[colors]);\n          return d.data.color;\n        })\n        // this creates the actual SVG path using the associated data (pie) with the arc drawing function\n        .attr(\"d\", arc)\n        // .attr('id', function (d) {\n        //   return (d.data[labels]).replace(/\\s/g, '');\n        // })\n        .text(function(d) {\n          return d;\n        })\n\n        .on(\"mouseenter\", function(d, i) {\n          const title = d.data[labels];\n          const total = d.data[toolTipValues];\n          // let border = d.data[borderClass];\n          borderParent.attr(\"background-color\", d.data.color);\n          borderParent.style(\"width\", \"4px\");\n\n          d3InnerTooltip.select(\".d3-title\").text(d.data[labels]);\n          d3InnerTooltip.select(\".amount\").text(d.data[toolTipValues]);\n          tooltip.style(\"display\", \"flex\");\n          tooltip.style(\"opacity\", 1);\n        })\n        .on(\"mousemove\", function(d) {\n          tooltip\n            .style(\"top\", d3.event.clientY + 30 + \"px\")\n            .style(\"left\", d3.event.clientX - 25 + \"px\");\n        });\n\n      const outervis = d3\n        .select(this.chartContainer.nativeElement)\n        .on(\"mouseleave\", function() {\n          tooltip.style(\"opacity\", 0);\n        });\n    }\n  }\n  return (\n    <div className=\"pie-chart svg-container\" ref={chartContainer}>\n      <div ref={chart}></div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}