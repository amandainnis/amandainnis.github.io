{"ast":null,"code":"export function debounce(func, wait, immediate) {\n  var DEtimeout;\n  return function () {\n    var DEcontext = this,\n        DEargs = arguments;\n\n    var DElater = function () {\n      DEtimeout = null;\n\n      if (!immediate) {\n        func.apply(DEcontext, DEargs);\n      }\n    };\n\n    var DEcallNow = immediate && !DEtimeout;\n    clearTimeout(DEtimeout);\n    DEtimeout = setTimeout(DElater, wait);\n\n    if (DEcallNow) {\n      func.apply(DEcontext, DEargs);\n    }\n  };\n}\nexport function mergeSort(list) {\n  const len = list.length; // an array of length == 1 is technically a sorted list\n\n  if (len == 1) {\n    return list;\n  } // get mid item\n\n\n  const middleIndex = Math.ceil(len / 2); // split current list into two: left and right list\n\n  let leftList = list.slice(0, middleIndex);\n  let rightList = list.slice(middleIndex, len); // console.log(\"leftList1\", leftList);\n  // console.log(\"rightList1\", rightList);\n\n  leftList = mergeSort(leftList);\n  rightList = mergeSort(rightList); // console.log(\"leftListRemix\", leftList);\n  // console.log(\"rightListRemix\", rightList);\n\n  let newList = merge(leftList, rightList); // console.log(\"newList\", newList);\n\n  debugger;\n  return newList;\n} // Solve the sub-problems and merge them together\n\nexport function merge(leftList, rightList) {\n  const sorted = [];\n\n  while (leftList.length > 0 && rightList.length > 0) {\n    let leftItem = leftList[0];\n\n    if (typeof leftItem === \"string\") {\n      console.log(\"i am leftitem before parse\", leftItem);\n      leftItem = leftItem.replace(/\\%/, \"\");\n      leftItem = parseFloat(leftItem);\n    }\n\n    console.log(\"i am leftitem\", leftItem);\n    let rightItem = rightList[0];\n\n    if (typeof rightItem === \"string\") {\n      console.log(\"i am leftitem before parse\", leftItem);\n      rightItem = rightItem.replace(/\\%/, \"\");\n      rightItem = parseFloat(rightItem);\n    }\n\n    if (leftItem < rightItem) {\n      sorted.push(rightItem);\n      rightList.shift();\n      console.log(\"leftItem is less leftItem, rightItem\", leftItem, rightItem);\n    } else {\n      sorted.push(leftItem);\n      leftList.shift();\n    }\n  } // if left list has items, add what is left to the results\n\n\n  while (leftList.length !== 0) {\n    let temp = leftList[0]; // console.log(\"temp b4 replace\", temp);\n    // temp = temp.replace(/\\%/, \"\");\n    // temp = parseFloat(temp);\n\n    sorted.push(temp);\n    console.log(\"leftList[0]\", temp);\n    leftList.shift();\n  } // if right list has items, add what is left to the results\n\n\n  while (rightList.length !== 0) {\n    let temp = rightList[0]; // temp = temp.replace(/\\%/, \"\");\n    // temp = parseFloat(temp);\n\n    sorted.push(temp);\n    console.log(\"rightList[0]\", temp);\n    rightList.shift();\n  }\n\n  console.log(\"i am sorted\", sorted);\n  debugger; // merge the left and right list\n\n  return sorted;\n}\nvar items = [5, 3, 7, 6, 2, 9];\n\nfunction swap(items, leftIndex, rightIndex) {\n  var temp = items[leftIndex];\n  items[leftIndex] = items[rightIndex];\n  items[rightIndex] = temp;\n}\n\nfunction partition(items, left, right) {\n  var pivot = items[Math.floor((right + left) / 2)],\n      //middle element\n  i = left,\n      //left pointer\n  j = right; //right pointer\n\n  while (i <= j) {\n    while (items[i] < pivot) {\n      i++;\n    }\n\n    while (items[j] > pivot) {\n      j--;\n    }\n\n    if (i <= j) {\n      swap(items, i, j); //sawpping two elements\n\n      i++;\n      j--;\n    }\n  }\n\n  return i;\n}\n\nfunction quickSort(items, left, right) {\n  var index;\n\n  if (items.length > 1) {\n    index = partition(items, left, right); //index returned from partition\n\n    if (left < index - 1) {\n      //more elements on the left side of the pivot\n      quickSort(items, left, index - 1);\n    }\n\n    if (index < right) {\n      //more elements on the right side of the pivot\n      quickSort(items, index, right);\n    }\n  }\n\n  return items;\n} // first call to quick sort\n\n\nvar sortedArray = quickSort(items, 0, items.length - 1);","map":{"version":3,"sources":["/Users/amandainnis/ReactProjects/board-app/src/components/reusable/common.js"],"names":["debounce","func","wait","immediate","DEtimeout","DEcontext","DEargs","arguments","DElater","apply","DEcallNow","clearTimeout","setTimeout","mergeSort","list","len","length","middleIndex","Math","ceil","leftList","slice","rightList","newList","merge","sorted","leftItem","console","log","replace","parseFloat","rightItem","push","shift","temp","items","swap","leftIndex","rightIndex","partition","left","right","pivot","floor","i","j","quickSort","index","sortedArray"],"mappings":"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","sourcesContent":["export function debounce(func, wait, immediate) {\n  var DEtimeout;\n  return function() {\n    var DEcontext = this,\n      DEargs = arguments;\n    var DElater = function() {\n      DEtimeout = null;\n      if (!immediate) {\n        func.apply(DEcontext, DEargs);\n      }\n    };\n    var DEcallNow = immediate && !DEtimeout;\n    clearTimeout(DEtimeout);\n    DEtimeout = setTimeout(DElater, wait);\n    if (DEcallNow) {\n      func.apply(DEcontext, DEargs);\n    }\n  };\n}\n\nexport function mergeSort(list) {\n  const len = list.length;\n  // an array of length == 1 is technically a sorted list\n  if (len == 1) {\n    return list;\n  }\n\n  // get mid item\n  const middleIndex = Math.ceil(len / 2);\n  // split current list into two: left and right list\n  let leftList = list.slice(0, middleIndex);\n  let rightList = list.slice(middleIndex, len);\n  // console.log(\"leftList1\", leftList);\n  // console.log(\"rightList1\", rightList);\n  leftList = mergeSort(leftList);\n  rightList = mergeSort(rightList);\n  // console.log(\"leftListRemix\", leftList);\n  // console.log(\"rightListRemix\", rightList);\n  let newList = merge(leftList, rightList);\n  // console.log(\"newList\", newList);\n  debugger;\n  return newList;\n}\n\n// Solve the sub-problems and merge them together\nexport function merge(leftList, rightList) {\n  const sorted = [];\n  while (leftList.length > 0 && rightList.length > 0) {\n    let leftItem = leftList[0];\n    if (typeof leftItem === \"string\") {\n      console.log(\"i am leftitem before parse\", leftItem);\n      leftItem = leftItem.replace(/\\%/, \"\");\n      leftItem = parseFloat(leftItem);\n    }\n\n    console.log(\"i am leftitem\", leftItem);\n    let rightItem = rightList[0];\n    if (typeof rightItem === \"string\") {\n      console.log(\"i am leftitem before parse\", leftItem);\n      rightItem = rightItem.replace(/\\%/, \"\");\n      rightItem = parseFloat(rightItem);\n    }\n    if (leftItem < rightItem) {\n      sorted.push(rightItem);\n      rightList.shift();\n      console.log(\"leftItem is less leftItem, rightItem\", leftItem, rightItem);\n    } else {\n      sorted.push(leftItem);\n      leftList.shift();\n    }\n  }\n\n  // if left list has items, add what is left to the results\n  while (leftList.length !== 0) {\n    let temp = leftList[0];\n    // console.log(\"temp b4 replace\", temp);\n    // temp = temp.replace(/\\%/, \"\");\n\n    // temp = parseFloat(temp);\n    sorted.push(temp);\n    console.log(\"leftList[0]\", temp);\n    leftList.shift();\n  }\n\n  // if right list has items, add what is left to the results\n  while (rightList.length !== 0) {\n    let temp = rightList[0];\n    // temp = temp.replace(/\\%/, \"\");\n    // temp = parseFloat(temp);\n    sorted.push(temp);\n    console.log(\"rightList[0]\", temp);\n\n    rightList.shift();\n  }\n  console.log(\"i am sorted\", sorted);\n  debugger;\n  // merge the left and right list\n  return sorted;\n}\n\nvar items = [5, 3, 7, 6, 2, 9];\nfunction swap(items, leftIndex, rightIndex) {\n  var temp = items[leftIndex];\n  items[leftIndex] = items[rightIndex];\n  items[rightIndex] = temp;\n}\nfunction partition(items, left, right) {\n  var pivot = items[Math.floor((right + left) / 2)], //middle element\n    i = left, //left pointer\n    j = right; //right pointer\n  while (i <= j) {\n    while (items[i] < pivot) {\n      i++;\n    }\n    while (items[j] > pivot) {\n      j--;\n    }\n    if (i <= j) {\n      swap(items, i, j); //sawpping two elements\n      i++;\n      j--;\n    }\n  }\n  return i;\n}\n\nfunction quickSort(items, left, right) {\n  var index;\n  if (items.length > 1) {\n    index = partition(items, left, right); //index returned from partition\n    if (left < index - 1) {\n      //more elements on the left side of the pivot\n      quickSort(items, left, index - 1);\n    }\n    if (index < right) {\n      //more elements on the right side of the pivot\n      quickSort(items, index, right);\n    }\n  }\n  return items;\n}\n// first call to quick sort\nvar sortedArray = quickSort(items, 0, items.length - 1);\n"]},"metadata":{},"sourceType":"module"}