{"ast":null,"code":"import _defineProperty from \"/Users/amandainnis/ReactProjects/react-site/portfolio/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/amandainnis/ReactProjects/react-site/portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/amandainnis/ReactProjects/react-site/portfolio/src/components/forms/MemeGenerator.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\n\nfunction MemeGenerator() {\n  let memeDDConst;\n  this.memeInputRef = React.createRef();\n  this.ddRef = React.createRef();\n  const memeApi = \"https://api.imgflip.com/get_memes\";\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        allMemeImgs = _useState2[0],\n        setAllMemeImgs = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        memeDDFiltered = _useState4[0],\n        setMemeDDFiltered = _useState4[1];\n\n  const _useState5 = useState({}),\n        _useState6 = _slicedToArray(_useState5, 2),\n        memeImg = _useState6[0],\n        setMemeImg = _useState6[1];\n\n  const _useState7 = useState(\"\"),\n        _useState8 = _slicedToArray(_useState7, 2),\n        topText = _useState8[0],\n        setTopText = _useState8[1];\n\n  const _useState9 = useState(\"\"),\n        _useState10 = _slicedToArray(_useState9, 2),\n        bottomText = _useState10[0],\n        setBottomText = _useState10[1];\n\n  const _useState11 = useState(false),\n        _useState12 = _slicedToArray(_useState11, 2),\n        memeDDVisible = _useState12[0],\n        setMemeDDVisible = _useState12[1];\n\n  const _useState13 = useState([]),\n        _useState14 = _slicedToArray(_useState13, 2),\n        savedMemes = _useState14[0],\n        setSavedMemes = _useState14[1];\n\n  function handleMemeInput(e) {\n    let myResults; // this.setState({\n    //   memeInput: e.target.value\n    // });\n\n    console.log(memeDDConst);\n\n    if (e !== null || e !== \"\") {\n      myResults = memeDDConst.filter(function (myKey) {\n        return myKey[\"name\"].toLowerCase().startsWith(e.target.value.toLowerCase());\n      });\n      console.log(myResults);\n      setMemeDDFiltered(myResults);\n      setMemeInput(e.target.value); // this.ddRef.current.childNodes[0].focus();\n      // console.log(this.ddRef.current);\n    }\n  }\n\n  function eraseInput() {\n    console.log(this.memeInputRef);\n    this.memeInputRef.current.focus();\n    setMemeDDFiltered(memeDDConst);\n    setMemeInput(\"\");\n    setMemeDDVisible(true);\n  } //   handleKeyUp(e) {\n  //     console.log(e.which);\n  //     this.setState({\n  //       memeDDVisible: true\n  //     });\n  //     // if (e.which === 40) {\n  //     //   this.ddRef.current.children[ddListIndex].focus();\n  //     // }\n  //   }\n\n\n  function handleInputClick() {\n    setMemeDDFiltered(memeDDConst);\n    setMemeDDVisible(true);\n  }\n\n  function handleDDClick(val) {\n    console.log(val);\n    setMemeDDVisible(false);\n    setMemeInput(val.name);\n    setMemeImg(val);\n  }\n\n  function getAllMemes(memes) {\n    setAllMemeImgs(memes);\n    setMemeImg(memes[0]);\n    memeDDConst = memes; // console.log(this.state);\n    // console.log(allMemeImgs[0]);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault(); // this.setState(prevState => {\n    //   formData = prevState.firstName;\n    //   return {\n    //     firstName: \"\",\n    //     lastName: \"\",\n    //     checkboxData: checkboxData,\n    //     radioData: radioData\n    //   };\n    // });\n    // return formData;\n  }\n\n  function saveMemes(e) {\n    e.preventDefault();\n    this.setState(prevState => {\n      console.log(prevState);\n\n      let newList = _objectSpread({}, prevState.savedMemes);\n\n      console.log(newList); //   newList.push({\n      //     topText: topText,\n      //     bottomText: bottomText,\n      //     memeImg: memeImg[\"url\"],\n      //     name: memeImg[\"name\"]\n      //   });\n\n      return {\n        savedMemes: newList\n      };\n    }); // console.log(this.state);\n  }\n\n  function componentDidMount() {\n    fetch(memeApi).then(res => res.json()).then(res => {\n      console.log(res.data.memes);\n      getAllMemes(res.data.memes);\n    });\n  }\n\n  componentDidMount();\n  return React.createElement(\"article\", {\n    className: \"portfolio-card\",\n    style: {\n      backgroundColor: \"var(--background-main)\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"text-section\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \"MemeGenerator\")), React.createElement(\"form\", {\n    onSubmit: e => handleSubmit(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"input-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"relative\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"clearable\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    ref: memeInputRef,\n    className: \"input-style\",\n    type: \"text\",\n    placeholder: \"search meme\",\n    name: \"memeInput\",\n    autoComplete: \"off\",\n    value: state.memeInput,\n    onChange: e => {\n      handleMemeInput(e);\n    },\n    onClick: () => {\n      handleInputClick();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }), memeInput !== \"\" ? React.createElement(\"span\", {\n    className: \"clearable-clear mdi mdi-close\",\n    onClick: () => {\n      eraseInput();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }) : null, memeDDVisible && React.createElement(\"div\", {\n    className: \"dropdown-container\",\n    ref: ddRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, memeDDFiltered !== \"\" && memeDDFiltered.map((val, i) => {\n    return React.createElement(\"button\", {\n      key: i,\n      onClick: e => {\n        handleDDClick(val);\n      } // value={this.selectedTicker}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"meme-dd-div\",\n      style: {\n        backgroundImage: \"url(\".concat(val[\"url\"], \")\")\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), \"- \", val.name);\n  }))))), React.createElement(\"div\", {\n    className: \"mt-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"input-group mt-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"label-style\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, \"Top Text\"), React.createElement(\"input\", {\n    className: \"input-style\",\n    name: \"topText\",\n    value: topText,\n    type: \"text\",\n    autoComplete: \"off\",\n    onChange: e => setTopText(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"input-group mt-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"label-style\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, \"Bottom Text\"), React.createElement(\"input\", {\n    className: \"input-style\",\n    name: \"bottomText\",\n    value: bottomText,\n    type: \"text\",\n    autoComplete: \"off\",\n    onChange: e => setBottomText(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"meme-div mt-2\",\n    style: {\n      backgroundImage: \"url(\".concat(memeImg[\"url\"], \")\")\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"meme-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, topText), React.createElement(\"div\", {\n    className: \"meme-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, bottomText)), React.createElement(\"small\", {\n    className: \"mt-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, \" \", memeImg[\"name\"])), React.createElement(\"div\", {\n    className: \"mt-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"outline-btn accent\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, \"save\"))));\n}\n\nexport default MemeGenerator;","map":{"version":3,"sources":["/Users/amandainnis/ReactProjects/react-site/portfolio/src/components/forms/MemeGenerator.js"],"names":["React","useState","MemeGenerator","memeDDConst","memeInputRef","createRef","ddRef","memeApi","allMemeImgs","setAllMemeImgs","memeDDFiltered","setMemeDDFiltered","memeImg","setMemeImg","topText","setTopText","bottomText","setBottomText","memeDDVisible","setMemeDDVisible","savedMemes","setSavedMemes","handleMemeInput","e","myResults","console","log","filter","myKey","toLowerCase","startsWith","target","value","setMemeInput","eraseInput","current","focus","handleInputClick","handleDDClick","val","name","getAllMemes","memes","handleSubmit","preventDefault","saveMemes","setState","prevState","newList","componentDidMount","fetch","then","res","json","data","backgroundColor","state","memeInput","map","i","backgroundImage"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,SAASC,aAAT,GAAyB;AACvB,MAAIC,WAAJ;AACA,OAAKC,YAAL,GAAoBJ,KAAK,CAACK,SAAN,EAApB;AACA,OAAKC,KAAL,GAAaN,KAAK,CAACK,SAAN,EAAb;AACA,QAAME,OAAO,GAAG,mCAAhB;;AAJuB,oBAMeN,QAAQ,CAAC,EAAD,CANvB;AAAA;AAAA,QAMhBO,WANgB;AAAA,QAMHC,cANG;;AAAA,qBAOqBR,QAAQ,CAAC,EAAD,CAP7B;AAAA;AAAA,QAOhBS,cAPgB;AAAA,QAOAC,iBAPA;;AAAA,qBAQOV,QAAQ,CAAC,EAAD,CARf;AAAA;AAAA,QAQhBW,OARgB;AAAA,QAQPC,UARO;;AAAA,qBASOZ,QAAQ,CAAC,EAAD,CATf;AAAA;AAAA,QAShBa,OATgB;AAAA,QASPC,UATO;;AAAA,qBAUad,QAAQ,CAAC,EAAD,CAVrB;AAAA;AAAA,QAUhBe,UAVgB;AAAA,QAUJC,aAVI;;AAAA,sBAWmBhB,QAAQ,CAAC,KAAD,CAX3B;AAAA;AAAA,QAWhBiB,aAXgB;AAAA,QAWDC,gBAXC;;AAAA,sBAYalB,QAAQ,CAAC,EAAD,CAZrB;AAAA;AAAA,QAYhBmB,UAZgB;AAAA,QAYJC,aAZI;;AAcvB,WAASC,eAAT,CAAyBC,CAAzB,EAA4B;AAC1B,QAAIC,SAAJ,CAD0B,CAE1B;AACA;AACA;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYvB,WAAZ;;AACA,QAAIoB,CAAC,KAAK,IAAN,IAAcA,CAAC,KAAK,EAAxB,EAA4B;AAC1BC,MAAAA,SAAS,GAAGrB,WAAW,CAACwB,MAAZ,CAAmB,UAASC,KAAT,EAAgB;AAC7C,eAAOA,KAAK,CAAC,MAAD,CAAL,CACJC,WADI,GAEJC,UAFI,CAEOP,CAAC,CAACQ,MAAF,CAASC,KAAT,CAAeH,WAAf,EAFP,CAAP;AAGD,OAJW,CAAZ;AAKAJ,MAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACAb,MAAAA,iBAAiB,CAACa,SAAD,CAAjB;AACAS,MAAAA,YAAY,CAACV,CAAC,CAACQ,MAAF,CAASC,KAAV,CAAZ,CAR0B,CAU1B;AACA;AACD;AACF;;AACD,WAASE,UAAT,GAAsB;AACpBT,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKtB,YAAjB;AACA,SAAKA,YAAL,CAAkB+B,OAAlB,CAA0BC,KAA1B;AACAzB,IAAAA,iBAAiB,CAACR,WAAD,CAAjB;AACA8B,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACAd,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,GAxCsB,CAyCvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,WAASkB,gBAAT,GAA4B;AAC1B1B,IAAAA,iBAAiB,CAACR,WAAD,CAAjB;AACAgB,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD;;AACD,WAASmB,aAAT,CAAuBC,GAAvB,EAA4B;AAC1Bd,IAAAA,OAAO,CAACC,GAAR,CAAYa,GAAZ;AACApB,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAc,IAAAA,YAAY,CAACM,GAAG,CAACC,IAAL,CAAZ;AACA3B,IAAAA,UAAU,CAAC0B,GAAD,CAAV;AACD;;AACD,WAASE,WAAT,CAAqBC,KAArB,EAA4B;AAC1BjC,IAAAA,cAAc,CAACiC,KAAD,CAAd;AACA7B,IAAAA,UAAU,CAAC6B,KAAK,CAAC,CAAD,CAAN,CAAV;AAEAvC,IAAAA,WAAW,GAAGuC,KAAd,CAJ0B,CAK1B;AACA;AACD;;AACD,WAASC,YAAT,CAAsBpB,CAAtB,EAAyB;AACvBA,IAAAA,CAAC,CAACqB,cAAF,GADuB,CAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AACD,WAASC,SAAT,CAAmBtB,CAAnB,EAAsB;AACpBA,IAAAA,CAAC,CAACqB,cAAF;AACA,SAAKE,QAAL,CAAcC,SAAS,IAAI;AACzBtB,MAAAA,OAAO,CAACC,GAAR,CAAYqB,SAAZ;;AACA,UAAIC,OAAO,qBAAQD,SAAS,CAAC3B,UAAlB,CAAX;;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYsB,OAAZ,EAHyB,CAIzB;AACA;AACA;AACA;AACA;AACA;;AACA,aAAO;AACL5B,QAAAA,UAAU,EAAE4B;AADP,OAAP;AAGD,KAbD,EAFoB,CAgBpB;AACD;;AACD,WAASC,iBAAT,GAA6B;AAC3BC,IAAAA,KAAK,CAAC3C,OAAD,CAAL,CACG4C,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQC,GAAG,IAAI;AACX3B,MAAAA,OAAO,CAACC,GAAR,CAAY0B,GAAG,CAACE,IAAJ,CAASZ,KAArB;AAEAD,MAAAA,WAAW,CAACW,GAAG,CAACE,IAAJ,CAASZ,KAAV,CAAX;AACD,KANH;AAOD;;AACDO,EAAAA,iBAAiB;AACjB,SACE;AACE,IAAA,SAAS,EAAC,gBADZ;AAEE,IAAA,KAAK,EAAE;AAAEM,MAAAA,eAAe,EAAE;AAAnB,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,CAJF,EAQE;AAAM,IAAA,QAAQ,EAAEhC,CAAC,IAAIoB,YAAY,CAACpB,CAAD,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,GAAG,EAAEnB,YADP;AAEE,IAAA,SAAS,EAAC,aAFZ;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,WAAW,EAAC,aAJd;AAKE,IAAA,IAAI,EAAC,WALP;AAME,IAAA,YAAY,EAAC,KANf;AAOE,IAAA,KAAK,EAAEoD,KAAK,CAACC,SAPf;AAQE,IAAA,QAAQ,EAAElC,CAAC,IAAI;AACbD,MAAAA,eAAe,CAACC,CAAD,CAAf;AACD,KAVH;AAWE,IAAA,OAAO,EAAE,MAAM;AACbc,MAAAA,gBAAgB;AACjB,KAbH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAiBGoB,SAAS,KAAK,EAAd,GACC;AACE,IAAA,SAAS,EAAC,+BADZ;AAEE,IAAA,OAAO,EAAE,MAAM;AACbvB,MAAAA,UAAU;AACX,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAOG,IAxBN,EAyBGhB,aAAa,IACZ;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAoC,IAAA,GAAG,EAAEZ,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,cAAc,KAAK,EAAnB,IACCA,cAAc,CAACgD,GAAf,CAAmB,CAACnB,GAAD,EAAMoB,CAAN,KAAY;AAC7B,WACE;AACE,MAAA,GAAG,EAAEA,CADP;AAEE,MAAA,OAAO,EAAEpC,CAAC,IAAI;AACZe,QAAAA,aAAa,CAACC,GAAD,CAAb;AACD,OAJH,CAKE;AALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOE;AACE,MAAA,SAAS,EAAC,aADZ;AAEE,MAAA,KAAK,EAAE;AACLqB,QAAAA,eAAe,gBAASrB,GAAG,CAAC,KAAD,CAAZ;AADV,OAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,QAaKA,GAAG,CAACC,IAbT,CADF;AAiBD,GAlBD,CAFJ,CA1BJ,CADF,CADF,CADF,EAuDE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AACE,IAAA,SAAS,EAAC,aADZ;AAEE,IAAA,IAAI,EAAC,SAFP;AAGE,IAAA,KAAK,EAAE1B,OAHT;AAIE,IAAA,IAAI,EAAC,MAJP;AAKE,IAAA,YAAY,EAAC,KALf;AAME,IAAA,QAAQ,EAAES,CAAC,IAAIR,UAAU,CAACQ,CAAC,CAACQ,MAAF,CAASC,KAAV,CAN3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,EAYE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE;AACE,IAAA,SAAS,EAAC,aADZ;AAEE,IAAA,IAAI,EAAC,YAFP;AAGE,IAAA,KAAK,EAAEhB,UAHT;AAIE,IAAA,IAAI,EAAC,MAJP;AAKE,IAAA,YAAY,EAAC,KALf;AAME,IAAA,QAAQ,EAAEO,CAAC,IAAIN,aAAa,CAACM,CAAC,CAACQ,MAAF,CAASC,KAAV,CAN9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAZF,EAuBE;AACE,IAAA,SAAS,EAAC,eADZ;AAEE,IAAA,KAAK,EAAE;AAAE4B,MAAAA,eAAe,gBAAShD,OAAO,CAAC,KAAD,CAAhB;AAAjB,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BE,OAA5B,CAJF,EAKE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BE,UAA5B,CALF,CAvBF,EA8BE;AAAO,IAAA,SAAS,EAAC,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA0BJ,OAAO,CAAC,MAAD,CAAjC,CA9BF,CAvDF,EAuFE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,SAAS,EAAC,oBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CAvFF,CARF,CADF;AAsGD;;AAED,eAAeV,aAAf","sourcesContent":["import React, { useState } from \"react\";\n\nfunction MemeGenerator() {\n  let memeDDConst;\n  this.memeInputRef = React.createRef();\n  this.ddRef = React.createRef();\n  const memeApi = \"https://api.imgflip.com/get_memes\";\n\n  const [allMemeImgs, setAllMemeImgs] = useState([]);\n  const [memeDDFiltered, setMemeDDFiltered] = useState([]);\n  const [memeImg, setMemeImg] = useState({});\n  const [topText, setTopText] = useState(\"\");\n  const [bottomText, setBottomText] = useState(\"\");\n  const [memeDDVisible, setMemeDDVisible] = useState(false);\n  const [savedMemes, setSavedMemes] = useState([]);\n\n  function handleMemeInput(e) {\n    let myResults;\n    // this.setState({\n    //   memeInput: e.target.value\n    // });\n    console.log(memeDDConst);\n    if (e !== null || e !== \"\") {\n      myResults = memeDDConst.filter(function(myKey) {\n        return myKey[\"name\"]\n          .toLowerCase()\n          .startsWith(e.target.value.toLowerCase());\n      });\n      console.log(myResults);\n      setMemeDDFiltered(myResults);\n      setMemeInput(e.target.value);\n\n      // this.ddRef.current.childNodes[0].focus();\n      // console.log(this.ddRef.current);\n    }\n  }\n  function eraseInput() {\n    console.log(this.memeInputRef);\n    this.memeInputRef.current.focus();\n    setMemeDDFiltered(memeDDConst);\n    setMemeInput(\"\");\n    setMemeDDVisible(true);\n  }\n  //   handleKeyUp(e) {\n  //     console.log(e.which);\n  //     this.setState({\n  //       memeDDVisible: true\n  //     });\n  //     // if (e.which === 40) {\n  //     //   this.ddRef.current.children[ddListIndex].focus();\n  //     // }\n  //   }\n  function handleInputClick() {\n    setMemeDDFiltered(memeDDConst);\n    setMemeDDVisible(true);\n  }\n  function handleDDClick(val) {\n    console.log(val);\n    setMemeDDVisible(false);\n    setMemeInput(val.name);\n    setMemeImg(val);\n  }\n  function getAllMemes(memes) {\n    setAllMemeImgs(memes);\n    setMemeImg(memes[0]);\n\n    memeDDConst = memes;\n    // console.log(this.state);\n    // console.log(allMemeImgs[0]);\n  }\n  function handleSubmit(e) {\n    e.preventDefault();\n    // this.setState(prevState => {\n    //   formData = prevState.firstName;\n    //   return {\n    //     firstName: \"\",\n    //     lastName: \"\",\n    //     checkboxData: checkboxData,\n    //     radioData: radioData\n    //   };\n    // });\n    // return formData;\n  }\n  function saveMemes(e) {\n    e.preventDefault();\n    this.setState(prevState => {\n      console.log(prevState);\n      let newList = { ...prevState.savedMemes };\n      console.log(newList);\n      //   newList.push({\n      //     topText: topText,\n      //     bottomText: bottomText,\n      //     memeImg: memeImg[\"url\"],\n      //     name: memeImg[\"name\"]\n      //   });\n      return {\n        savedMemes: newList\n      };\n    });\n    // console.log(this.state);\n  }\n  function componentDidMount() {\n    fetch(memeApi)\n      .then(res => res.json())\n      .then(res => {\n        console.log(res.data.memes);\n\n        getAllMemes(res.data.memes);\n      });\n  }\n  componentDidMount();\n  return (\n    <article\n      className=\"portfolio-card\"\n      style={{ backgroundColor: \"var(--background-main)\" }}\n    >\n      <div className=\"text-section\">\n        <h1 className=\"title\">MemeGenerator</h1>\n        {/* <h4 className=\"subtitle\">Login</h4> */}\n      </div>\n      <form onSubmit={e => handleSubmit(e)}>\n        <div className=\"input-group\">\n          <div className=\"relative\">\n            <div className=\"clearable\">\n              <input\n                ref={memeInputRef}\n                className=\"input-style\"\n                type=\"text\"\n                placeholder=\"search meme\"\n                name=\"memeInput\"\n                autoComplete=\"off\"\n                value={state.memeInput}\n                onChange={e => {\n                  handleMemeInput(e);\n                }}\n                onClick={() => {\n                  handleInputClick();\n                }}\n              />\n\n              {memeInput !== \"\" ? (\n                <span\n                  className=\"clearable-clear mdi mdi-close\"\n                  onClick={() => {\n                    eraseInput();\n                  }}\n                ></span>\n              ) : null}\n              {memeDDVisible && (\n                <div className=\"dropdown-container\" ref={ddRef}>\n                  {memeDDFiltered !== \"\" &&\n                    memeDDFiltered.map((val, i) => {\n                      return (\n                        <button\n                          key={i}\n                          onClick={e => {\n                            handleDDClick(val);\n                          }}\n                          // value={this.selectedTicker}\n                        >\n                          <div\n                            className=\"meme-dd-div\"\n                            style={{\n                              backgroundImage: `url(${val[\"url\"]})`\n                            }}\n                          ></div>\n                          - {val.name}\n                        </button>\n                      );\n                    })}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n        <div className=\"mt-2\">\n          <div className=\"input-group mt-2\">\n            <div className=\"label-style\">Top Text</div>\n            <input\n              className=\"input-style\"\n              name=\"topText\"\n              value={topText}\n              type=\"text\"\n              autoComplete=\"off\"\n              onChange={e => setTopText(e.target.value)}\n            />\n          </div>\n          <div className=\"input-group mt-2\">\n            <div className=\"label-style\">Bottom Text</div>\n            <input\n              className=\"input-style\"\n              name=\"bottomText\"\n              value={bottomText}\n              type=\"text\"\n              autoComplete=\"off\"\n              onChange={e => setBottomText(e.target.value)}\n            />\n          </div>\n          <div\n            className=\"meme-div mt-2\"\n            style={{ backgroundImage: `url(${memeImg[\"url\"]})` }}\n          >\n            <div className=\"meme-text\">{topText}</div>\n            <div className=\"meme-text\">{bottomText}</div>\n          </div>\n          <small className=\"mt-1\"> {memeImg[\"name\"]}</small>\n        </div>\n        <div className=\"mt-2\">\n          <button className=\"outline-btn accent\">save</button>\n        </div>\n      </form>\n    </article>\n  );\n}\n\nexport default MemeGenerator;\n"]},"metadata":{},"sourceType":"module"}