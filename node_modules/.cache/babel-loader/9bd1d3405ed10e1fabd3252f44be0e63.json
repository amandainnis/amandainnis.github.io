{"ast":null,"code":"const prePieData = [{\n  label: \"Seltzer\",\n  value: 5,\n  tooltipValue: \"Seltzer is great\",\n  color: \"pink\"\n}, {\n  label: \"Seltzer\",\n  value: 5,\n  tooltipValue: \"Seltzer is great\",\n  color: \"teal\"\n}, {\n  label: \"Grapefruit Juice\",\n  value: 2,\n  tooltipValue: \"Grapefruit Juice is healthy\",\n  color: \"yellow\"\n}, {\n  label: \"Pellegrino\",\n  value: 9,\n  tooltipValue: \"Pellegrino is best\",\n  color: \"tan\"\n}, {\n  label: \"Pellegrino\",\n  value: 9,\n  tooltipValue: \"Pellegrino is best\",\n  color: \"navy\"\n}];\n\nfunction sortArray(data, key) {\n  let newArr = data.sort((a, b) => {\n    if (a[key] < b[key]) {\n      return 1;\n    } else if (a[key] > b[key]) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return newArr;\n}\n\nexport function createPieData() {\n  return sortArray(prePieData, \"value\");\n}\n\nfunction formatData() {\n  let arr = Object.keys(priceJson[\"Time Series (5min)\"]);\n  let tempArr = [];\n  let jsonPrice = priceJson[\"Time Series (5min)\"];\n  let jsonIndex = indexJson[\"Time Series (5min)\"];\n\n  for (let i = 0; i < arr.length; i++) {\n    let niceDate = moment(arr[i]).format(\"DD MMM YYYY\");\n    let niceTime = moment(arr[i]).format(\"h:mm A\");\n    let price = Math.round(jsonPrice[arr[i]][\"4. close\"] * 100) / 100;\n    let benchmark = Math.round(jsonIndex[arr[i]][\"4. close\"] * 100) / 100;\n    tempArr.push({\n      fullDate: arr[i],\n      niceDate: niceDate,\n      niceTime: niceTime,\n      price: price,\n      benchmark: benchmark,\n      index: i\n    });\n  }\n\n  setChartData(tempArr);\n  console.log(tempArr);\n}","map":{"version":3,"sources":["/Users/amandainnis/ReactProjects/react-site/portfolio/src/data/DataHandler.js"],"names":["prePieData","label","value","tooltipValue","color","sortArray","data","key","newArr","sort","a","b","createPieData","formatData","arr","Object","keys","priceJson","tempArr","jsonPrice","jsonIndex","indexJson","i","length","niceDate","moment","format","niceTime","price","Math","round","benchmark","push","fullDate","index","setChartData","console","log"],"mappings":"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","sourcesContent":["const prePieData = [\n  {\n    label: \"Seltzer\",\n    value: 5,\n    tooltipValue: \"Seltzer is great\",\n    color: \"pink\"\n  },\n  {\n    label: \"Seltzer\",\n    value: 5,\n    tooltipValue: \"Seltzer is great\",\n    color: \"teal\"\n  },\n  {\n    label: \"Grapefruit Juice\",\n    value: 2,\n    tooltipValue: \"Grapefruit Juice is healthy\",\n    color: \"yellow\"\n  },\n  {\n    label: \"Pellegrino\",\n    value: 9,\n    tooltipValue: \"Pellegrino is best\",\n    color: \"tan\"\n  },\n  {\n    label: \"Pellegrino\",\n    value: 9,\n    tooltipValue: \"Pellegrino is best\",\n    color: \"navy\"\n  }\n];\nfunction sortArray(data, key) {\n  let newArr = data.sort((a, b) => {\n    if (a[key] < b[key]) {\n      return 1;\n    } else if (a[key] > b[key]) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return newArr;\n}\nexport function createPieData() {\n  return sortArray(prePieData, \"value\");\n}\n\nfunction formatData() {\n  let arr = Object.keys(priceJson[\"Time Series (5min)\"]);\n  let tempArr = [];\n  let jsonPrice = priceJson[\"Time Series (5min)\"];\n  let jsonIndex = indexJson[\"Time Series (5min)\"];\n  for (let i = 0; i < arr.length; i++) {\n    let niceDate = moment(arr[i]).format(\"DD MMM YYYY\");\n    let niceTime = moment(arr[i]).format(\"h:mm A\");\n    let price = Math.round(jsonPrice[arr[i]][\"4. close\"] * 100) / 100;\n    let benchmark = Math.round(jsonIndex[arr[i]][\"4. close\"] * 100) / 100;\n    tempArr.push({\n      fullDate: arr[i],\n      niceDate: niceDate,\n      niceTime: niceTime,\n      price: price,\n      benchmark: benchmark,\n      index: i\n    });\n  }\n  setChartData(tempArr);\n  console.log(tempArr);\n}\n"]},"metadata":{},"sourceType":"module"}