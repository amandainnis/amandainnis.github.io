{"ast":null,"code":"import _defineProperty from \"/Users/amandainnis/ReactProjects/board-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/amandainnis/ReactProjects/board-app/src/components/forms/MemeGenerator.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nconst memeApi = \"https://api.imgflip.com/get_memes\";\n\nclass MemeGenerator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.memeInputRef = React.createRef();\n    this.state = {\n      allMemeImgs: [],\n      memeDDFiltered: [],\n      memeImg: {},\n      topText: \"\",\n      bottomText: \"\",\n      memeInput: \"\",\n      savedMemes: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.saveMemes = this.saveMemes.bind(this);\n    this.getAllMemes = this.getAllMemes.bind(this);\n  }\n\n  handleChange(e) {\n    const _e$target = e.target,\n          name = _e$target.name,\n          value = _e$target.value;\n    this.setState({\n      [name]: value\n    }); // console.log(this.state);\n  }\n\n  handleSubmit() {// this.setState(prevState => {\n    //   formData = prevState.firstName;\n    //   return {\n    //     firstName: \"\",\n    //     lastName: \"\",\n    //     checkboxData: checkboxData,\n    //     radioData: radioData\n    //   };\n    // });\n    // return formData;\n  }\n\n  handleMemeInput(e) {\n    const memeDDList = this.state.allMemeImgs.slice();\n    let myResults;\n\n    if (e !== null || e !== \"\") {\n      myResults = memeDDList.filter(function (myKey) {\n        return myKey.name.toLowerCase().contains(e.target.value.toLowerCase());\n      }); // console.log(myResults);\n\n      this.setState({\n        memeInput: e.target.value,\n        memeDDFiltered: myResults\n      }); // this.ddRef.current.childNodes[0].focus();\n      // console.log(this.ddRef.current);\n    }\n  }\n\n  eraseInput() {\n    console.log(this.tickerInputRef);\n    this.tickerInputRef.current.focus();\n    this.setState({\n      memeInput: \"\"\n    });\n  }\n\n  handleKeyUp(e) {\n    console.log(e.which);\n    this.setState({\n      tickerDDVisible: true\n    }); // if (e.which === 40) {\n    //   this.ddRef.current.children[this.state.ddListIndex].focus();\n    // }\n  }\n\n  handleDDClick(val, name) {\n    console.log(val);\n    this.setState({\n      tickerInput: val.symbol,\n      tickerCompany: val.name,\n      tickerDDVisible: false\n    });\n  }\n\n  getAllMemes(memes) {\n    this.setState({\n      allMemeImgs: memes,\n      memeImg: memes[0]\n    });\n    console.log(this.state);\n    console.log(this.state.allMemeImgs[0]);\n  }\n\n  saveMemes() {\n    this.setState(prevState => {\n      console.log(prevState);\n\n      let newList = _objectSpread({}, prevState.savedMemes);\n\n      console.log(newList); //   newList.push({\n      //     topText: this.state.topText,\n      //     bottomText: this.state.bottomText,\n      //     memeImg: this.state.memeImg[\"url\"],\n      //     name: this.state.memeImg[\"name\"]\n      //   });\n\n      return {\n        savedMemes: newList\n      };\n    });\n    console.log(this.state);\n  }\n\n  componentDidMount() {\n    fetch(memeApi).then(res => res.json()).then(res => {\n      console.log(res.data.memes);\n      this.getAllMemes(res.data.memes);\n    });\n  }\n\n  render() {\n    return React.createElement(\"article\", {\n      className: \"portfolio-card\",\n      style: {\n        backgroundColor: \"var(--background-main)\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"text-section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"MemeGenerator\")), React.createElement(\"div\", {\n      className: \"input-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"relative\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"clearable\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      ref: this.memeInputRef,\n      className: \"input-style\",\n      type: \"text\",\n      placeholder: \"search meme\",\n      name: \"memeInput\",\n      autoComplete: \"off\",\n      value: this.state.memeInput,\n      onChange: e => {\n        this.handleMemeInput(e);\n      },\n      onKeyUp: e => {\n        this.handleKeyUp(e);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: \"mt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"input-group mt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"label-style\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"Top Text\"), React.createElement(\"input\", {\n      className: \"input-style\",\n      name: \"topText\",\n      value: this.state.topText,\n      type: \"text\",\n      onChange: e => this.handleChange(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"input-group mt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"label-style\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"Bottom Text\"), React.createElement(\"input\", {\n      className: \"input-style\",\n      name: \"bottomText\",\n      value: this.state.bottomText,\n      type: \"text\",\n      onChange: e => this.handleChange(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"meme-div\",\n      style: {\n        backgroundImage: \"url(\".concat(this.state.memeImg[\"url\"], \")\")\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"meme-text mt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, this.state.topText), React.createElement(\"div\", {\n      className: \"meme-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, this.state.bottomText)), React.createElement(\"small\", {\n      className: \"mt-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \" \", this.state.memeImg[\"name\"])), React.createElement(\"div\", {\n      className: \"mt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"outline-btn accent\",\n      onClick: () => {\n        this.saveMemes();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, \"save\")));\n  }\n\n}\n\nexport default MemeGenerator;","map":{"version":3,"sources":["/Users/amandainnis/ReactProjects/board-app/src/components/forms/MemeGenerator.js"],"names":["React","memeApi","MemeGenerator","Component","constructor","props","memeInputRef","createRef","state","allMemeImgs","memeDDFiltered","memeImg","topText","bottomText","memeInput","savedMemes","handleChange","bind","handleSubmit","saveMemes","getAllMemes","e","target","name","value","setState","handleMemeInput","memeDDList","slice","myResults","filter","myKey","toLowerCase","contains","eraseInput","console","log","tickerInputRef","current","focus","handleKeyUp","which","tickerDDVisible","handleDDClick","val","tickerInput","symbol","tickerCompany","memes","prevState","newList","componentDidMount","fetch","then","res","json","data","render","backgroundColor","backgroundImage"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nconst memeApi = \"https://api.imgflip.com/get_memes\";\nclass MemeGenerator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.memeInputRef = React.createRef();\n    this.state = {\n      allMemeImgs: [],\n      memeDDFiltered: [],\n      memeImg: {},\n      topText: \"\",\n      bottomText: \"\",\n      memeInput: \"\",\n      savedMemes: []\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.saveMemes = this.saveMemes.bind(this);\n    this.getAllMemes = this.getAllMemes.bind(this);\n  }\n\n  handleChange(e) {\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value\n    });\n    // console.log(this.state);\n  }\n  handleSubmit() {\n    // this.setState(prevState => {\n    //   formData = prevState.firstName;\n    //   return {\n    //     firstName: \"\",\n    //     lastName: \"\",\n    //     checkboxData: checkboxData,\n    //     radioData: radioData\n    //   };\n    // });\n    // return formData;\n  }\n\n  handleMemeInput(e) {\n    const memeDDList = this.state.allMemeImgs.slice();\n    let myResults;\n\n    if (e !== null || e !== \"\") {\n      myResults = memeDDList.filter(function(myKey) {\n        return myKey.name.toLowerCase().contains(e.target.value.toLowerCase());\n      });\n      // console.log(myResults);\n      this.setState({\n        memeInput: e.target.value,\n        memeDDFiltered: myResults\n      });\n      // this.ddRef.current.childNodes[0].focus();\n      // console.log(this.ddRef.current);\n    }\n  }\n  eraseInput() {\n    console.log(this.tickerInputRef);\n    this.tickerInputRef.current.focus();\n    this.setState({\n      memeInput: \"\"\n    });\n  }\n  handleKeyUp(e) {\n    console.log(e.which);\n    this.setState({\n      tickerDDVisible: true\n    });\n    // if (e.which === 40) {\n    //   this.ddRef.current.children[this.state.ddListIndex].focus();\n    // }\n  }\n  handleDDClick(val, name) {\n    console.log(val);\n    this.setState({\n      tickerInput: val.symbol,\n      tickerCompany: val.name,\n      tickerDDVisible: false\n    });\n  }\n  getAllMemes(memes) {\n    this.setState({\n      allMemeImgs: memes,\n      memeImg: memes[0]\n    });\n    console.log(this.state);\n    console.log(this.state.allMemeImgs[0]);\n  }\n  saveMemes() {\n    this.setState(prevState => {\n      console.log(prevState);\n      let newList = { ...prevState.savedMemes };\n      console.log(newList);\n      //   newList.push({\n      //     topText: this.state.topText,\n      //     bottomText: this.state.bottomText,\n      //     memeImg: this.state.memeImg[\"url\"],\n      //     name: this.state.memeImg[\"name\"]\n      //   });\n      return {\n        savedMemes: newList\n      };\n    });\n    console.log(this.state);\n  }\n  componentDidMount() {\n    fetch(memeApi)\n      .then(res => res.json())\n      .then(res => {\n        console.log(res.data.memes);\n\n        this.getAllMemes(res.data.memes);\n      });\n  }\n  render() {\n    return (\n      <article\n        className=\"portfolio-card\"\n        style={{ backgroundColor: \"var(--background-main)\" }}\n      >\n        <div className=\"text-section\">\n          <h1 className=\"title\">MemeGenerator</h1>\n          {/* <h4 className=\"subtitle\">Login</h4> */}\n        </div>\n        {/* <form onSubmit={() => this.handleSubmit()}> */}\n        <div className=\"input-group\">\n          <div className=\"relative\">\n            <div className=\"clearable\">\n              <input\n                ref={this.memeInputRef}\n                className=\"input-style\"\n                type=\"text\"\n                placeholder=\"search meme\"\n                name=\"memeInput\"\n                autoComplete=\"off\"\n                value={this.state.memeInput}\n                onChange={e => {\n                  this.handleMemeInput(e);\n                }}\n                onKeyUp={e => {\n                  this.handleKeyUp(e);\n                }}\n              />\n\n              {/* {this.state.tickerInput !== \"\" ? (\n                <span\n                  className=\"clearable-clear mdi mdi-close\"\n                  onClick={() => {\n                    this.eraseInput();\n                  }}\n                ></span>\n              ) : null}\n              {this.state.tickerDDVisible && (\n                <div className=\"dropdown-container crb\" ref={this.ddRef}>\n                  {this.state.tickerDDFiltered !== \"\" &&\n                    this.state.tickerDDFiltered.map((val, i) => {\n                      return (\n                        <button\n                          key={i}\n                          onClick={e => {\n                            this.handleDDClick(val, \"tickerInput\");\n                          }}\n                          value={this.state.selectedTicker}\n                        >\n                          {val.symbol} - {val.name}\n                        </button>\n                      );\n                    })}\n                </div>\n              )} */}\n            </div>\n          </div>\n        </div>\n        <div className=\"mt-2\">\n          <div className=\"input-group mt-2\">\n            <div className=\"label-style\">Top Text</div>\n            <input\n              className=\"input-style\"\n              name=\"topText\"\n              value={this.state.topText}\n              type=\"text\"\n              onChange={e => this.handleChange(e)}\n            />\n          </div>\n          <div className=\"input-group mt-2\">\n            <div className=\"label-style\">Bottom Text</div>\n            <input\n              className=\"input-style\"\n              name=\"bottomText\"\n              value={this.state.bottomText}\n              type=\"text\"\n              onChange={e => this.handleChange(e)}\n            />\n          </div>\n          <div\n            className=\"meme-div\"\n            style={{ backgroundImage: `url(${this.state.memeImg[\"url\"]})` }}\n          >\n            <div className=\"meme-text mt-2\">{this.state.topText}</div>\n            <div className=\"meme-text\">{this.state.bottomText}</div>\n          </div>\n          <small className=\"mt-1\"> {this.state.memeImg[\"name\"]}</small>\n        </div>\n        <div className=\"mt-2\">\n          <button\n            className=\"outline-btn accent\"\n            onClick={() => {\n              this.saveMemes();\n            }}\n          >\n            save\n          </button>\n        </div>\n        {/* </form> */}\n      </article>\n    );\n  }\n}\n\nexport default MemeGenerator;\n"]},"metadata":{},"sourceType":"module"}