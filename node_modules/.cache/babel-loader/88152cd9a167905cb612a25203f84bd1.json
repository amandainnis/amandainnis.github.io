{"ast":null,"code":"import _slicedToArray from \"/Users/amandainnis/ReactProjects/react-site/portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useState, useEffect } from 'raect';\nexport default function useDebounce(value, delay) {\n  //passing in value and delay from another place\n  const _useState = useState(value),\n        _useState2 = _slicedToArray(_useState, 2),\n        debouncedValue = _useState2[0],\n        setDebouncedValue = _useState2[1];\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay); // https://dev.to/gabe_ragland/debouncing-with-react-hooks-jci\n    // Return a cleanup function that will be called every time ...\n    // ... useEffect is re-called. useEffect will only be re-called ...\n    // ... if value changes (see the inputs array below). \n    // This is how we prevent debouncedValue from changing if value is ...\n    // ... changed within the delay period. Timeout gets cleared and restarted.\n    // To put it in context, if the user is typing within our app's ...\n    // ... search box, we don't want the debouncedValue to update until ...\n    // ... they've stopped typing for more than 500ms.\n\n    return () => {\n      clearTimeout(handler);\n    }; // Only re-call effect if value changes\n    // You could also add the \"delay\" var to inputs array if you ...\n    // ... need to be able to change that dynamically\n  }, [value]);\n  return debouncedValue;\n}","map":{"version":3,"sources":["/Users/amandainnis/ReactProjects/react-site/portfolio/src/components/reusable/useDebounce.js"],"names":["React","useState","useEffect","useDebounce","value","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AAEA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAkC;AACjD;AADiD,oBAEJJ,QAAQ,CAACG,KAAD,CAFJ;AAAA;AAAA,QAEzCE,cAFyC;AAAA,QAEzBC,iBAFyB;;AAIhDL,EAAAA,SAAS,CAAC,MAAM;AACf,UAAMM,OAAO,GAAGC,UAAU,CAAC,MAAM;AAChCF,MAAAA,iBAAiB,CAACH,KAAD,CAAjB;AACA,KAFyB,EAEvBC,KAFuB,CAA1B,CADe,CAKf;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEJ,WAAO,MAAM;AACZK,MAAAA,YAAY,CAACF,OAAD,CAAZ;AACA,KAFD,CAfe,CAkBb;AACA;AACA;AACF,GArBQ,EAqBN,CAACJ,KAAD,CArBM,CAAT;AAuBA,SAAOE,cAAP;AAEA","sourcesContent":["import React, {useState, useEffect} from 'raect';\n\nexport default function useDebounce(value, delay){\n//passing in value and delay from another place\n\tconst [debouncedValue, setDebouncedValue] = useState(value);\n\n\tuseEffect(() => {\n\t\tconst handler = setTimeout(() => {\n\t\t\tsetDebouncedValue(value);\n\t\t}, delay);\n\n\t\t// https://dev.to/gabe_ragland/debouncing-with-react-hooks-jci\n      // Return a cleanup function that will be called every time ...\n      // ... useEffect is re-called. useEffect will only be re-called ...\n      // ... if value changes (see the inputs array below). \n      // This is how we prevent debouncedValue from changing if value is ...\n      // ... changed within the delay period. Timeout gets cleared and restarted.\n      // To put it in context, if the user is typing within our app's ...\n      // ... search box, we don't want the debouncedValue to update until ...\n      // ... they've stopped typing for more than 500ms.\n\n\t\treturn () => {\n\t\t\tclearTimeout(handler);\n\t\t}\n    // Only re-call effect if value changes\n    // You could also add the \"delay\" var to inputs array if you ...\n    // ... need to be able to change that dynamically\n\t}, [value]\n\t);\n\treturn debouncedValue;\n\n}"]},"metadata":{},"sourceType":"module"}