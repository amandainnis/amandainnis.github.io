{"ast":null,"code":"import _defineProperty from \"/Users/amandainnis/ReactProjects/react-site/portfolio/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/amandainnis/ReactProjects/react-site/portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/amandainnis/ReactProjects/react-site/portfolio/src/components/forms/MemeGenerator.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\n\nfunction MemeGenerator() {\n  let memeDDConst;\n  this.memeInputRef = React.createRef();\n  this.ddRef = React.createRef();\n  const memeApi = \"https://api.imgflip.com/get_memes\";\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 8),\n        allMemeImgs = _useState2[0],\n        memeDDFiltered = _useState2[1],\n        memeImg = _useState2[2],\n        topText = _useState2[3],\n        bottomText = _useState2[4],\n        memeInput = _useState2[5],\n        memeDDVisible = _useState2[6],\n        savedMemes = _useState2[7]; // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //     allMemeImgs: [],\n  //     memeDDFiltered: [],\n  //     memeImg: {},\n  //     topText: \"\",\n  //     bottomText: \"\",\n  //     memeInput: \"\",\n  //     memeDDVisible: false,\n  //     savedMemes: []\n  //   };\n  //   this.handleSubmit = this.handleSubmit.bind(this);\n  //   this.saveMemes = this.saveMemes.bind(this);\n  //   this.getAllMemes = this.getAllMemes.bind(this);\n  // }\n\n\n  handleChange = e => {\n    const _e$target = e.target,\n          name = _e$target.name,\n          value = _e$target.value;\n    this.setState({\n      [name]: value\n    }); // console.log(this.state);\n  };\n\n  handleMemeInput = e => {\n    let myResults; // this.setState({\n    //   memeInput: e.target.value\n    // });\n\n    console.log(memeDDConst);\n\n    if (e !== null || e !== \"\") {\n      myResults = memeDDConst.filter(function (myKey) {\n        return myKey[\"name\"].toLowerCase().startsWith(e.target.value.toLowerCase());\n      });\n      console.log(myResults);\n      this.setState({\n        memeInput: e.target.value,\n        memeDDFiltered: myResults\n      }); // this.ddRef.current.childNodes[0].focus();\n      // console.log(this.ddRef.current);\n    }\n  };\n\n  eraseInput = () => {\n    console.log(this.memeInputRef);\n    this.memeInputRef.current.focus();\n    this.setState({\n      memeInput: \"\",\n      memeDDVisible: true,\n      memeDDFiltered: memeDDConst\n    });\n  }; //   handleKeyUp(e) {\n  //     console.log(e.which);\n  //     this.setState({\n  //       memeDDVisible: true\n  //     });\n  //     // if (e.which === 40) {\n  //     //   this.ddRef.current.children[this.state.ddListIndex].focus();\n  //     // }\n  //   }\n\n\n  handleInputClick = () => {\n    this.setState({\n      memeDDVisible: true,\n      memeDDFiltered: memeDDConst\n    });\n  };\n\n  handleDDClick = (val, name) => {\n    console.log(val);\n    this.setState({\n      [name]: val,\n      memeInput: val.name,\n      memeDDVisible: false\n    });\n  };\n\n  getAllMemes = memes => {\n    this.setState({\n      allMemeImgs: memes,\n      memeImg: memes[0]\n    });\n    memeDDConst = memes; // console.log(this.state);\n    // console.log(this.state.allMemeImgs[0]);\n  };\n\n  handleSubmit = e => {\n    e.preventDefault(); // this.setState(prevState => {\n    //   formData = prevState.firstName;\n    //   return {\n    //     firstName: \"\",\n    //     lastName: \"\",\n    //     checkboxData: checkboxData,\n    //     radioData: radioData\n    //   };\n    // });\n    // return formData;\n  };\n\n  saveMemes = e => {\n    e.preventDefault();\n    this.setState(prevState => {\n      console.log(prevState);\n\n      let newList = _objectSpread({}, prevState.savedMemes);\n\n      console.log(newList); //   newList.push({\n      //     topText: this.state.topText,\n      //     bottomText: this.state.bottomText,\n      //     memeImg: this.state.memeImg[\"url\"],\n      //     name: this.state.memeImg[\"name\"]\n      //   });\n\n      return {\n        savedMemes: newList\n      };\n    }); // console.log(this.state);\n  };\n\n  componentDidMount = () => {\n    fetch(memeApi).then(res => res.json()).then(res => {\n      console.log(res.data.memes);\n      this.getAllMemes(res.data.memes);\n    });\n  };\n\n  return React.createElement(\"article\", {\n    className: \"portfolio-card\",\n    style: {\n      backgroundColor: \"var(--background-main)\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"text-section\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, \"MemeGenerator\")), React.createElement(\"form\", {\n    onSubmit: e => this.handleSubmit(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"input-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"relative\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"clearable\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    ref: this.memeInputRef,\n    className: \"input-style\",\n    type: \"text\",\n    placeholder: \"search meme\",\n    name: \"memeInput\",\n    autoComplete: \"off\",\n    value: this.state.memeInput,\n    onChange: e => {\n      this.handleMemeInput(e);\n    },\n    onClick: () => {\n      this.handleInputClick();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }), this.state.memeInput !== \"\" ? React.createElement(\"span\", {\n    className: \"clearable-clear mdi mdi-close\",\n    onClick: () => {\n      this.eraseInput();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }) : null, this.state.memeDDVisible && React.createElement(\"div\", {\n    className: \"dropdown-container\",\n    ref: this.ddRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, this.state.memeDDFiltered !== \"\" && this.state.memeDDFiltered.map((val, i) => {\n    return React.createElement(\"button\", {\n      key: i,\n      onClick: e => {\n        this.handleDDClick(val, \"memeImg\");\n      } // value={this.state.selectedTicker}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"meme-dd-div\",\n      style: {\n        backgroundImage: \"url(\".concat(val[\"url\"], \")\")\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }), \"- \", val.name);\n  }))))), React.createElement(\"div\", {\n    className: \"mt-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"input-group mt-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"label-style\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, \"Top Text\"), React.createElement(\"input\", {\n    className: \"input-style\",\n    name: \"topText\",\n    value: this.state.topText,\n    type: \"text\",\n    autoComplete: \"off\",\n    onChange: e => this.handleChange(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"input-group mt-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"label-style\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, \"Bottom Text\"), React.createElement(\"input\", {\n    className: \"input-style\",\n    name: \"bottomText\",\n    value: bottomText,\n    type: \"text\",\n    autoComplete: \"off\",\n    onChange: e => this.handleChange(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"meme-div mt-2\",\n    style: {\n      backgroundImage: \"url(\".concat(memeImg[\"url\"], \")\")\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"meme-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }, topText), React.createElement(\"div\", {\n    className: \"meme-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240\n    },\n    __self: this\n  }, bottomText)), React.createElement(\"small\", {\n    className: \"mt-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }, \" \", memeImg[\"name\"])), React.createElement(\"div\", {\n    className: \"mt-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"outline-btn accent\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }, \"save\"))));\n}\n\nexport default MemeGenerator;","map":{"version":3,"sources":["/Users/amandainnis/ReactProjects/react-site/portfolio/src/components/forms/MemeGenerator.js"],"names":["React","useState","MemeGenerator","memeDDConst","memeInputRef","createRef","ddRef","memeApi","allMemeImgs","memeDDFiltered","memeImg","topText","bottomText","memeInput","memeDDVisible","savedMemes","handleChange","e","target","name","value","setState","handleMemeInput","myResults","console","log","filter","myKey","toLowerCase","startsWith","eraseInput","current","focus","handleInputClick","handleDDClick","val","getAllMemes","memes","handleSubmit","preventDefault","saveMemes","prevState","newList","componentDidMount","fetch","then","res","json","data","backgroundColor","state","map","i","backgroundImage"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nfunction MemeGenerator() {\n  let memeDDConst;\n  this.memeInputRef = React.createRef();\n  this.ddRef = React.createRef();\n  const memeApi = \"https://api.imgflip.com/get_memes\";\n  const [\n    allMemeImgs,\n    memeDDFiltered,\n    memeImg,\n    topText,\n    bottomText,\n    memeInput,\n    memeDDVisible,\n    savedMemes\n  ] = useState();\n  // constructor(props) {\n  //   super(props);\n\n  //   this.state = {\n  //     allMemeImgs: [],\n  //     memeDDFiltered: [],\n  //     memeImg: {},\n  //     topText: \"\",\n  //     bottomText: \"\",\n  //     memeInput: \"\",\n  //     memeDDVisible: false,\n  //     savedMemes: []\n  //   };\n\n  //   this.handleSubmit = this.handleSubmit.bind(this);\n  //   this.saveMemes = this.saveMemes.bind(this);\n  //   this.getAllMemes = this.getAllMemes.bind(this);\n  // }\n\n  handleChange = e => {\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value\n    });\n    // console.log(this.state);\n  };\n\n  handleMemeInput = e => {\n    let myResults;\n    // this.setState({\n    //   memeInput: e.target.value\n    // });\n    console.log(memeDDConst);\n    if (e !== null || e !== \"\") {\n      myResults = memeDDConst.filter(function(myKey) {\n        return myKey[\"name\"]\n          .toLowerCase()\n          .startsWith(e.target.value.toLowerCase());\n      });\n      console.log(myResults);\n      this.setState({\n        memeInput: e.target.value,\n        memeDDFiltered: myResults\n      });\n      // this.ddRef.current.childNodes[0].focus();\n      // console.log(this.ddRef.current);\n    }\n  };\n  eraseInput = () => {\n    console.log(this.memeInputRef);\n    this.memeInputRef.current.focus();\n    this.setState({\n      memeInput: \"\",\n      memeDDVisible: true,\n      memeDDFiltered: memeDDConst\n    });\n  };\n  //   handleKeyUp(e) {\n  //     console.log(e.which);\n  //     this.setState({\n  //       memeDDVisible: true\n  //     });\n  //     // if (e.which === 40) {\n  //     //   this.ddRef.current.children[this.state.ddListIndex].focus();\n  //     // }\n  //   }\n  handleInputClick = () => {\n    this.setState({\n      memeDDVisible: true,\n      memeDDFiltered: memeDDConst\n    });\n  };\n  handleDDClick = (val, name) => {\n    console.log(val);\n    this.setState({\n      [name]: val,\n      memeInput: val.name,\n      memeDDVisible: false\n    });\n  };\n  getAllMemes = memes => {\n    this.setState({\n      allMemeImgs: memes,\n      memeImg: memes[0]\n    });\n    memeDDConst = memes;\n    // console.log(this.state);\n    // console.log(this.state.allMemeImgs[0]);\n  };\n  handleSubmit = e => {\n    e.preventDefault();\n    // this.setState(prevState => {\n    //   formData = prevState.firstName;\n    //   return {\n    //     firstName: \"\",\n    //     lastName: \"\",\n    //     checkboxData: checkboxData,\n    //     radioData: radioData\n    //   };\n    // });\n    // return formData;\n  };\n  saveMemes = e => {\n    e.preventDefault();\n    this.setState(prevState => {\n      console.log(prevState);\n      let newList = { ...prevState.savedMemes };\n      console.log(newList);\n      //   newList.push({\n      //     topText: this.state.topText,\n      //     bottomText: this.state.bottomText,\n      //     memeImg: this.state.memeImg[\"url\"],\n      //     name: this.state.memeImg[\"name\"]\n      //   });\n      return {\n        savedMemes: newList\n      };\n    });\n    // console.log(this.state);\n  };\n  componentDidMount = () => {\n    fetch(memeApi)\n      .then(res => res.json())\n      .then(res => {\n        console.log(res.data.memes);\n\n        this.getAllMemes(res.data.memes);\n      });\n  };\n\n  return (\n    <article\n      className=\"portfolio-card\"\n      style={{ backgroundColor: \"var(--background-main)\" }}\n    >\n      <div className=\"text-section\">\n        <h1 className=\"title\">MemeGenerator</h1>\n        {/* <h4 className=\"subtitle\">Login</h4> */}\n      </div>\n      <form onSubmit={e => this.handleSubmit(e)}>\n        <div className=\"input-group\">\n          <div className=\"relative\">\n            <div className=\"clearable\">\n              <input\n                ref={this.memeInputRef}\n                className=\"input-style\"\n                type=\"text\"\n                placeholder=\"search meme\"\n                name=\"memeInput\"\n                autoComplete=\"off\"\n                value={this.state.memeInput}\n                onChange={e => {\n                  this.handleMemeInput(e);\n                }}\n                onClick={() => {\n                  this.handleInputClick();\n                }}\n              />\n\n              {this.state.memeInput !== \"\" ? (\n                <span\n                  className=\"clearable-clear mdi mdi-close\"\n                  onClick={() => {\n                    this.eraseInput();\n                  }}\n                ></span>\n              ) : null}\n              {this.state.memeDDVisible && (\n                <div className=\"dropdown-container\" ref={this.ddRef}>\n                  {this.state.memeDDFiltered !== \"\" &&\n                    this.state.memeDDFiltered.map((val, i) => {\n                      return (\n                        <button\n                          key={i}\n                          onClick={e => {\n                            this.handleDDClick(val, \"memeImg\");\n                          }}\n                          // value={this.state.selectedTicker}\n                        >\n                          <div\n                            className=\"meme-dd-div\"\n                            style={{\n                              backgroundImage: `url(${val[\"url\"]})`\n                            }}\n                          ></div>\n                          - {val.name}\n                        </button>\n                      );\n                    })}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n        <div className=\"mt-2\">\n          <div className=\"input-group mt-2\">\n            <div className=\"label-style\">Top Text</div>\n            <input\n              className=\"input-style\"\n              name=\"topText\"\n              value={this.state.topText}\n              type=\"text\"\n              autoComplete=\"off\"\n              onChange={e => this.handleChange(e)}\n            />\n          </div>\n          <div className=\"input-group mt-2\">\n            <div className=\"label-style\">Bottom Text</div>\n            <input\n              className=\"input-style\"\n              name=\"bottomText\"\n              value={bottomText}\n              type=\"text\"\n              autoComplete=\"off\"\n              onChange={e => this.handleChange(e)}\n            />\n          </div>\n          <div\n            className=\"meme-div mt-2\"\n            style={{ backgroundImage: `url(${memeImg[\"url\"]})` }}\n          >\n            <div className=\"meme-text\">{topText}</div>\n            <div className=\"meme-text\">{bottomText}</div>\n          </div>\n          <small className=\"mt-1\"> {memeImg[\"name\"]}</small>\n        </div>\n        <div className=\"mt-2\">\n          <button className=\"outline-btn accent\">save</button>\n        </div>\n      </form>\n    </article>\n  );\n}\n\nexport default MemeGenerator;\n"]},"metadata":{},"sourceType":"module"}