{"ast":null,"code":"import _defineProperty from \"/Users/amandainnis/ReactProjects/board-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/amandainnis/ReactProjects/board-app/src/components/forms/MemeGenerator.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nlet memeDDList;\nconst memeApi = \"https://api.imgflip.com/get_memes\";\n\nclass MemeGenerator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.memeInputRef = React.createRef();\n    this.ddRef = React.createRef();\n    this.state = {\n      allMemeImgs: [],\n      memeDDFiltered: [],\n      memeImg: {},\n      topText: \"\",\n      bottomText: \"\",\n      memeInput: \"\",\n      memeDDVisible: false,\n      savedMemes: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.saveMemes = this.saveMemes.bind(this);\n    this.getAllMemes = this.getAllMemes.bind(this);\n  }\n\n  handleChange(e) {\n    const _e$target = e.target,\n          name = _e$target.name,\n          value = _e$target.value;\n    this.setState({\n      [name]: value\n    }); // console.log(this.state);\n  }\n\n  handleSubmit() {// this.setState(prevState => {\n    //   formData = prevState.firstName;\n    //   return {\n    //     firstName: \"\",\n    //     lastName: \"\",\n    //     checkboxData: checkboxData,\n    //     radioData: radioData\n    //   };\n    // });\n    // return formData;\n  }\n\n  handleMemeInput(e) {\n    let myResults; // this.setState({\n    //   memeInput: e.target.value\n    // });\n\n    console.log(memeDDList);\n\n    if (e !== null || e !== \"\") {\n      myResults = memeDDList.filter(function (myKey) {\n        return myKey[\"name\"].startsWith(e.target.value.toLowerCase());\n      });\n      console.log(myResults);\n      this.setState({\n        memeInput: e.target.value,\n        memeDDFiltered: myResults\n      }); // this.ddRef.current.childNodes[0].focus();\n      // console.log(this.ddRef.current);\n    }\n  }\n\n  eraseInput() {\n    console.log(this.memeInputRef);\n    this.memeInputRef.current.focus();\n    this.setState({\n      memeInput: \"\"\n    });\n  } //   handleKeyUp(e) {\n  //     console.log(e.which);\n  //     this.setState({\n  //       memeDDVisible: true\n  //     });\n  //     // if (e.which === 40) {\n  //     //   this.ddRef.current.children[this.state.ddListIndex].focus();\n  //     // }\n  //   }\n\n\n  handleInputClick() {\n    this.setState({\n      memeDDVisible: true\n    });\n  }\n\n  handleDDClick(val, name) {\n    console.log(val);\n    this.setState({\n      [name]: val,\n      memeDDVisible: false\n    });\n  }\n\n  getAllMemes(memes) {\n    this.setState({\n      allMemeImgs: memes,\n      memeImg: memes[0]\n    });\n    memeDDList = memes;\n    console.log(this.state);\n    console.log(this.state.allMemeImgs[0]);\n  }\n\n  saveMemes() {\n    this.setState(prevState => {\n      console.log(prevState);\n\n      let newList = _objectSpread({}, prevState.savedMemes);\n\n      console.log(newList); //   newList.push({\n      //     topText: this.state.topText,\n      //     bottomText: this.state.bottomText,\n      //     memeImg: this.state.memeImg[\"url\"],\n      //     name: this.state.memeImg[\"name\"]\n      //   });\n\n      return {\n        savedMemes: newList\n      };\n    });\n    console.log(this.state);\n  }\n\n  componentDidMount() {\n    fetch(memeApi).then(res => res.json()).then(res => {\n      console.log(res.data.memes);\n      this.getAllMemes(res.data.memes);\n    });\n  }\n\n  render() {\n    return React.createElement(\"article\", {\n      className: \"portfolio-card\",\n      style: {\n        backgroundColor: \"var(--background-main)\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"text-section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"MemeGenerator\")), React.createElement(\"div\", {\n      className: \"input-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"relative\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"clearable\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      ref: this.memeInputRef,\n      className: \"input-style\",\n      type: \"text\",\n      placeholder: \"search meme\",\n      name: \"memeInput\",\n      autoComplete: \"off\",\n      value: this.state.memeInput,\n      onChange: e => {\n        this.handleMemeInput(e);\n      },\n      onClick: () => {\n        this.handleInputClick();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), this.state.memeInput !== \"\" ? React.createElement(\"span\", {\n      className: \"clearable-clear mdi mdi-close\",\n      onClick: () => {\n        this.eraseInput();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }) : null, this.state.memeDDVisible && React.createElement(\"div\", {\n      className: \"dropdown-container\",\n      ref: this.ddRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, this.state.memeDDFiltered !== \"\" && this.state.memeDDFiltered.map((val, i) => {\n      return React.createElement(\"button\", {\n        key: i,\n        onClick: e => {\n          this.handleDDClick(val, \"memeImg\");\n        } // value={this.state.selectedTicker}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"meme-dd-div\",\n        style: {\n          backgroundImage: \"url(\".concat(val[\"url\"], \")\")\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }), \"- \", val.name);\n    }))))), React.createElement(\"div\", {\n      className: \"mt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"input-group mt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"label-style\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"Top Text\"), React.createElement(\"input\", {\n      className: \"input-style\",\n      name: \"topText\",\n      value: this.state.topText,\n      type: \"text\",\n      onChange: e => this.handleChange(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"input-group mt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"label-style\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"Bottom Text\"), React.createElement(\"input\", {\n      className: \"input-style\",\n      name: \"bottomText\",\n      value: this.state.bottomText,\n      type: \"text\",\n      onChange: e => this.handleChange(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"meme-div\",\n      style: {\n        backgroundImage: \"url(\".concat(this.state.memeImg[\"url\"], \")\")\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"meme-text mt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, this.state.topText), React.createElement(\"div\", {\n      className: \"meme-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, this.state.bottomText)), React.createElement(\"small\", {\n      className: \"mt-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, \" \", this.state.memeImg[\"name\"])), React.createElement(\"div\", {\n      className: \"mt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"outline-btn accent\",\n      onClick: () => {\n        this.saveMemes();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, \"save\")));\n  }\n\n}\n\nexport default MemeGenerator;","map":{"version":3,"sources":["/Users/amandainnis/ReactProjects/board-app/src/components/forms/MemeGenerator.js"],"names":["React","memeDDList","memeApi","MemeGenerator","Component","constructor","props","memeInputRef","createRef","ddRef","state","allMemeImgs","memeDDFiltered","memeImg","topText","bottomText","memeInput","memeDDVisible","savedMemes","handleChange","bind","handleSubmit","saveMemes","getAllMemes","e","target","name","value","setState","handleMemeInput","myResults","console","log","filter","myKey","startsWith","toLowerCase","eraseInput","current","focus","handleInputClick","handleDDClick","val","memes","prevState","newList","componentDidMount","fetch","then","res","json","data","render","backgroundColor","map","i","backgroundImage"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nlet memeDDList;\nconst memeApi = \"https://api.imgflip.com/get_memes\";\nclass MemeGenerator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.memeInputRef = React.createRef();\n    this.ddRef = React.createRef();\n    this.state = {\n      allMemeImgs: [],\n      memeDDFiltered: [],\n      memeImg: {},\n      topText: \"\",\n      bottomText: \"\",\n      memeInput: \"\",\n      memeDDVisible: false,\n      savedMemes: []\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.saveMemes = this.saveMemes.bind(this);\n    this.getAllMemes = this.getAllMemes.bind(this);\n  }\n\n  handleChange(e) {\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value\n    });\n    // console.log(this.state);\n  }\n  handleSubmit() {\n    // this.setState(prevState => {\n    //   formData = prevState.firstName;\n    //   return {\n    //     firstName: \"\",\n    //     lastName: \"\",\n    //     checkboxData: checkboxData,\n    //     radioData: radioData\n    //   };\n    // });\n    // return formData;\n  }\n\n  handleMemeInput(e) {\n    let myResults;\n    // this.setState({\n    //   memeInput: e.target.value\n    // });\n    console.log(memeDDList);\n    if (e !== null || e !== \"\") {\n      myResults = memeDDList.filter(function(myKey) {\n        return myKey[\"name\"].startsWith(e.target.value.toLowerCase());\n      });\n      console.log(myResults);\n      this.setState({\n        memeInput: e.target.value,\n        memeDDFiltered: myResults\n      });\n      // this.ddRef.current.childNodes[0].focus();\n      // console.log(this.ddRef.current);\n    }\n  }\n  eraseInput() {\n    console.log(this.memeInputRef);\n    this.memeInputRef.current.focus();\n    this.setState({\n      memeInput: \"\"\n    });\n  }\n  //   handleKeyUp(e) {\n  //     console.log(e.which);\n  //     this.setState({\n  //       memeDDVisible: true\n  //     });\n  //     // if (e.which === 40) {\n  //     //   this.ddRef.current.children[this.state.ddListIndex].focus();\n  //     // }\n  //   }\n  handleInputClick() {\n    this.setState({\n      memeDDVisible: true\n    });\n  }\n  handleDDClick(val, name) {\n    console.log(val);\n    this.setState({\n      [name]: val,\n      memeDDVisible: false\n    });\n  }\n  getAllMemes(memes) {\n    this.setState({\n      allMemeImgs: memes,\n      memeImg: memes[0]\n    });\n    memeDDList = memes;\n    console.log(this.state);\n    console.log(this.state.allMemeImgs[0]);\n  }\n  saveMemes() {\n    this.setState(prevState => {\n      console.log(prevState);\n      let newList = { ...prevState.savedMemes };\n      console.log(newList);\n      //   newList.push({\n      //     topText: this.state.topText,\n      //     bottomText: this.state.bottomText,\n      //     memeImg: this.state.memeImg[\"url\"],\n      //     name: this.state.memeImg[\"name\"]\n      //   });\n      return {\n        savedMemes: newList\n      };\n    });\n    console.log(this.state);\n  }\n  componentDidMount() {\n    fetch(memeApi)\n      .then(res => res.json())\n      .then(res => {\n        console.log(res.data.memes);\n\n        this.getAllMemes(res.data.memes);\n      });\n  }\n  render() {\n    return (\n      <article\n        className=\"portfolio-card\"\n        style={{ backgroundColor: \"var(--background-main)\" }}\n      >\n        <div className=\"text-section\">\n          <h1 className=\"title\">MemeGenerator</h1>\n          {/* <h4 className=\"subtitle\">Login</h4> */}\n        </div>\n        {/* <form onSubmit={() => this.handleSubmit()}> */}\n        <div className=\"input-group\">\n          <div className=\"relative\">\n            <div className=\"clearable\">\n              <input\n                ref={this.memeInputRef}\n                className=\"input-style\"\n                type=\"text\"\n                placeholder=\"search meme\"\n                name=\"memeInput\"\n                autoComplete=\"off\"\n                value={this.state.memeInput}\n                onChange={e => {\n                  this.handleMemeInput(e);\n                }}\n                onClick={() => {\n                  this.handleInputClick();\n                }}\n              />\n\n              {this.state.memeInput !== \"\" ? (\n                <span\n                  className=\"clearable-clear mdi mdi-close\"\n                  onClick={() => {\n                    this.eraseInput();\n                  }}\n                ></span>\n              ) : null}\n              {this.state.memeDDVisible && (\n                <div className=\"dropdown-container\" ref={this.ddRef}>\n                  {this.state.memeDDFiltered !== \"\" &&\n                    this.state.memeDDFiltered.map((val, i) => {\n                      return (\n                        <button\n                          key={i}\n                          onClick={e => {\n                            this.handleDDClick(val, \"memeImg\");\n                          }}\n                          // value={this.state.selectedTicker}\n                        >\n                          <div\n                            className=\"meme-dd-div\"\n                            style={{\n                              backgroundImage: `url(${val[\"url\"]})`\n                            }}\n                          ></div>\n                          - {val.name}\n                        </button>\n                      );\n                    })}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n        <div className=\"mt-2\">\n          <div className=\"input-group mt-2\">\n            <div className=\"label-style\">Top Text</div>\n            <input\n              className=\"input-style\"\n              name=\"topText\"\n              value={this.state.topText}\n              type=\"text\"\n              onChange={e => this.handleChange(e)}\n            />\n          </div>\n          <div className=\"input-group mt-2\">\n            <div className=\"label-style\">Bottom Text</div>\n            <input\n              className=\"input-style\"\n              name=\"bottomText\"\n              value={this.state.bottomText}\n              type=\"text\"\n              onChange={e => this.handleChange(e)}\n            />\n          </div>\n          <div\n            className=\"meme-div\"\n            style={{ backgroundImage: `url(${this.state.memeImg[\"url\"]})` }}\n          >\n            <div className=\"meme-text mt-2\">{this.state.topText}</div>\n            <div className=\"meme-text\">{this.state.bottomText}</div>\n          </div>\n          <small className=\"mt-1\"> {this.state.memeImg[\"name\"]}</small>\n        </div>\n        <div className=\"mt-2\">\n          <button\n            className=\"outline-btn accent\"\n            onClick={() => {\n              this.saveMemes();\n            }}\n          >\n            save\n          </button>\n        </div>\n        {/* </form> */}\n      </article>\n    );\n  }\n}\n\nexport default MemeGenerator;\n"]},"metadata":{},"sourceType":"module"}