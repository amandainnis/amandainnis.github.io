{"ast":null,"code":"import _slicedToArray from \"/Users/amandainnis/ReactProjects/react-site/portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/amandainnis/ReactProjects/react-site/portfolio/src/components/reusable/LineChartSinglePrice.js\";\nimport React, { createRef, useState, useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport * as DataHandler from \"../../data/DataHandler\";\nimport * as moment from \"../../../node_modules/moment/moment\";\nexport default function LineChartSinglePrice() {\n  const chart = createRef();\n  const startValTicker = useRef();\n  const startValBenchmark = useRef();\n  const defaultHeight = 220;\n  var containerElement;\n  let YOYdiff;\n\n  const _useState = useState(DataHandler.alphaCaptureChartData),\n        _useState2 = _slicedToArray(_useState, 2),\n        chartData = _useState2[0],\n        setChartData = _useState2[1];\n\n  function numberFormatFn(d) {\n    return \"$\" + d;\n  } // function getLineDiffValue(line0, lineTwo) {\n  //   return line0 == null || lineTwo == null ? null : line0 - lineTwo;\n  // }\n\n\n  function getYOYdiffColor(YOY) {\n    if (YOY < 0) {\n      return \"YOYred\";\n    } else {\n      return \"YOYgreen\";\n    }\n  }\n\n  function prepMaxVal(myData, myArrayOfKeys) {\n    let tempArr = [];\n\n    for (let i = 0; i < myData.length; i++) {\n      // push whatever arr[j] is in the array as a key into\n      for (let j = 0; j < myArrayOfKeys.length; j++) {\n        if (myData[i][myArrayOfKeys[j]] !== null) tempArr.push(myData[i][myArrayOfKeys[j]]);\n      }\n    } // console.log(tempArr);\n\n\n    return tempArr;\n  }\n\n  function getMaxVal(myData, myArrayOfKeys) {\n    let tempArr = prepMaxVal(myData, myArrayOfKeys);\n    let tempArrB = prepMaxVal(myData, myArrayOfKeys);\n    let tempMax = tempArr.reduce((a, b) => Math.max(a, b));\n    let tempMin = tempArrB.reduce((a, b) => Math.min(a, b));\n    return {\n      min: tempMin,\n      max: tempMax\n    };\n  }\n\n  function createChart(chartData, myArrayOfKeys) {\n    containerElement = chart.current;\n    containerElement.innerHTML = \"\";\n    let tempMinMax = getMaxVal(chartData, myArrayOfKeys);\n    let minVal = tempMinMax.min;\n    let maxVal = tempMinMax.max; // let currentMonth = getCurrentMonth();\n\n    let margin = {\n      top: 20,\n      right: 60,\n      bottom: 0,\n      left: 10\n    }; //////////////////////// Establish the reused vals and the bound functions  ////////////////////////\n\n    let width = Number.isNaN(parseInt(d3.select(containerElement).style(\"width\"))) ? 0 : parseInt(d3.select(containerElement).style(\"width\")) - margin.left - margin.right;\n    let height = 220 - margin.top;\n    let justBisect = d3.bisector(d => chartData.indexOf(d)).left; //////////////////////// Set the scales  ////////////////////////\n\n    let x = d3.scaleLinear().range([0, width]);\n    let y = d3.scaleLinear().range([height, 0]); //////////////////////// Set the axis ////////////////////////\n\n    let xAxis = d3.axisBottom(x) // .ticks(12)\n    .tickFormat(function (d) {\n      return chartData[d].niceDateAbbrev;\n    }).tickPadding(6);\n    let yAxis = d3.axisRight(y).tickFormat(d => {\n      return numberFormatFn(d);\n    }).ticks(6).tickPadding(6); //////////////////////// Define the lines and/or areas  ////////////////////////\n    // put consts of the lines into the global scope\n\n    function createLineConsts() {\n      let myArr = [];\n      myArrayOfKeys.map((val, index) => {\n        myArr.push(d3.line().defined(function (d) {\n          if (d[val] !== null) {\n            return d[val];\n          }\n        }).x((d, i) => {\n          return x(i);\n        }).y(d => y(d[val])));\n      });\n      return myArr;\n    }\n\n    const lineConst = createLineConsts();\n    console.log(lineConst[0]); // const line0 = d3\n    //   .line()\n    //   .defined(function(d) {\n    //     if (d[yLine0] !== null) {\n    //       return d[yLine0];\n    //     }\n    //   })\n    //   .x((d, i) => {\n    //     return x(i);\n    //   })\n    //   .y(d => y(d[yLine0]));\n    // //////////////////////// Define parent SVG  ////////////////////////\n    // const CVsvg = d3\n    //   .select(containerElement)\n    //   .append(\"svg\")\n    //   .attr(\"width\", \"100%\")\n    //   .attr(\"height\", height + margin.top + margin.bottom + 40)\n    //   .append(\"g\")\n    //   .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    // // //////////////////////// Loop through / sort data  ////////////////////////\n    // chartData.forEach(d => {\n    //   d = +d;\n    // });\n    // // //////////////////////// Set the domains  ////////////////////////\n    // x.domain([\n    //   parseInt(d3.min(chartData, (d, i) => i)),\n    //   parseInt(d3.max(chartData, (d, i) => i))\n    // ]);\n    // // y.domain([minVal, maxVal]);\n    // y.domain([0, maxVal]);\n    // // //////////////////////// Append the lines / areas  ////////////////////////\n    // CVsvg.append(\"path\")\n    //   .datum(chartData)\n    //   .attr(\"class\", \"line0 line\")\n    //   .attr(\"d\", line0)\n    //   .transition()\n    //   .duration(500);\n    // // ///////////////////////  Add the X & Y Axis  ////////////////////////\n    // CVsvg.append(\"g\")\n    //   .attr(\"class\", \"yAxis\")\n    //   .attr(\"transform\", \"translate(\" + (width + 6) + \",0)\")\n    //   .call(yAxis);\n    // CVsvg.append(\"g\")\n    //   .attr(\"class\", \"xAxis\")\n    //   .attr(\"transform\", \"translate(0,\" + height + \")\")\n    //   .call(xAxis);\n    // // //////////////////////// Add Line Tracing on mouse and markers   ////////////////////////\n    // const lineTrace = CVsvg.append(\"line\")\n    //   .attr(\"class\", \"mouse-line x\")\n    //   .style(\"opacity\", 0.5)\n    //   .attr(\"y1\", 0)\n    //   .attr(\"y2\", height);\n    // const marker = CVsvg.append(\"g\").attr(\"class\", \"marker\");\n    // marker\n    //   .append(\"circle\")\n    //   .attr(\"class\", \"line-marker line0\")\n    //   .transition()\n    //   .duration(500)\n    //   .attr(\"r\", 5);\n    // // //////////////////////// Tooltip  ////////////////////////\n    // const tooltipDiv = d3\n    //   .select(containerElement)\n    //   .append(\"div\")\n    //   .attr(\"class\", \"tooltipDiv\");\n    // const dateContainer = tooltipDiv\n    //   .append(\"div\")\n    //   .attr(\"class\", \"text-container\");\n    // dateContainer\n    //   .append(\"div\")\n    //   .attr(\"class\", \"label-style mr-1\")\n    //   .text(\"Date\");\n    // const dateText = dateContainer.append(\"div\").attr(\"class\", \"value-text\");\n    // const lineOneTextContainer = tooltipDiv\n    //   .append(\"div\")\n    //   .attr(\"class\", \"text-container\");\n    // lineOneTextContainer\n    //   .append(\"div\")\n    //   .attr(\"class\", \"label-style mr-1\")\n    //   .text(\"2018\");\n    // lineOneTextContainer.append(\"div\").attr(\"class\", \"dot line0\");\n    // const lineOneText = lineOneTextContainer\n    //   .append(\"div\")\n    //   .attr(\"class\", \"value-text\");\n    // const YOYContainer = tooltipDiv\n    //   .append(\"div\")\n    //   .attr(\"class\", \"text-container\");\n    // YOYContainer.append(\"div\")\n    //   .attr(\"class\", \"label-style mr-1\")\n    //   .text(\"YOY\");\n    // const YOYText = YOYContainer.append(\"div\");\n    // //////////////////////// Add Rect to Capture Mouse Movements  ////////////////////////\n    // CVsvg.append(\"rect\")\n    //   .on(\"mouseover\", () => {\n    //     lineTrace.style(\"display\", null);\n    //     d3.select(\".mouse-line\").style(\"opacity\", \"1\");\n    //     d3.selectAll(\".mouse-per-line .line-marker\").style(\"opacity\", \"1\");\n    //   })\n    //   .on(\"mousemove\", () => {\n    //     let xy = d3.mouse(d3.event.currentTarget);\n    //     let x0 = x.invert(xy[0]);\n    //     let mouseIndex = justBisect(chartData, x0, 1);\n    //     let d0 = chartData[mouseIndex - 1];\n    //     let d1 = chartData[mouseIndex];\n    //     let d;\n    //     if (d1 !== undefined) {\n    //       d = x0 - chartData.indexOf(d0) > chartData.indexOf(d1) - x0 ? d1 : d0;\n    //     } else {\n    //       d = d0;\n    //     }\n    //     lineTrace.attr(\n    //       \"transform\",\n    //       \"translate(\" + x(chartData.indexOf(d)) + \",0)\"\n    //     );\n    //     marker.attr(\n    //       \"transform\",\n    //       \"translate(\" + x(chartData.indexOf(d)) + \",\" + y(d[yLine0]) + \")\"\n    //     );\n    //     let l1text = d[yLine0] !== null ? numberFormatFn(d[yLine0]) : \"\";\n    //     // // YOYdiff = YOYdiff !== null ? numberFormatFn(YOYdiff) : \"\";\n    //     lineOneText.text(l1text);\n    //     dateText.text(d.niceDate + \" \" + d.niceTime);\n    //     // // YOYText.text(YOYdiff);\n    //     // // YOYText.attr(\"class\", YOYdiffColor);\n    //     d3.select(\".mouse-line.x\").attr(\"y2\", height);\n    //   })\n    //   .attr(\"class\", \"totalRect\")\n    //   .attr(\"fill\", \"none\")\n    //   .attr(\"x\", 0)\n    //   .attr(\"pointer-events\", \"all\")\n    //   .attr(\"width\", width)\n    //   .attr(\"transform\", \"translate(0,0)\")\n    //   .attr(\"height\", height)\n    //   .transition()\n    //   .duration(500);\n    // //////////////////////// Set the data on load ////////////////////////\n    // d3.set().add(chartData[chartData.length - 1]);\n    // let d = chartData[chartData.length - 1];\n    // lineTrace.attr(\"transform\", \"translate(\" + x(chartData.indexOf(d)) + \",0)\");\n    // marker.attr(\n    //   \"transform\",\n    //   \"translate(\" + x(chartData.indexOf(d)) + \",\" + y(d[yLine0]) + \")\"\n    // );\n    // let l1text = d[yLine0] !== null ? numberFormatFn(d[yLine0]) : \"\";\n    // // // YOYdiff = YOYdiff !== null ? numberFormatFn(YOYdiff) : \"\";\n    // lineOneText.text(l1text);\n    // dateText.text(d.niceDate + \" \" + d.niceTime);\n    // // // YOYText.text(YOYdiff);\n    // // // YOYText.attr(\"class\", YOYdiffColor);\n    // d3.select(\".mouse-line.x\").attr(\"y2\", height);\n  }\n\n  useEffect(() => {\n    createChart(chartData, [\"price\", \"benchmark\"]);\n  }, []);\n  return React.createElement(\"div\", {\n    ref: chart,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308\n    },\n    __self: this\n  });\n}","map":{"version":3,"sources":["/Users/amandainnis/ReactProjects/react-site/portfolio/src/components/reusable/LineChartSinglePrice.js"],"names":["React","createRef","useState","useRef","useEffect","d3","DataHandler","moment","LineChartSinglePrice","chart","startValTicker","startValBenchmark","defaultHeight","containerElement","YOYdiff","alphaCaptureChartData","chartData","setChartData","numberFormatFn","d","getYOYdiffColor","YOY","prepMaxVal","myData","myArrayOfKeys","tempArr","i","length","j","push","getMaxVal","tempArrB","tempMax","reduce","a","b","Math","max","tempMin","min","createChart","current","innerHTML","tempMinMax","minVal","maxVal","margin","top","right","bottom","left","width","Number","isNaN","parseInt","select","style","height","justBisect","bisector","indexOf","x","scaleLinear","range","y","xAxis","axisBottom","tickFormat","niceDateAbbrev","tickPadding","yAxis","axisRight","ticks","createLineConsts","myArr","map","val","index","line","defined","lineConst","console","log"],"mappings":"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","sourcesContent":["import React, { createRef, useState, useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport * as DataHandler from \"../../data/DataHandler\";\nimport * as moment from \"../../../node_modules/moment/moment\";\n\nexport default function LineChartSinglePrice() {\n  const chart = createRef();\n  const startValTicker = useRef();\n  const startValBenchmark = useRef();\n  const defaultHeight = 220;\n  var containerElement;\n  let YOYdiff;\n  const [chartData, setChartData] = useState(DataHandler.alphaCaptureChartData);\n\n  function numberFormatFn(d) {\n    return \"$\" + d;\n  }\n\n  // function getLineDiffValue(line0, lineTwo) {\n  //   return line0 == null || lineTwo == null ? null : line0 - lineTwo;\n  // }\n  function getYOYdiffColor(YOY) {\n    if (YOY < 0) {\n      return \"YOYred\";\n    } else {\n      return \"YOYgreen\";\n    }\n  }\n  function prepMaxVal(myData, myArrayOfKeys) {\n    let tempArr = [];\n\n    for (let i = 0; i < myData.length; i++) {\n      // push whatever arr[j] is in the array as a key into\n      for (let j = 0; j < myArrayOfKeys.length; j++) {\n        if (myData[i][myArrayOfKeys[j]] !== null)\n          tempArr.push(myData[i][myArrayOfKeys[j]]);\n      }\n    }\n    // console.log(tempArr);\n    return tempArr;\n  }\n\n  function getMaxVal(myData, myArrayOfKeys) {\n    let tempArr = prepMaxVal(myData, myArrayOfKeys);\n    let tempArrB = prepMaxVal(myData, myArrayOfKeys);\n\n    let tempMax = tempArr.reduce((a, b) => Math.max(a, b));\n    let tempMin = tempArrB.reduce((a, b) => Math.min(a, b));\n    return { min: tempMin, max: tempMax };\n  }\n  function createChart(chartData, myArrayOfKeys) {\n    containerElement = chart.current;\n    containerElement.innerHTML = \"\";\n    let tempMinMax = getMaxVal(chartData, myArrayOfKeys);\n    let minVal = tempMinMax.min;\n    let maxVal = tempMinMax.max;\n    // let currentMonth = getCurrentMonth();\n    let margin = { top: 20, right: 60, bottom: 0, left: 10 };\n    //////////////////////// Establish the reused vals and the bound functions  ////////////////////////\n    let width = Number.isNaN(\n      parseInt(d3.select(containerElement).style(\"width\"))\n    )\n      ? 0\n      : parseInt(d3.select(containerElement).style(\"width\")) -\n        margin.left -\n        margin.right;\n    let height = 220 - margin.top;\n    let justBisect = d3.bisector(d => chartData.indexOf(d)).left;\n\n    //////////////////////// Set the scales  ////////////////////////\n\n    let x = d3.scaleLinear().range([0, width]);\n\n    let y = d3.scaleLinear().range([height, 0]);\n\n    //////////////////////// Set the axis ////////////////////////\n\n    let xAxis = d3\n      .axisBottom(x)\n      // .ticks(12)\n      .tickFormat(function(d) {\n        return chartData[d].niceDateAbbrev;\n      })\n      .tickPadding(6);\n\n    let yAxis = d3\n      .axisRight(y)\n      .tickFormat(d => {\n        return numberFormatFn(d);\n      })\n      .ticks(6)\n      .tickPadding(6);\n\n    //////////////////////// Define the lines and/or areas  ////////////////////////\n\n    // put consts of the lines into the global scope\n    function createLineConsts() {\n      let myArr = [];\n      myArrayOfKeys.map((val, index) => {\n        myArr.push(\n          d3\n            .line()\n            .defined(function(d) {\n              if (d[val] !== null) {\n                return d[val];\n              }\n            })\n            .x((d, i) => {\n              return x(i);\n            })\n            .y(d => y(d[val]))\n        );\n      });\n      return myArr;\n    }\n\n    const lineConst = createLineConsts();\n    console.log(lineConst[0]);\n\n    // const line0 = d3\n    //   .line()\n    //   .defined(function(d) {\n    //     if (d[yLine0] !== null) {\n    //       return d[yLine0];\n    //     }\n    //   })\n    //   .x((d, i) => {\n    //     return x(i);\n    //   })\n    //   .y(d => y(d[yLine0]));\n\n    // //////////////////////// Define parent SVG  ////////////////////////\n\n    // const CVsvg = d3\n    //   .select(containerElement)\n    //   .append(\"svg\")\n    //   .attr(\"width\", \"100%\")\n    //   .attr(\"height\", height + margin.top + margin.bottom + 40)\n    //   .append(\"g\")\n    //   .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    // // //////////////////////// Loop through / sort data  ////////////////////////\n\n    // chartData.forEach(d => {\n    //   d = +d;\n    // });\n\n    // // //////////////////////// Set the domains  ////////////////////////\n\n    // x.domain([\n    //   parseInt(d3.min(chartData, (d, i) => i)),\n    //   parseInt(d3.max(chartData, (d, i) => i))\n    // ]);\n    // // y.domain([minVal, maxVal]);\n    // y.domain([0, maxVal]);\n\n    // // //////////////////////// Append the lines / areas  ////////////////////////\n\n    // CVsvg.append(\"path\")\n    //   .datum(chartData)\n    //   .attr(\"class\", \"line0 line\")\n    //   .attr(\"d\", line0)\n    //   .transition()\n    //   .duration(500);\n\n    // // ///////////////////////  Add the X & Y Axis  ////////////////////////\n\n    // CVsvg.append(\"g\")\n    //   .attr(\"class\", \"yAxis\")\n    //   .attr(\"transform\", \"translate(\" + (width + 6) + \",0)\")\n    //   .call(yAxis);\n\n    // CVsvg.append(\"g\")\n    //   .attr(\"class\", \"xAxis\")\n    //   .attr(\"transform\", \"translate(0,\" + height + \")\")\n    //   .call(xAxis);\n\n    // // //////////////////////// Add Line Tracing on mouse and markers   ////////////////////////\n\n    // const lineTrace = CVsvg.append(\"line\")\n    //   .attr(\"class\", \"mouse-line x\")\n    //   .style(\"opacity\", 0.5)\n    //   .attr(\"y1\", 0)\n    //   .attr(\"y2\", height);\n\n    // const marker = CVsvg.append(\"g\").attr(\"class\", \"marker\");\n\n    // marker\n    //   .append(\"circle\")\n    //   .attr(\"class\", \"line-marker line0\")\n    //   .transition()\n    //   .duration(500)\n    //   .attr(\"r\", 5);\n\n    // // //////////////////////// Tooltip  ////////////////////////\n\n    // const tooltipDiv = d3\n    //   .select(containerElement)\n    //   .append(\"div\")\n    //   .attr(\"class\", \"tooltipDiv\");\n    // const dateContainer = tooltipDiv\n    //   .append(\"div\")\n    //   .attr(\"class\", \"text-container\");\n    // dateContainer\n    //   .append(\"div\")\n    //   .attr(\"class\", \"label-style mr-1\")\n    //   .text(\"Date\");\n    // const dateText = dateContainer.append(\"div\").attr(\"class\", \"value-text\");\n    // const lineOneTextContainer = tooltipDiv\n    //   .append(\"div\")\n    //   .attr(\"class\", \"text-container\");\n    // lineOneTextContainer\n    //   .append(\"div\")\n    //   .attr(\"class\", \"label-style mr-1\")\n    //   .text(\"2018\");\n    // lineOneTextContainer.append(\"div\").attr(\"class\", \"dot line0\");\n\n    // const lineOneText = lineOneTextContainer\n    //   .append(\"div\")\n    //   .attr(\"class\", \"value-text\");\n\n    // const YOYContainer = tooltipDiv\n    //   .append(\"div\")\n    //   .attr(\"class\", \"text-container\");\n    // YOYContainer.append(\"div\")\n    //   .attr(\"class\", \"label-style mr-1\")\n    //   .text(\"YOY\");\n    // const YOYText = YOYContainer.append(\"div\");\n\n    // //////////////////////// Add Rect to Capture Mouse Movements  ////////////////////////\n\n    // CVsvg.append(\"rect\")\n    //   .on(\"mouseover\", () => {\n    //     lineTrace.style(\"display\", null);\n    //     d3.select(\".mouse-line\").style(\"opacity\", \"1\");\n    //     d3.selectAll(\".mouse-per-line .line-marker\").style(\"opacity\", \"1\");\n    //   })\n    //   .on(\"mousemove\", () => {\n    //     let xy = d3.mouse(d3.event.currentTarget);\n\n    //     let x0 = x.invert(xy[0]);\n    //     let mouseIndex = justBisect(chartData, x0, 1);\n    //     let d0 = chartData[mouseIndex - 1];\n    //     let d1 = chartData[mouseIndex];\n    //     let d;\n    //     if (d1 !== undefined) {\n    //       d = x0 - chartData.indexOf(d0) > chartData.indexOf(d1) - x0 ? d1 : d0;\n    //     } else {\n    //       d = d0;\n    //     }\n\n    //     lineTrace.attr(\n    //       \"transform\",\n    //       \"translate(\" + x(chartData.indexOf(d)) + \",0)\"\n    //     );\n    //     marker.attr(\n    //       \"transform\",\n    //       \"translate(\" + x(chartData.indexOf(d)) + \",\" + y(d[yLine0]) + \")\"\n    //     );\n\n    //     let l1text = d[yLine0] !== null ? numberFormatFn(d[yLine0]) : \"\";\n\n    //     // // YOYdiff = YOYdiff !== null ? numberFormatFn(YOYdiff) : \"\";\n    //     lineOneText.text(l1text);\n\n    //     dateText.text(d.niceDate + \" \" + d.niceTime);\n    //     // // YOYText.text(YOYdiff);\n    //     // // YOYText.attr(\"class\", YOYdiffColor);\n\n    //     d3.select(\".mouse-line.x\").attr(\"y2\", height);\n    //   })\n    //   .attr(\"class\", \"totalRect\")\n    //   .attr(\"fill\", \"none\")\n    //   .attr(\"x\", 0)\n    //   .attr(\"pointer-events\", \"all\")\n    //   .attr(\"width\", width)\n    //   .attr(\"transform\", \"translate(0,0)\")\n    //   .attr(\"height\", height)\n    //   .transition()\n    //   .duration(500);\n\n    // //////////////////////// Set the data on load ////////////////////////\n\n    // d3.set().add(chartData[chartData.length - 1]);\n    // let d = chartData[chartData.length - 1];\n    // lineTrace.attr(\"transform\", \"translate(\" + x(chartData.indexOf(d)) + \",0)\");\n    // marker.attr(\n    //   \"transform\",\n    //   \"translate(\" + x(chartData.indexOf(d)) + \",\" + y(d[yLine0]) + \")\"\n    // );\n\n    // let l1text = d[yLine0] !== null ? numberFormatFn(d[yLine0]) : \"\";\n\n    // // // YOYdiff = YOYdiff !== null ? numberFormatFn(YOYdiff) : \"\";\n    // lineOneText.text(l1text);\n\n    // dateText.text(d.niceDate + \" \" + d.niceTime);\n    // // // YOYText.text(YOYdiff);\n    // // // YOYText.attr(\"class\", YOYdiffColor);\n\n    // d3.select(\".mouse-line.x\").attr(\"y2\", height);\n  }\n\n  useEffect(() => {\n    createChart(chartData, [\"price\", \"benchmark\"]);\n  }, []);\n\n  return <div ref={chart}></div>;\n}\n"]},"metadata":{},"sourceType":"module"}