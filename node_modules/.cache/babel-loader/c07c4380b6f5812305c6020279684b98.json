{"ast":null,"code":"import _slicedToArray from\"/Users/amandainnis/amandainnis.github.io/amandainnis.github.io/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';export default function useDebounce(value,delay){//passing in value and delay from another place\nvar _useState=useState(value),_useState2=_slicedToArray(_useState,2),debouncedValue=_useState2[0],setDebouncedValue=_useState2[1];useEffect(function(){var handler=setTimeout(function(){setDebouncedValue(value);},delay);// https://dev.to/gabe_ragland/debouncing-with-react-hooks-jci\n// Return a cleanup function that will be called every time ...\n// ... useEffect is re-called. useEffect will only be re-called ...\n// ... if value changes (see the inputs array below). \n// This is how we prevent debouncedValue from changing if value is ...\n// ... changed within the delay period. Timeout gets cleared and restarted.\n// To put it in context, if the user is typing within our app's ...\n// ... search box, we don't want the debouncedValue to update until ...\n// ... they've stopped typing for more than 500ms.\nreturn function(){clearTimeout(handler);};// Only re-call effect if value changes\n// You could also add the \"delay\" var to inputs array if you ...\n// ... need to be able to change that dynamically\n},[value]);return debouncedValue;}","map":{"version":3,"sources":["/Users/amandainnis/amandainnis.github.io/amandainnis.github.io/src/components/reusable/useDebounce.js"],"names":["React","useState","useEffect","useDebounce","value","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout"],"mappings":"iJAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,CAAyBC,SAAzB,KAAyC,OAAzC,CAEA,cAAe,SAASC,CAAAA,WAAT,CAAqBC,KAArB,CAA4BC,KAA5B,CAAkC,CACjD;AADiD,cAEJJ,QAAQ,CAACG,KAAD,CAFJ,wCAEzCE,cAFyC,eAEzBC,iBAFyB,eAIhDL,SAAS,CAAC,UAAM,CACf,GAAMM,CAAAA,OAAO,CAAGC,UAAU,CAAC,UAAM,CAChCF,iBAAiB,CAACH,KAAD,CAAjB,CACA,CAFyB,CAEvBC,KAFuB,CAA1B,CAIA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEJ,MAAO,WAAM,CACZK,YAAY,CAACF,OAAD,CAAZ,CACA,CAFD,CAGE;AACA;AACA;AACF,CArBQ,CAqBN,CAACJ,KAAD,CArBM,CAAT,CAuBA,MAAOE,CAAAA,cAAP,CAEA","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nexport default function useDebounce(value, delay){\n//passing in value and delay from another place\n\tconst [debouncedValue, setDebouncedValue] = useState(value);\n\n\tuseEffect(() => {\n\t\tconst handler = setTimeout(() => {\n\t\t\tsetDebouncedValue(value);\n\t\t}, delay);\n\n\t\t// https://dev.to/gabe_ragland/debouncing-with-react-hooks-jci\n      // Return a cleanup function that will be called every time ...\n      // ... useEffect is re-called. useEffect will only be re-called ...\n      // ... if value changes (see the inputs array below). \n      // This is how we prevent debouncedValue from changing if value is ...\n      // ... changed within the delay period. Timeout gets cleared and restarted.\n      // To put it in context, if the user is typing within our app's ...\n      // ... search box, we don't want the debouncedValue to update until ...\n      // ... they've stopped typing for more than 500ms.\n\n\t\treturn () => {\n\t\t\tclearTimeout(handler);\n\t\t}\n    // Only re-call effect if value changes\n    // You could also add the \"delay\" var to inputs array if you ...\n    // ... need to be able to change that dynamically\n\t}, [value]\n\t);\n\treturn debouncedValue;\n\n}"]},"metadata":{},"sourceType":"module"}