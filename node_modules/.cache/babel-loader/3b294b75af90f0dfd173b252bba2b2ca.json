{"ast":null,"code":"var _jsxFileName = \"/Users/amandainnis/ReactProjects/board-app/src/components/crb/CRBCard.js\";\nimport React from \"react\";\nimport IsLoading from \"../reusable/IsLoading\";\nimport * as Common from \"../reusable/common\";\n\nconst imgCRB = require(\"../../assets/images/crb-img.png\");\n\nconst data = {\n  id: 3,\n  img: imgCRB,\n  title: \"CRB Pricer\",\n  subtitle: \"Central Risk Book Pricing and Trade Execution\",\n  blurb: [\"\"],\n  bkgd: \"var(--crb-bkgd)\"\n};\n\nclass CRBCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this._isMounted = false;\n\n    this.getTickerURL = ticker => \"https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=\".concat(ticker, \"&interval=5min&outputsize=full&apikey=NKT90SOYWKFBP04F\");\n\n    this.tickerInputRef = React.createRef();\n    this.state = {\n      // tickerInputRef: this.tickerInputRef,\n      price: 0,\n      ticker: \"AMZN\",\n      tickerInput: \"AMZN\",\n      isLoading: true\n    }; // this.loadingFunc = this.loadingFunc.bind(this);\n    // O_ZSRWosEBhztl68tl2vPw  us funda\n  }\n\n  fetchTicker(ticker) {\n    return fetch(this.getTickerURL(ticker)).then(res => {\n      // console.log(res);\n      if (!res.ok) {\n        throw Error(\"sadface, the res doesnt want to be our friend, but dont feel bad.  btw im middleware\");\n      } // console.log(res);\n\n\n      return res;\n    }).then(res => // this is the promise so don't have a return statement, it will be if and when  its ready\n    // better with es6\n    // console.log(res.json())\n    res.json()); // .then(res => enzo = res);\n  }\n\n  resolveFetchedTicker(ticker, loadingBool) {\n    this.setState({\n      isLoading: true\n    });\n    this.fetchTicker(ticker).then(res => {\n      // let myDate = new Date();\n      // console.log(myDate);\n      let myKeys;\n\n      if (loadingBool) {\n        if (res !== undefined && res[\"Time Series (5min)\"] !== undefined) {\n          myKeys = Object.keys(res[\"Time Series (5min)\"]);\n          this.setState({\n            isLoading: false,\n            ticker: ticker,\n            price: res[\"Time Series (5min)\"][myKeys[0]][\"1. open\"]\n          });\n        } else {\n          this.setState({\n            isLoading: false,\n            ticker: \"Not a Ticker\",\n            price: null\n          });\n        }\n      }\n    });\n  }\n\n  updateInputValue(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  getPrice() {\n    const myTicker = this.state.tickerInput;\n    this.setState({\n      ticker: myTicker\n    });\n    console.log(myTicker);\n    this.resolveFetchedTicker(myTicker, true);\n  }\n\n  eraseInput() {\n    console.log(this.tickerInputRef);\n    this.tickerInputRef.current.focus();\n    this.setState({\n      tickerInput: \"\",\n      ticker: \"\",\n      price: \"\"\n    });\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    this.resolveFetchedTicker(\"AMZN\", this._isMounted); // // console.log(myTicker);\n    // this.loadingFunc(true);\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    let price = Math.round(this.state.price * 100) / 100;\n    price = this.state.price !== \"\" ? \"$\" + price : \"\";\n    const ticker = this.state.ticker; // this is a promise\n\n    return React.createElement(\"article\", {\n      className: \"portfolio-card\",\n      style: {\n        backgroundColor: data.bkgd\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(IsLoading, {\n      isLoading: this.state.isLoading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"text-section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, data.title), React.createElement(\"h4\", {\n      className: \"subtitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, data.subtitle)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"flex-row mt-3 crb-title-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"ticker-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, ticker.toUpperCase()), React.createElement(\"div\", {\n      className: \"price-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, price)), React.createElement(\"div\", {\n      className: \"input-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"clearable\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      ref: this.tickerInputRef,\n      className: \"input-style crb-input\",\n      type: \"text\",\n      placeholder: \"ticker\",\n      name: \"ticker\" // value={this.state.tickerInput}\n      ,\n      onChange: e => {\n        this.updateInputValue(e);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), this.state.tickerInput !== \"\" ? React.createElement(\"span\", {\n      className: \"clearable-clear mdi mdi-close\",\n      onClick: () => {\n        this.eraseInput();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }) : null)), React.createElement(\"button\", {\n      onClick: () => {\n        this.getPrice();\n      },\n      className: \"var(--crb-button-type) large green mt-3 crb-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"price\")));\n  }\n\n}\n\nexport default CRBCard;","map":{"version":3,"sources":["/Users/amandainnis/ReactProjects/board-app/src/components/crb/CRBCard.js"],"names":["React","IsLoading","Common","imgCRB","require","data","id","img","title","subtitle","blurb","bkgd","CRBCard","Component","constructor","props","_isMounted","getTickerURL","ticker","tickerInputRef","createRef","state","price","tickerInput","isLoading","fetchTicker","fetch","then","res","ok","Error","json","resolveFetchedTicker","loadingBool","setState","myKeys","undefined","Object","keys","updateInputValue","e","target","name","value","getPrice","myTicker","console","log","eraseInput","current","focus","componentDidMount","componentWillUnmount","render","Math","round","backgroundColor","toUpperCase"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport IsLoading from \"../reusable/IsLoading\";\nimport * as Common from \"../reusable/common\";\nconst imgCRB = require(\"../../assets/images/crb-img.png\");\nconst data = {\n  id: 3,\n  img: imgCRB,\n  title: \"CRB Pricer\",\n  subtitle: \"Central Risk Book Pricing and Trade Execution\",\n  blurb: [\"\"],\n  bkgd: \"var(--crb-bkgd)\"\n};\nclass CRBCard extends React.Component {\n  _isMounted = false;\n\n  constructor(props) {\n    super(props);\n    this.tickerInputRef = React.createRef();\n    this.state = {\n      // tickerInputRef: this.tickerInputRef,\n      price: 0,\n      ticker: \"AMZN\",\n      tickerInput: \"AMZN\",\n      isLoading: true\n    };\n    // this.loadingFunc = this.loadingFunc.bind(this);\n\n    // O_ZSRWosEBhztl68tl2vPw  us funda\n  }\n  getTickerURL = ticker =>\n    `https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=${ticker}&interval=5min&outputsize=full&apikey=NKT90SOYWKFBP04F`;\n\n  fetchTicker(ticker) {\n    return fetch(this.getTickerURL(ticker))\n      .then(res => {\n        // console.log(res);\n        if (!res.ok) {\n          throw Error(\n            \"sadface, the res doesnt want to be our friend, but dont feel bad.  btw im middleware\"\n          );\n        }\n        // console.log(res);\n        return res;\n      })\n      .then(res =>\n        // this is the promise so don't have a return statement, it will be if and when  its ready\n        // better with es6\n        // console.log(res.json())\n        res.json()\n      );\n    // .then(res => enzo = res);\n  }\n  resolveFetchedTicker(ticker, loadingBool) {\n    this.setState({\n      isLoading: true\n    });\n    this.fetchTicker(ticker).then(res => {\n      // let myDate = new Date();\n      // console.log(myDate);\n      let myKeys;\n      if (loadingBool) {\n        if (res !== undefined && res[\"Time Series (5min)\"] !== undefined) {\n          myKeys = Object.keys(res[\"Time Series (5min)\"]);\n          this.setState({\n            isLoading: false,\n            ticker: ticker,\n            price: res[\"Time Series (5min)\"][myKeys[0]][\"1. open\"]\n          });\n        } else {\n          this.setState({\n            isLoading: false,\n            ticker: \"Not a Ticker\",\n            price: null\n          });\n        }\n      }\n    });\n  }\n\n  updateInputValue(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n  getPrice() {\n    const myTicker = this.state.tickerInput;\n    this.setState({ ticker: myTicker });\n    console.log(myTicker);\n    this.resolveFetchedTicker(myTicker, true);\n  }\n  eraseInput() {\n    console.log(this.tickerInputRef);\n    this.tickerInputRef.current.focus();\n    this.setState({\n      tickerInput: \"\",\n      ticker: \"\",\n      price: \"\"\n    });\n  }\n  componentDidMount() {\n    this._isMounted = true;\n    this.resolveFetchedTicker(\"AMZN\", this._isMounted);\n\n    // // console.log(myTicker);\n    // this.loadingFunc(true);\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n  render() {\n    let price = Math.round(this.state.price * 100) / 100;\n    price = this.state.price !== \"\" ? \"$\" + price : \"\";\n    const ticker = this.state.ticker;\n    // this is a promise\n\n    return (\n      <article\n        className=\"portfolio-card\"\n        style={{ backgroundColor: data.bkgd }}\n      >\n        <IsLoading isLoading={this.state.isLoading}></IsLoading>\n        <div className=\"text-section\">\n          <h1 className=\"title\">{data.title}</h1>\n          <h4 className=\"subtitle\">{data.subtitle}</h4>\n        </div>\n        <div>\n          <div className=\"flex-row mt-3 crb-title-row\">\n            <div className=\"ticker-title\">{ticker.toUpperCase()}</div>\n            <div className=\"price-title\">{price}</div>\n          </div>\n          <div className=\"input-group\">\n            <div className=\"clearable\">\n              <input\n                ref={this.tickerInputRef}\n                className=\"input-style crb-input\"\n                type=\"text\"\n                placeholder=\"ticker\"\n                name=\"ticker\"\n                // value={this.state.tickerInput}\n                onChange={e => {\n                  this.updateInputValue(e);\n                }}\n              />\n\n              {this.state.tickerInput !== \"\" ? (\n                <span\n                  className=\"clearable-clear mdi mdi-close\"\n                  onClick={() => {\n                    this.eraseInput();\n                  }}\n                ></span>\n              ) : null}\n            </div>\n          </div>\n          <button\n            onClick={() => {\n              this.getPrice();\n            }}\n            className=\"var(--crb-button-type) large green mt-3 crb-button\"\n          >\n            price\n          </button>\n        </div>\n      </article>\n    );\n  }\n}\n\nexport default CRBCard;\n"]},"metadata":{},"sourceType":"module"}