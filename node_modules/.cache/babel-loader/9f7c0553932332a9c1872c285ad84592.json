{"ast":null,"code":"var _jsxFileName = \"/Users/amandainnis/ReactProjects/board-app/src/components/forms/MemeGenerator.js\";\nimport React from \"react\";\nlet formData;\nconst memeApi = \"https://api.imgflip.com/get_memes\";\n\nclass MemeGenerator extends React.Component {\n  constructor(props) {\n    this.memeInputRef = React.createRef();\n    super(props);\n    this.state = {\n      allMemeImgs: [],\n      selectedMemes: [],\n      randomImg: \"https://i.imgflip.com/345v97.jpg\",\n      topText: \"\",\n      bottomText: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleMemes = this.handleMemes.bind(this);\n    this.getAllMemes = this.getAllMemes.bind(this);\n  }\n\n  handleChange(e) {\n    const _e$target = e.target,\n          name = _e$target.name,\n          value = _e$target.value;\n    this.setState({\n      [name]: value\n    }); // console.log(this.state);\n  }\n\n  handleSubmit() {// this.setState(prevState => {\n    //   formData = prevState.firstName;\n    //   return {\n    //     firstName: \"\",\n    //     lastName: \"\",\n    //     checkboxData: checkboxData,\n    //     radioData: radioData\n    //   };\n    // });\n    // return formData;\n  }\n\n  getAllMemes(memes) {\n    this.setState({\n      allMemeImgs: memes,\n      randomImg: memes[0]\n    });\n    console.log(this.state);\n    console.log(this.state.allMemeImgs[0]);\n  }\n\n  handleMemes(memes) {\n    this.setState(prevState => {\n      console.log(prevState);\n      return {\n        selectedMemes: memes[0]\n      };\n    });\n  }\n\n  componentDidMount() {\n    fetch(memeApi).then(res => res.json()).then(res => {\n      console.log(res.data.memes);\n      this.getAllMemes(res.data.memes);\n    });\n  }\n\n  render() {\n    return React.createElement(\"article\", {\n      className: \"portfolio-card\",\n      style: {\n        backgroundColor: \"var(--background-main)\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"text-section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"MemeGenerator\")), React.createElement(\"div\", {\n      className: \"input-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"relative\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"clearable\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      //   ref={this.tickerInputRef}\n      className: \"input-style crb-input\",\n      type: \"text\",\n      placeholder: \"ticker\",\n      name: \"tickerInput\",\n      autoComplete: \"off\",\n      value: this.state.tickerInput,\n      onChange: e => {\n        this.handleTickerInput(e);\n      },\n      onKeyUp: e => {\n        this.handleKeyUp(e);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), this.state.tickerInput !== \"\" ? React.createElement(\"span\", {\n      className: \"clearable-clear mdi mdi-close\",\n      onClick: () => {\n        this.eraseInput();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }) : null, this.state.tickerDDVisible && React.createElement(\"div\", {\n      className: \"dropdown-container crb\",\n      ref: this.ddRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, this.state.tickerDDFiltered !== \"\" && this.state.tickerDDFiltered.map((val, i) => {\n      return React.createElement(\"button\", {\n        key: i,\n        onClick: e => {\n          this.handleDDClick(val, \"tickerInput\");\n        },\n        value: this.state.selectedTicker,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, val.symbol, \" - \", val.name);\n    }))))), React.createElement(\"div\", {\n      className: \"mt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"input-group mt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"label-style\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Top Text\"), React.createElement(\"input\", {\n      className: \"input-style\",\n      name: \"topText\",\n      value: this.state.topText,\n      type: \"text\",\n      onChange: e => this.handleChange(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"input-group mt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"label-style\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Bottom Text\"), React.createElement(\"input\", {\n      className: \"input-style\",\n      name: \"bottomText\",\n      value: this.state.bottomText,\n      type: \"text\",\n      onChange: e => this.handleChange(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"meme-div\",\n      style: {\n        backgroundImage: \"url(\".concat(this.state.randomImg[\"url\"], \")\")\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"meme-text mt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, this.state.topText), React.createElement(\"div\", {\n      className: \"meme-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, this.state.bottomText)), React.createElement(\"small\", {\n      class: \"mt-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \" \", this.state.randomImg[\"name\"])), React.createElement(\"div\", {\n      className: \"mt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"outline-btn accent\",\n      onClick: () => {\n        this.handleSubmit();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"save\")));\n  }\n\n}\n\nexport default MemeGenerator;","map":{"version":3,"sources":["/Users/amandainnis/ReactProjects/board-app/src/components/forms/MemeGenerator.js"],"names":["React","formData","memeApi","MemeGenerator","Component","constructor","props","memeInputRef","createRef","state","allMemeImgs","selectedMemes","randomImg","topText","bottomText","handleChange","bind","handleSubmit","handleMemes","getAllMemes","e","target","name","value","setState","memes","console","log","prevState","componentDidMount","fetch","then","res","json","data","render","backgroundColor","tickerInput","handleTickerInput","handleKeyUp","eraseInput","tickerDDVisible","ddRef","tickerDDFiltered","map","val","i","handleDDClick","selectedTicker","symbol","backgroundImage"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nlet formData;\nconst memeApi = \"https://api.imgflip.com/get_memes\";\nclass MemeGenerator extends React.Component {\n  constructor(props) {\n    this.memeInputRef = React.createRef();\n    super(props);\n    this.state = {\n      allMemeImgs: [],\n      selectedMemes: [],\n      randomImg: \"https://i.imgflip.com/345v97.jpg\",\n      topText: \"\",\n      bottomText: \"\"\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleMemes = this.handleMemes.bind(this);\n    this.getAllMemes = this.getAllMemes.bind(this);\n  }\n\n  handleChange(e) {\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value\n    });\n    // console.log(this.state);\n  }\n  handleSubmit() {\n    // this.setState(prevState => {\n    //   formData = prevState.firstName;\n    //   return {\n    //     firstName: \"\",\n    //     lastName: \"\",\n    //     checkboxData: checkboxData,\n    //     radioData: radioData\n    //   };\n    // });\n    // return formData;\n  }\n  getAllMemes(memes) {\n    this.setState({\n      allMemeImgs: memes,\n      randomImg: memes[0]\n    });\n    console.log(this.state);\n    console.log(this.state.allMemeImgs[0]);\n  }\n  handleMemes(memes) {\n    this.setState(prevState => {\n      console.log(prevState);\n      return {\n        selectedMemes: memes[0]\n      };\n    });\n  }\n  componentDidMount() {\n    fetch(memeApi)\n      .then(res => res.json())\n      .then(res => {\n        console.log(res.data.memes);\n\n        this.getAllMemes(res.data.memes);\n      });\n  }\n  render() {\n    return (\n      <article\n        className=\"portfolio-card\"\n        style={{ backgroundColor: \"var(--background-main)\" }}\n      >\n        <div className=\"text-section\">\n          <h1 className=\"title\">MemeGenerator</h1>\n          {/* <h4 className=\"subtitle\">Login</h4> */}\n        </div>\n        {/* <form onSubmit={() => this.handleSubmit()}> */}\n        <div className=\"input-group\">\n          <div className=\"relative\">\n            <div className=\"clearable\">\n              <input\n                //   ref={this.tickerInputRef}\n                className=\"input-style crb-input\"\n                type=\"text\"\n                placeholder=\"ticker\"\n                name=\"tickerInput\"\n                autoComplete=\"off\"\n                value={this.state.tickerInput}\n                onChange={e => {\n                  this.handleTickerInput(e);\n                }}\n                onKeyUp={e => {\n                  this.handleKeyUp(e);\n                }}\n              />\n\n              {this.state.tickerInput !== \"\" ? (\n                <span\n                  className=\"clearable-clear mdi mdi-close\"\n                  onClick={() => {\n                    this.eraseInput();\n                  }}\n                ></span>\n              ) : null}\n              {this.state.tickerDDVisible && (\n                <div className=\"dropdown-container crb\" ref={this.ddRef}>\n                  {this.state.tickerDDFiltered !== \"\" &&\n                    this.state.tickerDDFiltered.map((val, i) => {\n                      return (\n                        <button\n                          key={i}\n                          onClick={e => {\n                            this.handleDDClick(val, \"tickerInput\");\n                          }}\n                          value={this.state.selectedTicker}\n                        >\n                          {val.symbol} - {val.name}\n                        </button>\n                      );\n                    })}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n        <div className=\"mt-2\">\n          <div className=\"input-group mt-2\">\n            <div className=\"label-style\">Top Text</div>\n            <input\n              className=\"input-style\"\n              name=\"topText\"\n              value={this.state.topText}\n              type=\"text\"\n              onChange={e => this.handleChange(e)}\n            />\n          </div>\n          <div className=\"input-group mt-2\">\n            <div className=\"label-style\">Bottom Text</div>\n            <input\n              className=\"input-style\"\n              name=\"bottomText\"\n              value={this.state.bottomText}\n              type=\"text\"\n              onChange={e => this.handleChange(e)}\n            />\n          </div>\n          <div\n            className=\"meme-div\"\n            style={{ backgroundImage: `url(${this.state.randomImg[\"url\"]})` }}\n          >\n            <div className=\"meme-text mt-2\">{this.state.topText}</div>\n            <div className=\"meme-text\">{this.state.bottomText}</div>\n          </div>\n          <small class=\"mt-1\"> {this.state.randomImg[\"name\"]}</small>\n        </div>\n        <div className=\"mt-2\">\n          <button\n            className=\"outline-btn accent\"\n            onClick={() => {\n              this.handleSubmit();\n            }}\n          >\n            save\n          </button>\n        </div>\n        {/* </form> */}\n      </article>\n    );\n  }\n}\n\nexport default MemeGenerator;\n"]},"metadata":{},"sourceType":"module"}