{"ast":null,"code":"export function debounce(func,wait,immediate){var DEtimeout;return function(){var DEcontext=this,DEargs=arguments;var DElater=function DElater(){DEtimeout=null;if(!immediate){func.apply(DEcontext,DEargs);}};var DEcallNow=immediate&&!DEtimeout;clearTimeout(DEtimeout);DEtimeout=setTimeout(DElater,wait);if(DEcallNow){func.apply(DEcontext,DEargs);}};}export function bubbleSort(list){console.log(list);return list.sort(function(a,b){return b.val-a.val;});}export function mergeSort(list){var len=list.length;// an array of length == 1 is technically a sorted list\nif(len===1){return list;}// get mid item\nvar middleIndex=Math.ceil(len/2);// split current list into two: left and right list\nvar leftList=list.slice(0,middleIndex);var rightList=list.slice(middleIndex,len);// console.log(\"leftList1\", leftList);\n// console.log(\"rightList1\", rightList);\nleftList=mergeSort(leftList);rightList=mergeSort(rightList);// console.log(\"leftListRemix\", leftList);\n// console.log(\"rightListRemix\", rightList);\nvar newList=merge(leftList,rightList);// console.log(\"newList\", newList);\n// debugger;\nreturn newList;}// Solve the sub-problems and merge them together\nexport function merge(leftList,rightList){var sorted=[];while(leftList.length>0&&rightList.length>0){var leftItem=leftList.val;// if (typeof leftItem === \"string\") {\n//   console.log(\"i am leftitem before parse\", leftItem);\n//   leftItem = leftItem.replace(/\\%/, \"\");\n//   leftItem = parseFloat(leftItem);\n// }\nconsole.log(\"i am leftitem\",leftItem);var rightItem=rightList.val;// if (typeof rightItem === \"string\") {\n//   console.log(\"i am leftitem before parse\", leftItem);\n//   rightItem = rightItem.replace(/\\%/, \"\");\n//   rightItem = parseFloat(rightItem);\n// }\nif(leftItem<rightItem){sorted.push(rightItem);rightList.shift();console.log(\"leftItem is less leftItem, rightItem\",leftItem,rightItem);}else{sorted.push(leftItem);leftList.shift();}}// if left list has items, add what is left to the results\nwhile(leftList.length!==0){var temp=leftList[0];// console.log(\"temp b4 replace\", temp);\n// temp = temp.replace(/\\%/, \"\");\n// temp = parseFloat(temp);\nsorted.push(temp);console.log(\"leftList[0]\",temp);leftList.shift();}// if right list has items, add what is left to the results\nwhile(rightList.length!==0){var _temp=rightList[0];// temp = temp.replace(/\\%/, \"\");\n// temp = parseFloat(temp);\nsorted.push(_temp);console.log(\"rightList[0]\",_temp);rightList.shift();}console.log(\"i am sorted\",sorted);// debugger;\n// merge the left and right list\nreturn sorted;}// var items = [5, 3, 7, 6, 2, 9];\nfunction swap(items,leftIndex,rightIndex){var temp=items[leftIndex];items[leftIndex]=items[rightIndex];items[rightIndex]=temp;}function partition(items,left,right){var pivot=items[Math.floor((right+left)/2)],//middle element\ni=left,//left pointer\nj=right;//right pointer\nwhile(i<=j){while(items[i]<pivot){i++;}while(items[j]>pivot){j--;}if(i<=j){swap(items,i,j);//sawpping two elements\ni++;j--;}}return i;}function quickSort(items,left,right){var index;if(items.length>1){index=partition(items,left,right);//index returned from partition\nif(left<index-1){//more elements on the left side of the pivot\nquickSort(items,left,index-1);}if(index<right){//more elements on the right side of the pivot\nquickSort(items,index,right);}}return items;}// first call to quick sort\n// var sortedArray = quickSort(items, 0, items.length - 1);","map":{"version":3,"sources":["/Users/amandainnis/amandainnis.github.io/amandainnis.github.io/src/components/reusable/common.js"],"names":["debounce","func","wait","immediate","DEtimeout","DEcontext","DEargs","arguments","DElater","apply","DEcallNow","clearTimeout","setTimeout","bubbleSort","list","console","log","sort","a","b","val","mergeSort","len","length","middleIndex","Math","ceil","leftList","slice","rightList","newList","merge","sorted","leftItem","rightItem","push","shift","temp","swap","items","leftIndex","rightIndex","partition","left","right","pivot","floor","i","j","quickSort","index"],"mappings":"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","sourcesContent":["export function debounce(func, wait, immediate) {\n  var DEtimeout;\n  return function() {\n    var DEcontext = this,\n      DEargs = arguments;\n    var DElater = function() {\n      DEtimeout = null;\n      if (!immediate) {\n        func.apply(DEcontext, DEargs);\n      }\n    };\n    var DEcallNow = immediate && !DEtimeout;\n    clearTimeout(DEtimeout);\n    DEtimeout = setTimeout(DElater, wait);\n    if (DEcallNow) {\n      func.apply(DEcontext, DEargs);\n    }\n  };\n}\nexport function bubbleSort(list) {\n  console.log(list);\n  return list.sort((a, b) => b.val - a.val);\n}\nexport function mergeSort(list) {\n  const len = list.length;\n  // an array of length == 1 is technically a sorted list\n  if (len === 1) {\n    return list;\n  }\n\n  // get mid item\n  const middleIndex = Math.ceil(len / 2);\n  // split current list into two: left and right list\n  let leftList = list.slice(0, middleIndex);\n  let rightList = list.slice(middleIndex, len);\n  // console.log(\"leftList1\", leftList);\n  // console.log(\"rightList1\", rightList);\n  leftList = mergeSort(leftList);\n  rightList = mergeSort(rightList);\n  // console.log(\"leftListRemix\", leftList);\n  // console.log(\"rightListRemix\", rightList);\n  let newList = merge(leftList, rightList);\n  // console.log(\"newList\", newList);\n  // debugger;\n  return newList;\n}\n\n// Solve the sub-problems and merge them together\nexport function merge(leftList, rightList) {\n  const sorted = [];\n  while (leftList.length > 0 && rightList.length > 0) {\n    let leftItem = leftList.val;\n    // if (typeof leftItem === \"string\") {\n    //   console.log(\"i am leftitem before parse\", leftItem);\n    //   leftItem = leftItem.replace(/\\%/, \"\");\n    //   leftItem = parseFloat(leftItem);\n    // }\n\n    console.log(\"i am leftitem\", leftItem);\n    let rightItem = rightList.val;\n    // if (typeof rightItem === \"string\") {\n    //   console.log(\"i am leftitem before parse\", leftItem);\n    //   rightItem = rightItem.replace(/\\%/, \"\");\n    //   rightItem = parseFloat(rightItem);\n    // }\n    if (leftItem < rightItem) {\n      sorted.push(rightItem);\n      rightList.shift();\n      console.log(\"leftItem is less leftItem, rightItem\", leftItem, rightItem);\n    } else {\n      sorted.push(leftItem);\n      leftList.shift();\n    }\n  }\n\n  // if left list has items, add what is left to the results\n  while (leftList.length !== 0) {\n    let temp = leftList[0];\n    // console.log(\"temp b4 replace\", temp);\n    // temp = temp.replace(/\\%/, \"\");\n\n    // temp = parseFloat(temp);\n    sorted.push(temp);\n    console.log(\"leftList[0]\", temp);\n    leftList.shift();\n  }\n\n  // if right list has items, add what is left to the results\n  while (rightList.length !== 0) {\n    let temp = rightList[0];\n    // temp = temp.replace(/\\%/, \"\");\n    // temp = parseFloat(temp);\n    sorted.push(temp);\n    console.log(\"rightList[0]\", temp);\n\n    rightList.shift();\n  }\n  console.log(\"i am sorted\", sorted);\n  // debugger;\n  // merge the left and right list\n  return sorted;\n}\n\n// var items = [5, 3, 7, 6, 2, 9];\nfunction swap(items, leftIndex, rightIndex) {\n  var temp = items[leftIndex];\n  items[leftIndex] = items[rightIndex];\n  items[rightIndex] = temp;\n}\nfunction partition(items, left, right) {\n  var pivot = items[Math.floor((right + left) / 2)], //middle element\n    i = left, //left pointer\n    j = right; //right pointer\n  while (i <= j) {\n    while (items[i] < pivot) {\n      i++;\n    }\n    while (items[j] > pivot) {\n      j--;\n    }\n    if (i <= j) {\n      swap(items, i, j); //sawpping two elements\n      i++;\n      j--;\n    }\n  }\n  return i;\n}\n\nfunction quickSort(items, left, right) {\n  var index;\n  if (items.length > 1) {\n    index = partition(items, left, right); //index returned from partition\n    if (left < index - 1) {\n      //more elements on the left side of the pivot\n      quickSort(items, left, index - 1);\n    }\n    if (index < right) {\n      //more elements on the right side of the pivot\n      quickSort(items, index, right);\n    }\n  }\n  return items;\n}\n// first call to quick sort\n// var sortedArray = quickSort(items, 0, items.length - 1);\n"]},"metadata":{},"sourceType":"module"}