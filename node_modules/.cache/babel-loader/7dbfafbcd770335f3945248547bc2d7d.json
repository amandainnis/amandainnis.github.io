{"ast":null,"code":"var _jsxFileName = \"/Users/amandainnis/ReactProjects/board-app/src/components/learning/ToDoCard.js\";\nimport React from \"react\";\nimport todoData from \"../../data/todoData\";\nimport TodoItem from \"./todoItem\";\n/**\n * Let's make it so our checkbox can actually mark our todo as complete or incomplete!\n * This challenge is a little more involved than some of the past ones. Check the comments\n * in the code for some help on accomplishing this one\n *\n * Challenge:\n * 1. Create an event handler in the App component for when the checkbox is clicked (which is an `onChange` event)\n *    a. This method will be the trickest part. Check the comments in the stubbed-out method below for some pseudocode to help guide you through this part\n * 2. Pass the method down to the TodoItem component\n * 3. In the TodoItem component, make it so when the `onChange` event happens, it calls the `handleChange` method and passes the id of the todo into the function\n */\n\nclass ToDoCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: todoData\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(id) {\n    let myNewItems = this.state.todos.slice();\n    let myIndex = myNewItems[id].find(val => {\n      val[id];\n    });\n    this.setState(prevState => {\n      let myNewItems = prevState.todos.map(val => {\n        if (val.id === id) {\n          val.completed = !val.completed;\n        }\n\n        console.log(val);\n        return val;\n      });\n      return {\n        todos: myNewItems\n      };\n    }); // Update state so that the item with the given id flips `completed` from false to true (or vise versa)\n    // Remember not to modify prevState directly, but instead to return a new version of state with the change you want included in that update. (Think how you might use the `.map` method to do this)\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, this.state.todos.map((item, i) => {\n      return React.createElement(TodoItem, {\n        key: i,\n        id: item.id,\n        attributes: item,\n        handleChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      });\n    }));\n  }\n\n}\n\nexport default ToDoCard;","map":{"version":3,"sources":["/Users/amandainnis/ReactProjects/board-app/src/components/learning/ToDoCard.js"],"names":["React","todoData","TodoItem","ToDoCard","Component","constructor","props","state","todos","handleChange","bind","id","myNewItems","slice","myIndex","find","val","setState","prevState","map","completed","console","log","render","item","i"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA;;;;;;;;;;;;AAWA,MAAMC,QAAN,SAAuBH,KAAK,CAACI,SAA7B,CAAuC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAEP;AADI,KAAb;AAGA,SAAKQ,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AAEDD,EAAAA,YAAY,CAACE,EAAD,EAAK;AACf,QAAIC,UAAU,GAAG,KAAKL,KAAL,CAAWC,KAAX,CAAiBK,KAAjB,EAAjB;AACA,QAAIC,OAAO,GAAGF,UAAU,CAACD,EAAD,CAAV,CAAeI,IAAf,CAAoBC,GAAG,IAAI;AACvCA,MAAAA,GAAG,CAACL,EAAD,CAAH;AACD,KAFa,CAAd;AAGA,SAAKM,QAAL,CAAcC,SAAS,IAAI;AACzB,UAAIN,UAAU,GAAGM,SAAS,CAACV,KAAV,CAAgBW,GAAhB,CAAoBH,GAAG,IAAI;AAC1C,YAAIA,GAAG,CAACL,EAAJ,KAAWA,EAAf,EAAmB;AACjBK,UAAAA,GAAG,CAACI,SAAJ,GAAgB,CAACJ,GAAG,CAACI,SAArB;AACD;;AACDC,QAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ;AACA,eAAOA,GAAP;AACD,OANgB,CAAjB;AAOA,aAAO;AAAER,QAAAA,KAAK,EAAEI;AAAT,OAAP;AACD,KATD,EALe,CAef;AACA;AACD;;AACDW,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKhB,KAAL,CAAWC,KAAX,CAAiBW,GAAjB,CAAqB,CAACK,IAAD,EAAOC,CAAP,KAAa;AACjC,aACE,oBAAC,QAAD;AACE,QAAA,GAAG,EAAEA,CADP;AAEE,QAAA,EAAE,EAAED,IAAI,CAACb,EAFX;AAGE,QAAA,UAAU,EAAEa,IAHd;AAIE,QAAA,YAAY,EAAE,KAAKf,YAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAQD,KATA,CADH,CADF;AAcD;;AA1CoC;;AA4CvC,eAAeN,QAAf","sourcesContent":["import React from \"react\";\nimport todoData from \"../../data/todoData\";\nimport TodoItem from \"./todoItem\";\n/**\n * Let's make it so our checkbox can actually mark our todo as complete or incomplete!\n * This challenge is a little more involved than some of the past ones. Check the comments\n * in the code for some help on accomplishing this one\n *\n * Challenge:\n * 1. Create an event handler in the App component for when the checkbox is clicked (which is an `onChange` event)\n *    a. This method will be the trickest part. Check the comments in the stubbed-out method below for some pseudocode to help guide you through this part\n * 2. Pass the method down to the TodoItem component\n * 3. In the TodoItem component, make it so when the `onChange` event happens, it calls the `handleChange` method and passes the id of the todo into the function\n */\nclass ToDoCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: todoData\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(id) {\n    let myNewItems = this.state.todos.slice();\n    let myIndex = myNewItems[id].find(val => {\n      val[id];\n    });\n    this.setState(prevState => {\n      let myNewItems = prevState.todos.map(val => {\n        if (val.id === id) {\n          val.completed = !val.completed;\n        }\n        console.log(val);\n        return val;\n      });\n      return { todos: myNewItems };\n    });\n    // Update state so that the item with the given id flips `completed` from false to true (or vise versa)\n    // Remember not to modify prevState directly, but instead to return a new version of state with the change you want included in that update. (Think how you might use the `.map` method to do this)\n  }\n  render() {\n    return (\n      <div>\n        {this.state.todos.map((item, i) => {\n          return (\n            <TodoItem\n              key={i}\n              id={item.id}\n              attributes={item}\n              handleChange={this.handleChange}\n            ></TodoItem>\n          );\n        })}\n      </div>\n    );\n  }\n}\nexport default ToDoCard;\n"]},"metadata":{},"sourceType":"module"}